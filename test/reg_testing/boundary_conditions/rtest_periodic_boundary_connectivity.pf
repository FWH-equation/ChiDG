!-----------------------------------------------------------------------------------------------------
!!
!!       REGRESSSION TEST
!!  
!!       Testing convergence of Linear Advection implicit system. The expectation is that the system 
!!       converges in one Newton iteration, since the governing equations are linear. The test for this
!!       is then to ensure that two inner iterations(Newton iterations) were executed for one step 
!!       in the backward-euler time-scheme. The first Newton iteration should converge the system.
!!       The second Newton iteration should then compute a residual of machine-zero and exit the loop.
!!
!!
!!
!------------------------------------------------------------------------------------------------------
@Test
subroutine rtest_periodic_boundary_connectivity()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, XI_MIN, ETA_MIN, ZETA_MIN, XI_MAX, ETA_MAX, ZETA_MAX, &
                                  ONE, TWO, THREE, FOUR, FIVE

    use type_chidg,         only: chidg_t
    use type_point,         only: point_t

    use mod_testutils,      only: meshgen
    use type_dict,          only: dict_t
    use mod_io
    implicit none

    type(chidg_t)                       :: chidg
    type(point_t),          allocatable :: pts(:,:,:)
    type(dict_t)                        :: toptions
    integer(ik)                         :: nterms_c, itime, ielem





    !============================================================================
    !
    ! Define input data here that is normally read through the namelist input file
    !
    !
    !============================================================================
    basis          = 'legendre'
    nterms_s       = 8
    gq_rule        = 2
    eqnset         = 'euler'
    !timescheme     = 'backward_euler'
    timescheme     = 'newton'
    !matrixsolver   = 'gaussseidel'
    matrixsolver   = 'fgmres'
    preconditioner = 'identity'


    !============================================================================


    ! Set time-scheme options to pass during initialization
    call toptions%set('dt',0.1_rk)
    call toptions%set('tol',1.e-13_rk)
    call toptions%set('nsteps',100)
    call toptions%set('nwrite',0)
    call toptions%set('cfl0',cfl0)



    !
    ! Initialize ChiDG environment.
    !
    call chidg%start_up('core')   



    !
    ! Set ChiDG components
    !
    call chidg%set('time_scheme',timescheme,toptions)
    call chidg%set('matrixsolver',matrixsolver)
    call chidg%set('preconditioner',preconditioner)


    !
    ! Generate points for mesh
    !
    call meshgen('15x15x3',pts)
     

    !
    ! Add domain to ChiDG
    !
    nterms_c = 8
    call chidg%data%add_domain('D_01',pts,nterms_c,eqnset,nterms_s)



    !
    ! Initialize domain
    !
    call chidg%data%add_bc('D_01','periodic',XI_MIN)
    call chidg%data%add_bc('D_01','periodic',ETA_MIN)
    call chidg%data%add_bc('D_01','periodic',ZETA_MIN)


    call chidg%data%init_sdata()

    !
    ! Wrap-up initialization activities
    !
    call chidg%init('finalize')








    ! Check connectivity of periodic boundaries for a few elements
    ! Test element 1
    ielem = 1
    @assertEqual(15,chidg%data%mesh(1)%faces(ielem,XI_MIN)%ineighbor)
    @assertEqual(2,chidg%data%mesh(1)%faces(ielem,XI_MAX)%ineighbor)
    @assertEqual(211,chidg%data%mesh(1)%faces(ielem,ETA_MIN)%ineighbor)
    @assertEqual(16,chidg%data%mesh(1)%faces(ielem,ETA_MAX)%ineighbor)
    @assertEqual(451,chidg%data%mesh(1)%faces(ielem,ZETA_MIN)%ineighbor)
    @assertEqual(226,chidg%data%mesh(1)%faces(ielem,ZETA_MAX)%ineighbor)




    ! Test element 211
    ielem = 211
    @assertEqual(225,chidg%data%mesh(1)%faces(ielem,XI_MIN)%ineighbor)
    @assertEqual(212,chidg%data%mesh(1)%faces(ielem,XI_MAX)%ineighbor)
    @assertEqual(196,chidg%data%mesh(1)%faces(ielem,ETA_MIN)%ineighbor)
    @assertEqual(1,chidg%data%mesh(1)%faces(ielem,ETA_MAX)%ineighbor)
    @assertEqual(661,chidg%data%mesh(1)%faces(ielem,ZETA_MIN)%ineighbor)
    @assertEqual(436,chidg%data%mesh(1)%faces(ielem,ZETA_MAX)%ineighbor)











end subroutine
