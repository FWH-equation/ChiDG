!--------------------------------------------------------------------------------
!
!                Euler equation set entropy-error regression test
!
!   This test suite runs a series of tests solving the euler equations on a quartic
!   smoothbump grid of varying resolution for varying orders of solution accuracy.
!   At the end of each case, the entropy error is computed for the domain. The flow
!   phenomena that are present for the smoothbump case should be isentropic. The 
!   error metric then, is to compute the entropy generated from the numerical scheme.
!
!   This suite runs the smoothbump case with 6x2x2, 12x4x2, and 24x8x2 grids with
!   quartic elements. Each grid is run from 1st to 4th order accuracy.
!
!   Additionally, this suite runs the above configurations on 1, 2, 7, and 10 
!   processors. 
!
!   The boundary condition settings are:
!
!       Inlet:  euler_totalinlet  
!               110000 Total Pressure 
!               300 Total Temperature
!
!       Outlet: euler_pressureoutlet
!               93000 Static Pressure
!
!       Walls: euler_wall
!
!--------------------------------------------------------------------------------
module rtest_entropy_errorrate_mod
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, THREE, IO_DESTINATION
    use type_chidg,         only: chidg_t
    use mod_bc,             only: create_bc
    use type_function,      only: function_t
    use mod_function,       only: create_function
    use mod_grid_operators, only: initialize_variable
    use mod_entropy,        only: compute_entropy_error

    use mod_chidg_mpi,      only: IRANK, NRANK
    use mpi_f08,            only: MPI_COMM
    use mod_io
    implicit none


    public  :: rtest_equations_euler_entropyerror




    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order
        character(100)  :: gridfile
        integer(ik)     :: order
        real(rk)        :: entropy_ref
    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: rtest_equations_euler_entropyerror
        character(100)  :: gridfile
        integer(ik)     :: order
        real(rk)        :: entropy_ref

        type(chidg_t)   :: chidg
        type(mpi_comm)  :: ChiDG_COMM
    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type rtest_equations_euler_entropyerror
    !*******************************************************************************



    !> Simple container to hold arbitrary length file names. That way, we can have
    !! an array of filenames that get looped through.
    !!
    !-------------------------------------------------------------------------------
    type :: string
        character(len=:), allocatable   :: str
    end type
    !*******************************************************************************






contains


    !> Parameter constructors
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)          :: test_parameter
        type(rtest_equations_euler_entropyerror)    :: test

        test%gridfile    = test_parameter%gridfile
        test%order       = test_parameter%order
        test%entropy_ref = test_parameter%entropy_ref

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        type(string),       allocatable :: files(:)
        integer(ik),        allocatable :: orders(:)
        real(rk),           allocatable :: entropies(:)
        integer(ik) :: icase

        files = [  string('smoothbump_6x2x2.h5') , &
                   string('smoothbump_6x2x2.h5') , &
                   string('smoothbump_6x2x2.h5') , &
                   string('smoothbump_6x2x2.h5') , &
                   string('smoothbump_12x4x2.h5'), &
                   string('smoothbump_12x4x2.h5'), &
                   string('smoothbump_12x4x2.h5'), &
                   string('smoothbump_12x4x2.h5'), &
                   string('smoothbump_24x8x2.h5'), &
                   string('smoothbump_24x8x2.h5'), &
                   string('smoothbump_24x8x2.h5'), &
                   string('smoothbump_24x8x2.h5') &
                    ]

        orders = [ 1, &
                   2, &
                   3, &
                   4, &
                   1, &
                   2, &
                   3, &
                   4, &
                   1, &
                   2, &
                   3, &
                   4 ]

        entropies = [ 2.761019163e-3_rk, &
                      3.618440627e-3_rk, &
                      1.116431012e-3_rk, &
                      6.731678976e-4_rk, &
                      3.807878665e-3_rk, &
                      1.323352387e-3_rk, &
                      3.940896088e-4_rk, &
                      8.433932228e-5_rk, &
                      4.038806838e-3_rk, &
                      5.554687475e-4_rk, &
                      5.367783209e-5_rk, &
                      7.223333943e-6_rk ]

        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%gridfile    = files(icase)%str
            params(icase)%order       = orders(icase)
            params(icase)%entropy_ref = entropies(icase)
        end do

    end function getParameters
    !*******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !-------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(len=200) :: buffer

        write(buffer,'( "(gridfile, order)=","(", A10,",", I2, ")" )') this%gridfile, this%order


        string = trim(buffer)
    end function toString
    !********************************************************************************************








    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !--------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(rtest_equations_euler_entropyerror),  intent(inout)   :: this

        class(function_t),  allocatable :: fcn
        real(rk)                        :: tol, entropy_error

        
        tol = 1.e-6_rk

        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        spacedim         = 3
        nterms_s         = this%order**THREE
        gq_rule          = 2
        time_scheme      = 'steady'
        nonlinear_solver = 'quasi_newton'
        linear_solver    = 'fgmres'
        preconditioner   = 'ILU0'
        IO_DESTINATION   = 'file'
        !------------------------------------------------------------------------------

        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()



        ! Set timescheme options to pass during initialization
        call toptions%set('dt', 0.1_rk) ! means nothing here
        call toptions%set('nsteps',100)
        call toptions%set('nwrite',0)

        ! Set linear solver options to pass during initialization
        call loptions%set('tol',1.e-8_rk)

        ! Set nonlinear solver options
        call noptions%set('tol',3.e-5_rk)
        call noptions%set('cfl0',1.0_rk)
        call noptions%set('nsteps',100)



        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env',this%ChiDG_COMM)


        !
        ! Read grid
        !
        call this%chidg%read_grid(this%gridfile,spacedim)
        call this%chidg%read_boundaryconditions(this%gridfile)



        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%init('chimera')
        call this%chidg%initialize_solution_solver()


        !
        ! Set ChiDG components
        !
        call this%chidg%set('time_scheme',      time_scheme,      toptions)
        call this%chidg%set('nonlinear_solver', nonlinear_solver, noptions)
        call this%chidg%set('linear_solver',    linear_solver,    loptions)
        call this%chidg%set('preconditioner',   preconditioner)




        !
        ! Initialize solution
        !
        call create_function(fcn,'constant')

        call fcn%set_option('val',1.13262_rk)
        call initialize_variable(this%chidg%data,1,fcn) ! rho
        call fcn%set_option('val',190.339029_rk)
        call initialize_variable(this%chidg%data,2,fcn) ! rhou
        call fcn%set_option('val',ZERO)
        call initialize_variable(this%chidg%data,3,fcn) ! rhov
        call fcn%set_option('val',ZERO)
        call initialize_variable(this%chidg%data,4,fcn) ! rhow
        call fcn%set_option('val',248493.425_rk)
        call initialize_variable(this%chidg%data,5,fcn) ! rhoE


        

        !
        ! Wrap-up initialization activities
        !
        call this%chidg%init('finalize')

    end subroutine SetUp
    !******************************************************************************************************


    subroutine tearDown(this)
        class(rtest_equations_euler_entropyerror),  intent(inout)   :: this


        ! Close ChiDG
        call this%chidg%close('core')

    end subroutine tearDown
    !******************************************************************************************************










    !>  Run the simulation, compute the entropy error, test against the reference values.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------
    @Test(npes=[1,2,4,7,10])
    subroutine rtest_entropy_error_rate(self)
        class(rtest_equations_euler_entropyerror),  intent(inout)   :: self

        real(rk)    :: tol, entropy_error

        !
        ! Run ChiDG simulation
        !
        call self%chidg%run()
        call self%chidg%report('after')

        !
        ! Compute entropy error
        !
        entropy_error = compute_entropy_error(self%chidg%data)

        !
        ! Test that computed entropy error is the expected value
        !
        tol = self%entropy_ref/100._rk
        @assertEqual(self%entropy_ref,entropy_error,tol)


    end subroutine rtest_entropy_error_rate
    !*******************************************************************************************************














end module rtest_entropy_errorrate_mod



