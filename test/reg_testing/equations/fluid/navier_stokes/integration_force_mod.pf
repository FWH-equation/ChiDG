!--------------------------------------------------------------------------------
!
!                Euler equation set entropy-error regression test
!
!   This test suite runs a series of tests solving the euler equations on a quartic
!   smoothbump grid of varying resolution for varying orders of solution accuracy.
!   At the end of each case, the entropy error is computed for the domain. The flow
!   phenomena that are present for the smoothbump case should be isentropic. The 
!   error metric then, is to compute the entropy generated from the numerical scheme.
!
!   This suite runs the smoothbump case with 6x2x2, 12x4x2, and 24x8x2 grids with
!   quartic elements. Each grid is run from 1st to 4th order accuracy. Each 
!   configuration is run on 1, 2, 7, and 10 processors. The nonlinear convergence
!   for each case is stored in a module global variable that is used to compare
!   convergence.
!
!   After the simulation for each case has been run, an additional test
!   compares the nonlinear convergence of the Newton solver from the parallel
!   simulations to the same case run in serial.
!
!   The boundary condition settings are:
!
!       Inlet:  euler_totalinlet  
!               Total Pressure    = 110000 (Pa) 
!               Total Temperature = 300 (K)
!
!       Outlet: euler_pressureoutlet
!               Static Pressure   = 93000 (Pa)
!
!       Walls: euler_wall
!
!
!
!  Linear Velocity Profile:  du/dy = (100-0)/(1-0) = 100
!                          --------->.
!                          ------->.
!                          ----->.
!                          --->.
!                          ->.
!                          .
!      |------------------------------------------|
!
!
!
!
!
!
!
!   @author Nathan A. Wukie
!   @date   10/23/2016
!
!--------------------------------------------------------------------------------
module integration_force_mod
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: ZERO, HALF, ONE, THREE, IO_DESTINATION, &
                                      XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use mod_string,             only: string_t
    use mod_force,              only: compute_force
    use type_chidg,             only: chidg_t
    use mod_bc,                 only: create_bc
    use type_bc_state,          only: bc_state_t
    use type_bc_state_group,    only: bc_state_group_t
    use type_rvector,           only: rvector_t
    use type_function,          only: function_t
    use type_point,             only: point_t
    use mod_function,           only: create_function, registered_fcns
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file

    use mod_chidg_mpi,          only: IRANK, NRANK
    use mpi_f08,                only: MPI_COMM
    use mod_io
    implicit none


    public  :: force




    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order

        character(100)  :: gridfile
        integer(ik)     :: order

    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: force

        character(100)  :: gridfile
        integer(ik)     :: order

        type(chidg_t)   :: chidg
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type force
    !*******************************************************************************




    !>  Function implementing an initial solution for fluid variables that 
    !!  sets a linear velocity gradient and constant pressure
    !!
    !!  du/dy = 100
    !   P     = 100000
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/12/2017
    !!
    !!
    !-------------------------------------------------------------------------------
    type, extends(function_t), public :: initial_solution_f


    contains

        procedure   :: init
        procedure   :: compute

    end type initial_solution_f
    !********************************************************************************



contains

    !-------------------------------------------------------------------------------!
    !                     Implement Initial Solution Function                       !
    !-------------------------------------------------------------------------------!



    !>
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !-------------------------------------------------------------------------
    subroutine init(self)
        class(initial_solution_f),  intent(inout)  :: self

        !
        ! Set function name
        !
        call self%set_name("Test Compute Force Initial Solution")

        call self%add_option('ivar', ZERO)

    end subroutine init
    !*************************************************************************







    !>
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !!
    !-----------------------------------------------------------------------------------------
    impure elemental function compute(self,time,coord) result(val)
        class(initial_solution_f),  intent(inout)   :: self
        real(rk),                   intent(in)      :: time
        type(point_t),              intent(in)      :: coord

        real(rk)    :: val, x, y, z, ivar, tol,             &
                       velocity_1, velocity_2, velocity_3,  &
                       momentum_1, momentum_2, momentum_3,  &
                       dudy, density, pressure, energy, gam, vmag


        tol = 1.e-5_rk
        ivar = self%get_option_value('ivar')


        x = coord%c1_
        y = coord%c2_
        z = coord%c3_


        gam      = 1.4_rk
        dudy     = 100._rk
        pressure = 100000._rk

        density    = 1.19_rk
        velocity_1 = dudy*y
        velocity_2 = ZERO
        velocity_3 = ZERO
        vmag       = sqrt(velocity_1*velocity_1 + velocity_2*velocity_2 + velocity_3*velocity_3)
        momentum_1 = density*velocity_1
        momentum_2 = density*velocity_2
        momentum_3 = density*velocity_3
        energy     = (pressure/(gam-ONE)) + HALF*density*vmag*vmag



        if (     real(ivar-1) < tol) then
            val = density
        else if (real(ivar-2) < tol) then
            val = momentum_1
        else if (real(ivar-3) < tol) then
            val = momentum_2
        else if (real(ivar-4) < tol) then
            val = momentum_3
        else if (real(ivar-5) < tol) then
            val = energy
        else if (real(ivar-6) < tol) then
            val = pressure
        else if (real(ivar-7) < tol) then
            val = velocity_1
        else if (real(ivar-8) < tol) then
            val = velocity_2
        else if (real(ivar-9) < tol) then
            val = velocity_3
        else
            print*, 'Bad function parameter!'
        end if


    end function compute
    !**********************************************************************************

























    !> Parameter constructors
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)  :: test_parameter
        type(force)                         :: test

        test%gridfile    = test_parameter%gridfile
        test%order       = test_parameter%order

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        type(string_t),     allocatable :: files(:)
        integer(ik),        allocatable :: orders(:)
        integer(ik) :: icase


        files = [  string_t('smoothbump_6x2x2.h5') ]

        orders = [ 3 ]


        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%gridfile = files(icase)%str
            params(icase)%order    = orders(icase)
        end do

    end function getParameters
    !*******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !-------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(len=200) :: buffer

        write(buffer,"( '(order)=','(', I2 ')' )") this%order
        string = trim(buffer)

    end function toString
    !********************************************************************************************







    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !--------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(force),  intent(inout)   :: this

        type(initial_solution_f)        :: initial_solution
        class(bc_state_t),  allocatable :: bc_state
        type(bc_state_group_t)          :: bc_state_groups(3)
        type(string_t)                  :: group_names(1,6)
        class(function_t),  allocatable :: fcn
        real(rk)                        :: tol, entropy_error


        !-------------------------------------------!
        !     Register initial solution function    !
        !-------------------------------------------!
        call initial_solution%init()
        call registered_fcns%push_back(initial_solution)





        
        tol = 1.e-6_rk

        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        gq_rule          = 2
        time_integrator  = 'steady'
        nonlinear_solver = 'quasi_newton'
        linear_solver    = 'fgmres_cgs'
        preconditioner   = 'RASILU0'
        IO_DESTINATION   = 'file'
        !------------------------------------------------------------------------------


        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()



        ! Set timescheme options to pass during initialization
        !call toptions%set('dt', 0.1_rk) ! means nothing here
        !call toptions%set('nsteps',100)
        !call toptions%set('nwrite',0)

        call this%chidg%data%time_manager%init()

        ! Set linear solver options to pass during initialization
        call loptions%set('tol',1.e-9_rk)

        ! Set nonlinear solver options
        call noptions%set('tol',3.e-5_rk)
        call noptions%set('cfl0',1.0_rk)
        call noptions%set('nsteps',100)



        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('mpi',this%ChiDG_COMM)
        call this%chidg%start_up('core')




        !
        ! Create mesh
        !
        if (IRANK == GLOBAL_MASTER) then
            bc_state_groups(1)%name = 'Farfield'
            bc_state_groups(2)%name = 'Symmetry'
            bc_state_groups(3)%name = 'Walls'


            call create_bc('Farfield', bc_state)
            call bc_state%set_fcn('Density',    'Test Compute Force Initial Solution')
            call bc_state%set_fcn('Pressure',   'Test Compute Force Initial Solution')
            call bc_state%set_fcn('Velocity-1', 'Test Compute Force Initial Solution')
            call bc_state%set_fcn('Velocity-2', 'Test Compute Force Initial Solution')
            call bc_state%set_fcn('Velocity-3', 'Test Compute Force Initial Solution')
            call bc_state%set_fcn_option('Density',   'ivar', 1._rk   )
            call bc_state%set_fcn_option('Pressure',  'ivar', 6._rk   )
            call bc_state%set_fcn_option('Velocity-1','ivar', 7._rk   )
            call bc_state%set_fcn_option('Velocity-2','ivar', 8._rk   )
            call bc_state%set_fcn_option('Velocity-3','ivar', 9._rk   )
            call bc_state_groups(1)%add_bc_state(bc_state)

            call create_bc('Symmetry', bc_state)
            call bc_state_groups(2)%add_bc_state(bc_state)

            call create_bc('Wall', bc_state)
            call bc_state_groups(3)%add_bc_state(bc_state)



            ! Define patch group names
            group_names(1,:) = [string_t('Farfield'), &
                                string_t('Farfield'), &
                                string_t('Walls')   , &
                                string_t('Farfield'), &
                                string_t('Symmetry'), &
                                string_t('Symmetry') ]


            call create_mesh_file('D1 NxNxN',this%gridfile,equation_sets   = [string_t('Laminar Navier Stokes')], &
                                                           group_names     = group_names,     &
                                                           bc_state_groups = bc_state_groups, &
                                                           nelem_xi        = 10,              &
                                                           nelem_eta       = 1,               &
                                                           nelem_zeta      = 1)
        end if


        !
        ! Set ChiDG components
        !
        call this%chidg%set('Solution Order',   integer_input=this%order)
        call this%chidg%set('Time Integrator',  algorithm=time_integrator)
        call this%chidg%set('Nonlinear Solver', algorithm=nonlinear_solver, options=noptions)
        call this%chidg%set('Linear Solver',    algorithm=linear_solver,    options=loptions)
        call this%chidg%set('Preconditioner',   algorithm=preconditioner)


        !
        ! Read grid
        !
        call this%chidg%read_mesh(this%gridfile)




        !
        ! Initialize solution
        !
        call create_function(fcn,'Test Compute Force Initial Solution')

        call fcn%set_option('ivar',1._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,1)
        call fcn%set_option('ivar',2._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,2)
        call fcn%set_option('ivar',3._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,3)
        call fcn%set_option('ivar',4._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,4)
        call fcn%set_option('ivar',5._rk)
       call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,5)



    end subroutine SetUp
    !*******************************************************************************************


    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(force),  intent(inout)   :: this

        ! Close ChiDG
        call this%chidg%shut_down('core')

        if (IRANK == GLOBAL_MASTER) then
            call delete_file(this%gridfile)
        end if

    end subroutine tearDown
    !******************************************************************************************










    !>  Compute force
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/12/2017
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test(npes=[1,4,7])
    subroutine test_compute_force(self)
        class(force),  intent(inout)   :: self

        real(rk)    :: tol, force_computed(3), force_expected(3)


        !
        ! Compute force: THIS IS BEING TESTED
        !
        force_computed = compute_force(self%chidg%data, 'Walls')



        !
        ! Test that computed entropy error is the expected value
        !
        print*, force_computed
        print*, force_expected
        force_expected = [100._rk, -100000._rk, ZERO]
        tol = 1.e-6_rk
        @assertEqual(force_expected,force_computed,tol)


    end subroutine test_compute_force
    !*******************************************************************************************










end module integration_force_mod
