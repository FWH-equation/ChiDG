!-----------------------------------------------------------------------------------------------------
!!
!!       REGRESSSION TEST
!!  
!!       Testing convergence of Linear Advection implicit system. The expectation is that the system 
!!       converges in one Newton iteration, since the governing equations are linear. The test for this
!!       is then to ensure that two inner iterations(Newton iterations) were executed for one step 
!!       in the backward-euler time-scheme. The first Newton iteration should converge the system.
!!       The second Newton iteration should then compute a residual of machine-zero and exit the loop.
!!
!!
!!
!------------------------------------------------------------------------------------------------------
@Test
subroutine rtest_linearadvection_implicit_convergence()
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, XI_MIN, ETA_MIN, ZETA_MIN, XI_MAX, ETA_MAX, ZETA_MAX, &
                                          IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_bc,                    only: bc_t
    use mod_bc,                     only: create_bc

    use mod_grid_operators,         only: initialize_variable
    use type_function,              only: function_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_function,               only: create_function
    use mod_testutils,              only: meshgen
    use mod_io
    implicit none

    type(chidg_t)                       :: chidg
    class(bc_t),            allocatable :: bc
    type(point_t),          allocatable :: nodes(:)
    type(domain_connectivity_t)         :: connectivity
    class(function_t),      allocatable :: fcn
    integer(ik)                         :: nterms_c, itime





    !============================================================================
    !
    ! Define input data here that is normally read through the namelist input file
    !
    !
    !============================================================================
    basis             = 'legendre'
    spacedim          = 3
    nterms_s          = 27
    gq_rule           = 2
    time_scheme       = 'backward_euler_subiteration'
    nonlinear_solver  = 'quasi_newton'
    linear_solver     = 'fgmres'
    preconditioner    = 'identity'
    !============================================================================


    !
    ! Send log to file
    !
    IO_DESTINATION = 'file'


    !
    ! Set timescheme options to pass during initialization
    !
    call toptions%set('dt',0.1_rk)
    call toptions%set('nsteps',10)
    call toptions%set('nwrite',100)


    !
    ! Set nonlinear solver options to pass during initialization
    !
    call noptions%set('tol',1.e-14_rk)
    call noptions%set('cfl0',2.0_rk)
    call noptions%set('nsteps',100)

    !
    ! Set nonlinear solver options to pass during initialization
    !
    call loptions%set('tol', 1.e-14_rk)

    !
    ! Initialize ChiDG environment.
    !
    call chidg%init('env')   



    !
    ! Set ChiDG components
    !
    call chidg%set('time_scheme',time_scheme,toptions)
    call chidg%set('nonlinear_solver',nonlinear_solver,noptions)
    call chidg%set('linear_solver',linear_solver,loptions)
    call chidg%set('preconditioner',preconditioner)


    !
    ! Generate points for mesh
    !
    spacedim = 3
    call chidg%read_grid('D1_E27_M1.h5',spacedim)
    call chidg%read_boundaryconditions('D1_E27_M1.h5')




    call chidg%initialize_solution_domains(nterms_s)
    call chidg%init('communication')
    call chidg%initialize_solution_solver()



    !
    ! Set initial solution
    !
    call create_function(fcn,'gaussian')
    call fcn%set_option('b_x',0._rk)
    call fcn%set_option('b_y',1.5_rk)
    call fcn%set_option('b_z',1.5_rk)
    call fcn%set_option('c',2.0_rk)
    call initialize_variable(chidg%data,1,fcn)




    !
    ! Wrap-up initialization activities
    !
    call chidg%init('finalize')



    !
    ! Run ChiDG simulation
    !
    call chidg%run()




    ! Test the number of inner, Newton iterations were required to converge the system.
    ! Since the equation set is linear(Linear Advection), only one Newton iteration should be required
    ! to converge the real time-step. The test here then, is for the first time-step (itime = 1), the recorded
    ! number of inner iterations should be two. This is since the solver will execute a second iteration, which
    ! should compute the residual of zero and indicate the system is converged.
    itime = 1
    @assertEqual(2,chidg%time_scheme%newton_iterations%at(itime))


    !
    ! Close ChiDG
    !
    call chidg%close()


end subroutine
