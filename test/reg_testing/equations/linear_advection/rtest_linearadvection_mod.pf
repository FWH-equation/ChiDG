module rtest_linearadvection_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, NFACES, &
                                          IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_densematrix,           only: densematrix_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_testutils,              only: create_mesh
    use mod_check_jacobian
    implicit none

    public  :: rtest_eq_LA





    !> This parameter is used to test the linearization for different blocks.
    !> iblk = [XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG]
    !!
    !!
    !!
    !---------------------------------------------------------------------------
    @TestParameter(constructor=newBlock)
    type, extends (AbstractTestParameter) :: blockParam
        integer(ik)         :: iblk
    contains
        procedure :: toString
    end type blockParam
    !***************************************************************************
    
    
    


    !> Main Testing Fixture with data containers
    !!
    !!
    !!
    !---------------------------------------------------------------------------
    @TestCase(constructor=newTest)
    type, extends(ParameterizedTestCase) ::  rtest_eq_LA
        type(chidg_t)       :: chidg
        integer(ik)         :: iblk
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type rtest_eq_LA
    !***************************************************************************





contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(rtest_eq_LA),    intent(inout)   :: this
        
        integer(ik), parameter      :: npt = 64
        type(point_t), allocatable  :: nodes(:)
        type(domain_connectivity_t) :: connectivity
        integer(ik)                 :: neqns, nterms_s, nterms_c, spacedim
        real(rk), dimension(npt)    :: x,y,z
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'

        !
        ! Initialize chidg environment
        !
        call this%chidg%init('env')

        !
        ! Generate points array for 3x3x3 mesh
        !
        call create_mesh('3x3x3_unit',nodes,connectivity)

        !
        ! Initialize domain
        !
        spacedim = 3
        nterms_s = 8
        nterms_c = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'linearadvection')
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%initialize_solution_solver()

    end subroutine setUp
    !**************************************************************************************************
    

    !>
    !!
    !!
    !--------------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(rtest_eq_LA),    intent(inout)   :: this

        !
        ! Close ChiDG
        !
        call this%chidg%close('core')

    end subroutine tearDown
    !**************************************************************************************************




    !> Function for setting the correct parameter value in the constructor
    !!
    !!
    !--------------------------------------------------------------------------------------------------
    function newBlock(iblk) result(param)
        type(blockParam)        :: param
        integer(ik), intent(in) :: iblk
        
        param%iblk = iblk
    end function newBlock
    !**************************************************************************************************




    
    !> TestCase constructor for parameter specification
    !!
    !!
    !--------------------------------------------------------------------------------------------------
    function newTest(param)
        type(rtest_eq_LA)        :: newTest
        type(blockParam)        :: param
        
        newTest%iblk = param%iblk
    end function newTest
    !**************************************************************************************************



 
    !> ToString - I think this is used to report the particular parameter value
    !! in case of an error.
    !!
    !--------------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class(blockParam), intent(in)   :: this
        character(:), allocatable       :: string
        character(len=3)                :: str
         
        write(str,'(i0)') this%iblk
        string = str

    end function toString
    !***************************************************************************************************
 


















    !>  Test Volume Flux jacobian calclation
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------------
    @Test(cases = [7])
    subroutine rtest_LA_jacobian_volume_advective_flux(self)
        class(rtest_eq_LA),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, ivar, iblk, irow
        real(rk)    :: jref(8,8)                ! Reference jacobian contribution
        real(rk)    :: tol
        
        tol = 1.0e-7_rk
        
        ielem = 14
        ivar  = 1
        
        ! Block Parameter from cases = []
        iblk = self%iblk
        


        ! Exact volume flux jacobian for Linear Advection with c=[1,0,0], on reference elements
        !
        ! Exact components are negated here, since the contribution of the volume integral in 
        ! DG is subtracted
        !
        jref(:,1) = -[ZERO, ZERO, ZERO, EIGHT, ZERO, ZERO, ZERO, ZERO]
        jref(:,2) = -[ZERO, ZERO, ZERO, ZERO, 2.66666666666666_rk, ZERO, ZERO, ZERO]
        jref(:,3) = -[ZERO, ZERO, ZERO, ZERO, ZERO, 2.66666666666666_rk, ZERO, ZERO]
        jref(:,4) = -ZERO
        jref(:,5) = -ZERO
        jref(:,6) = -ZERO
        jref(:,7) = -[ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, ZERO, 0.888888888888888_rk]
        jref(:,8) = -ZERO




        ! Compute Automatic and Finite Difference jacobians
        !
        ! The exact values in ref are used as verification values here. The finite difference
        ! data is not used.
        call check_jacobian_volume_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)
        

        @assertEqual(jref, blk_dnad%mat, tol)
        
    end subroutine rtest_LA_jacobian_volume_advective_flux
    !**********************************************************************************************
    
    
    
     

    
    
    













end module rtest_linearadvection_mod
