module rtest_duallinearadvection_mod
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, NFACES, &
                                  IO_DESTINATION
    use type_chidg,         only: chidg_t
    use type_function,      only: function_t
    use mod_function,       only: create_function
    use mod_grid_operators, only: initialize_variable
    use type_point,         only: point_t
    use type_densematrix,   only: densematrix_t
    use mod_testutils,      only: meshgen
    use mod_check_jacobian
    implicit none

    public  :: test_eq_duallinearadvection


    !> This parameter is used to test the linearization for different blocks.
    !> iblk = [XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG]
    @TestParameter(constructor=newBlock)
    type, extends (AbstractTestParameter) :: blockParam
        integer(ik)         :: iblk
    contains
        procedure :: toString
    end type blockParam
    
    
    
    @TestCase(constructor=newTest)
    type, extends(ParameterizedTestCase) ::  test_eq_duallinearadvection
        type(chidg_t)       :: chidg
        integer(ik)         :: iblk
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_eq_duallinearadvection





contains
    !------------------------
    !> SET-UP  +  TEAR-DOWN
    !------------------------

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_eq_duallinearadvection),    intent(inout)   :: this
        
        integer(ik),        parameter       :: npt = 64
        type(point_t),      allocatable     :: nodes(:)
        integer(ik),        allocatable     :: connectivity(:,:)
        class(function_t),  allocatable     :: fcn
        integer(ik)                         :: neqns, nterms_s, nterms_c, spacedim
        real(rk), dimension(npt)            :: x,y,z
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'

        !
        ! Initialize chidg environment
        !
        call this%chidg%init('env')

        !
        ! Generate points array for 3x3x3 mesh
        !
        call meshgen('3x3x3_unit',nodes,connectivity)


        !
        ! Initialize domain
        !
        spacedim = 3
        nterms_s = 8
        nterms_c = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'DualLinearAdvection')


        !
        ! Initialize solution storage
        !
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%initialize_solution_solver()


    end subroutine
    

    subroutine tearDown(this)
        class(test_eq_duallinearadvection),    intent(inout)   :: this

        !
        ! Close ChiDG
        !
        call this%chidg%close()


    end subroutine


    !--------------------------
    ! PARAMETER CONSTRUCTORS
    !--------------------------
    
    ! Function for setting the correct parameter value in the constructor
    function newBlock(iblk) result(param)
        type(blockParam)        :: param
        integer(ik), intent(in) :: iblk
        
        param%iblk = iblk
    end function newBlock
    
    ! TestCase constructor for parameter specification
    function newTest(param)
        type(test_eq_duallinearadvection) :: newTest
        type(blockParam)                    :: param
        
        newTest%iblk = param%iblk
    end function newTest

    ! ToString - not sure what this is for yet
    function toString(this) result(string)
        class(blockParam), intent(in)   :: this
        character(:), allocatable       :: string
        character(len=3)                :: str
         
        write(str,'(i0)') this%iblk
        string = str
    end function toString



!------------------------------------------------------------------------------------------
!                                        TESTS
!------------------------------------------------------------------------------------------

! Test Volume Flux jacobian calclation against exact solution
@Test(cases = [1, 2, 3, 4, 5, 6, 7])
    subroutine test_DLA_jacobian_volume_advective_flux_exact(self)
        class(test_eq_duallinearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        real(rk)            :: blk_exact(8,8)
        integer(ik) :: ielem, iblk, irow
        real(rk)    :: tol
        
        tol = 1.0e-6_rk
        
        ielem = 14
        
        !
        ! Block Parameter from cases = []
        !
        iblk = self%iblk

        
        !
        ! Compute Automatic and Finite Difference jacobians
        !
        call check_jacobian_volume_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)



        

        if ( iblk == 7 ) then
            blk_exact      = ZERO ! zero all components
            blk_exact(4,1) = EIGHT
            blk_exact(5,2) = 2.6666666666666_rk
            blk_exact(6,3) = 2.6666666666666_rk
            blk_exact(8,7) = 0.8888888888888_rk



            ! Test volume jacobian for each equation
            @assertEqual(-blk_exact, blk_dnad%mat(1:8,1:8), tol)   
            @assertEqual(-blk_exact, blk_dnad%mat(9:16,9:16), tol)


        else
            blk_exact = ZERO
            @assertEqual(blk_exact, blk_dnad%mat(1:8,1:8), tol)
            @assertEqual(blk_exact, blk_dnad%mat(9:16,9:16), tol)
        end if

    

    end subroutine























end module rtest_duallinearadvection_mod
