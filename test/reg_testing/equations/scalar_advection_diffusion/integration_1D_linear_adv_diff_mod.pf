!--------------------------------------------------------------------------------
!
!           Test a 1D linear advection-diffusion problem with a source term.
!
!   div( vec(c)*u - mu(u)*grad(u) ) = 0
!
!   Fluxes:
!       Advective Flux: F_a(u) = vec(c)*u
!       Diffusive Flux: F_d(u) = -mu*dudx
!
!
!   Boundary conditions are:
!       Dirichlet U(x=0) = 1
!       Dirichlet U(x=1) = 0
!
!   Analytical Solution is:
!       numerator   = 1 - exp( (x-1) * cx/mu )
!       denominator = 1 - exp(-cx/mu)
!
!       U(x) = numerator/denominator    for x in [0,1]
!
!
!
!   Tests that are being run here:
!       - Run the calculation on multiple grids with order of accuracy 2-5
!       - Test for convergence in 1 Newton iteration (linear problem)
!       - Test convergence rates for spatial orders of accuracy
!
!--------------------------------------------------------------------------------
module integration_1D_linear_adv_diff_mod
#include <messenger.h>
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, THREE, IO_DESTINATION, ONE, TWO, PI, FOUR
    use type_chidg,         only: chidg_t
    use type_chidg_data,    only: chidg_data_t
    use mod_bc,             only: create_bc
    use type_function,      only: function_t
    use type_ivector,       only: ivector_t
    use mod_function,       only: create_function
    use mod_grid_operators, only: initialize_variable
    use mod_interpolate,    only: interpolate_element_standard

    use mod_chidg_mpi,      only: IRANK, NRANK, ChiDG_COMM
    use mpi_f08,            only: MPI_COMM, MPI_REAL8, MPI_SUM
    use mod_io


    ! Imports for defining a new operator
    use mod_operators,          only: operator_factory
    use type_operator,          only: operator_t
    use type_chidg_worker,      only: chidg_worker_t
    use type_properties,        only: properties_t
    use DNAD_D

    ! Imports for defining a new equation builder
    use mod_equations,                  only: equation_builder_factory
    use type_equation_builder,          only: equation_builder_t
    use type_equation_set,              only: equation_set_t
    use type_scalar,                    only: scalar_t
    implicit none


    ! Store the nonlinear convergence for each test case. This is used 
    ! to test the nonlinear convergence between a case running on
    ! a different number of procs.
    !
    ! Procs: 1, 2, 3
    !
    type(ivector_t) :: nsteps_convergence(3,2,3)            ! nprocs, ngrids, norders
    type(ivector_t) :: nsteps_convergence_chimera(3,2,3)    ! nprocs, ngrids, norders
    real(rk)        :: error(3,2,3)                         ! nprocs, ngrids, norders
    real(rk)        :: error_chimera(3,2,3)                 ! nprocs, ngrids, norders

    public  :: linear_advection_diffusion_1D



    real(rk), parameter :: cx = ONE
    real(rk), parameter :: cy = ZERO
    real(rk), parameter :: cz = ZERO
    real(rk), parameter :: mu = 0.05_rk



    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/21/2016
    !!
    !!
    !------------------------------------------------------------------------------
    type, extends(scalar_t) :: test_1D_advection_diffusion_model_t

    contains

        procedure   :: compute_mu
        procedure   :: compute_cx
        procedure   :: compute_cy
        procedure   :: compute_cz

    end type test_1D_advection_diffusion_model_t
    !******************************************************************************




    !>  A new equation set builder to build a linear diffusion equation set with the 
    !!  new custom volume source.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/19/2016
    !!
    !-----------------------------------------------------------------------------------------------------
    type, extends(equation_builder_t), public :: test_1D_linear_advection_diffusion_builder_t


    contains

        procedure   :: init => init_builder
        procedure   :: build

    end type test_1D_linear_advection_diffusion_builder_t
    !******************************************************************************************************









    !>  This parameter initialize the state for each test
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestParameter
    type, extends(MpiTestParameter) :: case_grid_order
        character(100)  :: gridfile
        integer(ik)     :: order
    contains
        procedure   :: toString
    end type case_grid_order
    !*******************************************************************************







    !>  Main testing fixture with test components that get initialized for each test
    !!
    !!  @author Nathan A. Wukie 
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MpiTestCase) :: linear_advection_diffusion_1D
        character(100)  :: gridfile
        integer(ik)     :: order

        type(chidg_t)   :: chidg
        type(mpi_comm)  :: ChiDG_COMM
    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type linear_advection_diffusion_1D
    !*******************************************************************************



    !> Simple container to hold arbitrary length file names. That way, we can have
    !! an array of filenames that get looped through.
    !!
    !-------------------------------------------------------------------------------
    type :: string
        character(len=:), allocatable   :: str
    end type
    !*******************************************************************************






contains


    !-------------------------------------------------------------------------------
    !                      Scalar equation model for cx,cy,cz,mu
    !-------------------------------------------------------------------------------



    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/21/2016
    !!
    !!
    !-------------------------------------------------------------------------------
    impure elemental function compute_mu(self,u) result(val)
        class(test_1D_advection_diffusion_model_t), intent(in)  :: self
        type(AD_D),                                 intent(in)  :: u

        type(AD_D) :: val

        ! Allocate vals
        val =u

        ! Set to constant
        val = mu

    end function compute_mu
    !*******************************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/21/2016
    !!
    !!
    !-------------------------------------------------------------------------------
    impure elemental function compute_cx(self,u,dudx,dudy,dudz) result(val)
        class(test_1D_advection_diffusion_model_t), intent(in)  :: self
        type(AD_D),                                 intent(in)  :: u
        type(AD_D),         intent(in), optional    :: dudx
        type(AD_D),         intent(in), optional    :: dudy
        type(AD_D),         intent(in), optional    :: dudz



        type(AD_D)  :: val

        ! Allocate vals
        val =u

        ! Set to constant
        val = cx

    end function compute_cx
    !*******************************************************************************





    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/21/2016
    !!
    !!
    !-------------------------------------------------------------------------------
    impure elemental function compute_cy(self,u,dudx,dudy,dudz) result(val)
        class(test_1D_advection_diffusion_model_t), intent(in)  :: self
        type(AD_D),                                 intent(in)  :: u
        type(AD_D),         intent(in), optional    :: dudx
        type(AD_D),         intent(in), optional    :: dudy
        type(AD_D),         intent(in), optional    :: dudz

        type(AD_D) :: val

        ! Allocate vals
        val =u

        ! Set to constant
        val = cy

    end function compute_cy
    !*******************************************************************************






    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/21/2016
    !!
    !!
    !-------------------------------------------------------------------------------
    impure elemental function compute_cz(self,u,dudx,dudy,dudz) result(val)
        class(test_1D_advection_diffusion_model_t), intent(in)  :: self
        type(AD_D),                                 intent(in)  :: u
        type(AD_D),         intent(in), optional    :: dudx
        type(AD_D),         intent(in), optional    :: dudy
        type(AD_D),         intent(in), optional    :: dudz

        type(AD_D)  :: val

        ! Allocate vals
        val =u

        ! Set to constant
        val = cz

    end function compute_cz
    !*******************************************************************************







    
    !-------------------------------------------------------------------------------
    !                           Builder Methods for new equation set
    !-------------------------------------------------------------------------------


    !>  Initialize the new linear diffusion builder.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   8/30/2016
    !!
    !---------------------------------------------------------------------------------------------
    subroutine init_builder(self)
        class(test_1D_linear_advection_diffusion_builder_t),   intent(inout)  :: self

        call self%set_name('Test 1D Linear Advection Diffusion')

    end subroutine init_builder
    !*********************************************************************************************

    



    !>  Implement the linear diffusion builder definition.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/19/2016
    !!
    !-------------------------------------------------------------------------------------------------------
    function build(self,blueprint) result(linear_advection_diffusion_eqn)
        class(test_1D_linear_advection_diffusion_builder_t),    intent(in)  :: self
        character(len=*),                                       intent(in)  :: blueprint

        type(equation_set_t)                        :: linear_advection_diffusion_eqn
        type(test_1D_advection_diffusion_model_t)   :: scalar_model
        

        !
        ! Set equationset name.
        !
        call linear_advection_diffusion_eqn%set_name("Test 1D Linear Advection Diffusion")


        !
        ! Add spatial operators
        !
        call linear_advection_diffusion_eqn%add_operator("Scalar Advection Boundary Average Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Advection LaxFriedrichs Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Advection Volume Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Advection BC Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Diffusion Boundary Average Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Diffusion Volume Operator")
        call linear_advection_diffusion_eqn%add_operator("Scalar Diffusion BC Operator")

        !
        ! Add model for 'compute_mu' scalar coefficient
        !
        call linear_advection_diffusion_eqn%prop%add_scalar(scalar_model)


    end function build
    !*********************************************************************************************************










    !-------------------------------------------------------------------------------
    !                               Test methods
    !-------------------------------------------------------------------------------



    !> Parameter constructors
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function newTest(test_parameter) result(test)
        type(case_grid_order),  intent(in)          :: test_parameter
        type(linear_advection_diffusion_1D)    :: test

        test%gridfile    = test_parameter%gridfile
        test%order       = test_parameter%order

    end function newTest
    !******************************************************************************


    !> Parameter initialization
    !!
    !!
    !!
    !------------------------------------------------------------------------------
    function getParameters() result(params)
        type(case_grid_order), allocatable :: params(:)
    
        type(string),       allocatable :: files(:)
        integer(ik),        allocatable :: orders(:)
        integer(ik) :: icase


        files = [ string('1D_linear_advection_diffusion_60x1x1.h5'), &
                  string('1D_linear_advection_diffusion_60x1x1.h5'), &
                  string('1D_linear_advection_diffusion_60x1x1.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1.h5'), &
                  string('1D_linear_advection_diffusion_60x1x1_chimera.h5'), &
                  string('1D_linear_advection_diffusion_60x1x1_chimera.h5'), &
                  string('1D_linear_advection_diffusion_60x1x1_chimera.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1_chimera.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1_chimera.h5'), &
                  string('1D_linear_advection_diffusion_120x1x1_chimera.h5')  &
                  ]


        orders = [ 2, &
                   3, &
                   4, &
                   2, &
                   3, &
                   4, &
                   2, &
                   3, &
                   4, &
                   2, &
                   3, &
                   4  &
                   ]


        !Initialize the test case container with the parameter
        allocate(params(size(files)))
        do icase = 1,size(files)
            params(icase)%gridfile    = files(icase)%str
            params(icase)%order       = orders(icase)
        end do

    end function getParameters
    !*******************************************************************************************



    !>  Reporting the parameters of the test
    !!
    !!
    !-------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class (case_grid_order),    intent(in)  :: this
        character(:), allocatable   :: string

        character(len=200) :: buffer

        write(buffer,'( "(gridfile, order)=","(", A30,",", I2, ")" )') this%gridfile, this%order
        string = trim(buffer)

    end function toString
    !********************************************************************************************







    !>  Set up test routine.
    !!
    !!  This routine reads the grid file, sets up boundary conditions, initializes storage
    !!  and sets the appropriate configuration options.
    !!  This routine also gets the numer of processors and the correct MPI communicator for 
    !!  the test.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !--------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(linear_advection_diffusion_1D),  intent(inout)   :: this

        class(function_t),  allocatable :: fcn

        
        type(test_1D_linear_advection_diffusion_builder_t)  :: builder_test_linear_advection_diffusion



        !-------------------------------------------------------------------------------
        !
        !                 Initialize and register equation set builder
        !
        !-------------------------------------------------------------------------------
        call builder_test_linear_advection_diffusion%init()
        call equation_builder_factory%register(builder_test_linear_advection_diffusion)






        !------------------------------------------------------------------------------
        !
        ! Define input data here that is normally read through the namelist input file
        !
        ! As a result, we don't call chidg%init('io')
        !
        !------------------------------------------------------------------------------
        basis            = 'legendre'
        spacedim         = 3
        nterms_s         = this%order**THREE
        gq_rule          = 1
        time_scheme      = 'steady'
        nonlinear_solver = 'newton'
        linear_solver    = 'fgmres'
        preconditioner   = 'ILU0'
        IO_DESTINATION   = 'file'
        !------------------------------------------------------------------------------

        !
        ! Get MPI communicator information from pFUnit
        !
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()



        ! Set timescheme options to pass during initialization
        call toptions%set('dt', 0.1_rk) ! means nothing here
        call toptions%set('nsteps',100)
        call toptions%set('nwrite',0)

        ! Set linear solver options to pass during initialization
        call loptions%set('tol',1.e-14_rk)

        ! Set nonlinear solver options
        call noptions%set('tol',5.e-10_rk)
        call noptions%set('cfl0',1.0_rk)
        call noptions%set('nsteps',100)



        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env',this%ChiDG_COMM)


        !
        ! Read grid
        !
        call this%chidg%read_grid(this%gridfile,spacedim)
        call this%chidg%read_boundaryconditions(this%gridfile)



        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%init('chimera')
        call this%chidg%initialize_solution_solver()


        !
        ! Set ChiDG components
        !
        call this%chidg%set('time_scheme',      time_scheme,      toptions)
        call this%chidg%set('nonlinear_solver', nonlinear_solver, noptions)
        call this%chidg%set('linear_solver',    linear_solver,    loptions)
        call this%chidg%set('preconditioner',   preconditioner)


        !
        ! Initialize solution
        !
        call create_function(fcn,'constant')

        call fcn%set_option('val',0.1_rk)
        call initialize_variable(this%chidg%data,1,fcn) ! u


        !
        ! Wrap-up initialization activities
        !
        call this%chidg%init('finalize')

    end subroutine SetUp
    !******************************************************************************************************



    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(linear_advection_diffusion_1D),  intent(inout)   :: this

        ! Close ChiDG
        call this%chidg%close('core')

    end subroutine tearDown
    !******************************************************************************************************










    !>  Run the simulation.
    !!
    !!      - compute the entropy error, test against the reference values.
    !!      - store the nonlinear convergence to the module variable so it can 
    !!        be used by a test for nonlinear convergence.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !!
    !-------------------------------------------------------------------------------------------------------
    @Test(npes=[1,2,3])
    subroutine run_calculations(self)
        class(linear_advection_diffusion_1D),  intent(inout)   :: self

        real(rk)    :: computed_error
        integer(ik) :: npes_index, grid_index, order_index


        npes_index  = get_npes_index(NRANK)
        grid_index  = get_grid_index(self%gridfile)
        order_index = get_order_index(self%order)


        !
        ! Run ChiDG simulation
        !
        call self%chidg%run()


        !
        ! Store the number of nonlinear iterations that the solution converged in. Problem is linear
        ! so it should converge in 1 Newton Step. Really, just the solution of 1 linear system of equations.
        !
        if (grid_index <= 2 ) then
            nsteps_convergence(npes_index,grid_index,order_index) = self%chidg%nonlinear_solver%newton_iterations           !conforming grids
        else
            nsteps_convergence_chimera(npes_index,grid_index-2,order_index) = self%chidg%nonlinear_solver%newton_iterations !chimera grids
        end if


        !
        ! Compute error
        !
        computed_error = compute_1D_linear_advection_diffusion_error(self%chidg%data,self%ChiDG_COMM)


        !
        ! Store the computed error for the current case
        !
        if (grid_index <= 2 ) then
            error(npes_index,grid_index,order_index) = computed_error   ! conforming grids
        else
            error_chimera(npes_index,grid_index-2,order_index) = computed_error ! chimera grids
        end if


    end subroutine run_calculations
    !*******************************************************************************************************








    !>  Access the stored number of steps convergence data(module global variable) and confirm
    !!  that all simulations converged in 1 step.
    !!
    !!  This assumes that the 'run_calculations' routine has already been executed for all cases
    !!  and numbers of processors to that the 'nsteps_convergence' variable has been populated.
    !!  So, we are relying on pFUnit to do things in order here. Works now, but I don't think
    !!  there is a guaruntee that this can't change.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_conv_conform(self)
        class(linear_advection_diffusion_1D),  intent(inout)   :: self

        integer(ik)             :: inpes, igrid, iorder, nsteps

        do inpes = 1,3
            do igrid = 1,2
                do iorder = 1,3

                    ! Test that the current convergence for the processor count matches the serial convergence
                    nsteps = nsteps_convergence(inpes,igrid,iorder)%size()

                    @assertEqual(1, nsteps)

                end do
            end do
        end do


    end subroutine test_conv_conform
    !*******************************************************************************************************





    !>  Access the stored number of steps convergence data(module global variable) and confirm
    !!  that all simulations converged in 1 step.
    !!
    !!  This assumes that the 'run_calculations' routine has already been executed for all cases
    !!  and numbers of processors to that the 'nsteps_convergence' variable has been populated.
    !!  So, we are relying on pFUnit to do things in order here. Works now, but I don't think
    !!  there is a guaruntee that this can't change.
    !!
    !!  @author Nathan A. Wukie
    !!  @author Nathan A. Wukie (AFRL)
    !!
    !-------------------------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_conv_chimera(self)
        class(linear_advection_diffusion_1D),  intent(inout)   :: self

        integer(ik)             :: inpes, igrid, iorder, nsteps

        do inpes = 1,3
            do igrid = 1,2
                do iorder = 1,3

                    ! Test that the current convergence for the processor count matches the serial convergence
                    nsteps = nsteps_convergence_chimera(inpes,igrid,iorder)%size()

                    @assertEqual(1, nsteps)

                end do
            end do
        end do

    end subroutine test_conv_chimera
    !*******************************************************************************************************









    !>
    !!
    !!
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_conforming(self)
        class(linear_advection_diffusion_1D),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk


        do inpes = 1,3
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1,3

                    error_previous = error(inpes,igrid-1,iorder)
                    error_current  = error(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid  ,iorder)

                    
                    !
                    ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                    !
                    convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))

                
                    @assertGreaterThan(convergence_rate, real(iorder+1,rk)-tol)

                end do
            end do
        end do


    end subroutine test_err_conforming
    !*******************************************************************************************************




    !>
    !!
    !!
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------------------
    @Test(npes=[1])
    subroutine test_err_chimera(self)
        class(linear_advection_diffusion_1D),  intent(inout)   :: self

        integer(ik) :: inpes, igrid, iorder
        real(rk)    :: error_previous, error_current, mesh_parameter_previous, mesh_parameter_current, convergence_rate, tol

        tol = 0.1_rk

        do inpes = 1,3
            do igrid = 2,2  ! Start at the second grid because we need the previous grid in order to compute a rate 
                do iorder = 1,3

                    error_previous = error_chimera(inpes,igrid-1,iorder)
                    error_current  = error_chimera(inpes,igrid  ,iorder)

                    mesh_parameter_previous = mesh_parameter(igrid-1 + 2,iorder)
                    mesh_parameter_current  = mesh_parameter(igrid   + 2,iorder)

                    
                    !
                    ! Compute convergence rate of spatial operators. log10(error)/log10(mesh spacing)
                    !
                    convergence_rate = (log10(error_previous)-log10(error_current))/(log10(mesh_parameter_previous)-log10(mesh_parameter_current))

                
                    @assertGreaterThan(convergence_rate, real(iorder+1,rk)-tol)

                end do
            end do
        end do


    end subroutine test_err_chimera
    !*******************************************************************************************************






    !>  Function to compute the error in the 1D scalar diffusion equation.
    !!
    !!  The error is computed as the L2-Norm of the difference in the analytical and
    !!  numerical solutions integrated over the domain.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !------------------------------------------------------------------------------------
    function compute_1D_linear_advection_diffusion_error(data,ChiDG_COMM) result(error)
        type(chidg_data_t), intent(inout)   :: data
        type(mpi_comm),     intent(in)      :: ChiDG_COMM

        real(rk), allocatable, dimension(:) :: &
            u_dg, u_analytical, x_gq, gq_error_squared


        integer(ik) :: iu
        integer(ik) :: ielem, idom, ierr
        real(rk)    :: error_squared_sum, error_squared_sum_reduced, element_error_squared, error


        associate (mesh => data%mesh, sdata => data%sdata, eqnset => data%eqnset, prop => data%eqnset(1)%prop)



            !
            ! Get equation indices
            !
            iu = prop%get_equation_index("u")

            !
            ! Zero error accumulator
            !
            error_squared_sum = ZERO

            !
            ! Loop over elements and accumulate error
            !
            do idom = 1,data%ndomains()
                do ielem = 1,data%mesh(idom)%nelem


                    !
                    ! Compute the analytical solution at the quadrature nodes
                    !
                    x_gq = mesh(idom)%elems(ielem)%quad_pts(:)%c1_
                    u_analytical = (ONE - exp((x_gq-ONE)*(cx/mu))) / (ONE - exp(-cx/mu))


                    !
                    ! Interpolate DG numerical solution
                    !
                    u_dg = interpolate_element_standard(mesh,sdata%q,idom,ielem,iu,'value')



                    !
                    ! Compute error at GQ nodes
                    !                    
                    gq_error_squared = (u_analytical - u_dg)**TWO


                    !
                    ! Integrate error
                    !
                    element_error_squared = sum(gq_error_squared * mesh(idom)%elems(ielem)%jinv * mesh(idom)%elems(ielem)%gq%vol%weights)


                    !
                    ! Accumulate error from each element
                    !
                    error_squared_sum = error_squared_sum + element_error_squared


                end do ! ielem
            end do ! idom


        end associate



        ! Reduce the total error across processors
        call MPI_AllReduce(error_squared_sum,error_squared_sum_reduced,1,MPI_REAL8,MPI_SUM,ChiDG_COMM,ierr)

        ! Sqrt of the reduced error
        error = sqrt(error_squared_sum_reduced)

    end function compute_1D_linear_advection_diffusion_error
    !**********************************************************************************************















    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   9/16/2016
    !!
    !!
    !!
    !-----------------------------------------------------------------------------
    function mesh_parameter(igrid,iorder) result(param)
        integer(ik),    intent(in)  :: igrid
        integer(ik),    intent(in)  :: iorder

        integer(ik) :: nelem, nterms_1d
        real(rk)    :: param

        select case (igrid)
            case(1,3)
                nelem = 60
            case(2,4)
                nelem = 120
            case default
                call chidg_signal(FATAL,"integration_1D_linear_diffusion_mod%mesh_parameter: invalid igrid")
        end select


        select case (iorder)
            case(1) ! iorder = 1  =>  order = 2
                nterms_1d = (iorder+1)
            case(2)
                nterms_1d = (iorder+1)
            case(3)
                nterms_1d = (iorder+1)
            case default
                call chidg_signal(FATAL,"integration_1D_linear_diffusion_mod%mesh_parameter: invalid iorder")
        end select


        param = ONE/(real(nelem,rk)*real(nterms_1d,rk))

    end function mesh_parameter
    !******************************************************************************











    ! Utility for returning the index associated with a certain number of procs
    !------------------------------------------------------------------------------
    function get_npes_index(numproc) result(inpes)
        integer(ik), intent(in) :: numproc

        integer(ik) :: inpes

        select case (numproc)
            case(1)
                inpes = 1
            case(2)
                inpes = 2
            case(3)
                inpes = 3
        end select

    end function get_npes_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain grid file
    !------------------------------------------------------------------------------
    function get_grid_index(grid) result(igrid)
        character(len=*), intent(in)    :: grid

        integer(ik) :: igrid

        select case (trim(grid))
            case('1D_linear_advection_diffusion_60x1x1.h5')
                igrid = 1
            case('1D_linear_advection_diffusion_120x1x1.h5')
                igrid = 2
            case('1D_linear_advection_diffusion_60x1x1_chimera.h5')
                igrid = 3
            case('1D_linear_advection_diffusion_120x1x1_chimera.h5')
                igrid = 4
        end select

    end function get_grid_index
    !******************************************************************************



    ! Utility for returning the index associated with a certain order of accuracy
    !------------------------------------------------------------------------------
    function get_order_index(order) result(iorder)
        integer(ik), intent(in) :: order

        integer(ik) :: iorder

        select case (order)
            case(2)
                iorder = 1
            case(3)
                iorder = 2
            case(4)
                iorder = 3
        end select

    end function get_order_index
    !******************************************************************************






end module integration_1D_linear_adv_diff_mod
