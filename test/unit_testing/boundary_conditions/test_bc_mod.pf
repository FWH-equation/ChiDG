module test_bc_mod
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                              XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                              IO_DESTINATION
    use type_chidg,     only: chidg_t
    use type_point,     only: point_t
    use mod_testutils,  only: meshgen
    use mock_bc,        only: bc_m
    implicit none

    public  :: test_bc

@TestCase
    type, extends(TestCase) ::  test_bc

        type(chidg_t)          :: chidg

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_bc


contains
    !-----------------------------------------------------------------------------------------------
    ! NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    ! procedure. The argument names have to match
    !-----------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_bc),    intent(inout)   :: this
        
        integer(ik), parameter     :: npt = 27
        type(point_t), allocatable :: pts(:,:,:)
        integer(ik)                :: nterms_c, nterms_s, idomain

        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'
        

        !
        ! Initialize chidg environment
        !
        call this%chidg%start_up('core')
        

        !
        ! Generate points for a 2x2x2 element mesh
        !
        call meshgen('222',pts)
        

        !
        ! Call domain initialization
        !
        idomain  = 1
        nterms_c = 8
        nterms_s = 8

        call this%chidg%data%add_domain('D_01',pts,nterms_c,'scalar',nterms_c)

    end subroutine
    
    subroutine tearDown(this)
        class(test_bc),    intent(inout)   :: this
    end subroutine


    !-----------------------------------------------------------------------------------------------
    !                                       TESTS
    !-----------------------------------------------------------------------------------------------
    

    ! Test boundary condition storage was allocated
    !-----------------------------------------------------
    @Test
    subroutine test_bc_allocated(self)
        class(test_bc),    intent(inout)   :: self

        type(bc_m)  :: bc
        integer(ik) :: iface
        
        associate (mesh => self%chidg%data%mesh(1), sdata => self%chidg%data%sdata)
            
            ! Block face for the boundary condition to be applied
            iface = XI_MIN
            
            ! Call boundary condition initialization. We are testing that the boundary condition data was allocated
            call bc%init(mesh,iface)
            
            @assertTrue(allocated(bc%ielems))
            @assertTrue(allocated(bc%ifaces))
            
        end associate
    end subroutine
    
    
    
    
    
    ! Test boundary condition storage includes the correct elements
    !-----------------------------------------------------
    @Test
    subroutine test_bc_ielems(self)
        class(test_bc),    intent(inout)   :: self

        type(bc_m)  :: bc
        integer(ik) :: iface
        integer(ik) :: ielems_ref(4)
        
        associate (mesh => self%chidg%data%mesh(1), sdata => self%chidg%data%sdata)
        
            
            ! Block face for the boundary condition to be applied
            iface = XI_MIN
            
            ! Call boundary condition initialization. We are testing that the boundary condition data was allocated
            call bc%init(mesh,iface)
            ielems_ref = [1,3,5,7]
            
            @assertEqual(ielems_ref,bc%ielems)
        
        end associate
    end subroutine






    ! Test boundary condition storage includes the correct faces
    !-----------------------------------------------------
    @Test
    subroutine test_bc_ifaces(self)
        class(test_bc),    intent(inout)   :: self

        type(bc_m)  :: bc
        integer(ik) :: iface
        integer(ik) :: ifaces_ref(4)
        
        associate (mesh => self%chidg%data%mesh(1), sdata => self%chidg%data%sdata)
        
            
            ! Block face for the boundary condition to be applied
            iface = XI_MIN
            
            ! Call boundary condition initialization. We are testing that the boundary condition data was allocated
            call bc%init(mesh,iface)
            ifaces_ref = [XI_MIN, XI_MIN, XI_MIN, XI_MIN]
            
            @assertEqual(ifaces_ref,bc%ifaces)
        
        end associate
    end subroutine





end module test_bc_mod
