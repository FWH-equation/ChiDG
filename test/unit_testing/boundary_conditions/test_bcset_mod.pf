module test_bcset_mod
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                              XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,     only: chidg_t
    use type_point,     only: point_t
    use mod_testutils,  only: meshgen
    use type_bcset,     only: bcset_t
    use mock_bc,        only: bc_m
    implicit none

    public  :: test_bcset

@TestCase
    type, extends(TestCase) ::  test_bcset
        type(chidg_t)          :: chidg
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_bcset


contains
!-----------------------------------------------------------------------------------------------
    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_bcset),    intent(inout)   :: this
        
        integer(ik), parameter     :: npt = 27
        type(point_t), allocatable :: pts(:,:,:)
        integer(ik)                :: nterms_c, nterms_s
        
        ! Initialize chidg environment
        call this%chidg%start_up('core')
        
        ! Generate points for a 2x2x2 element mesh
        call meshgen('222',pts)
        
        ! Call domain initialization
        nterms_c = 8
        nterms_s = 8

        !call this%chidg%data%add_domain('D_01',pts,nterms_c,'euler',nterms_c)
        call this%chidg%data%add_domain('D_01',pts,nterms_c,'scalar',nterms_c)

    end subroutine
    
    subroutine tearDown(this)
        class(test_bcset),    intent(inout)   :: this
    end subroutine



    !-----------------------------------------------------------------------------------------------
    !                                       TESTS
    !-----------------------------------------------------------------------------------------------
    

    ! Test bcset%add procedure for adding boundary conditions to a set. Test for allocation
    !-----------------------------------------------------
    @Test
    subroutine test_bcset_add_allocated(self)
        class(test_bcset),  intent(inout)   :: self
        
        type(bc_m)  :: bc

        associate(bcset => self%chidg%data%bcset(1))
    
            ! Add boundary condition to boundary condition set. This is what we are testing
            call bcset%add(bc)
    

            ! Test size of bcset%bcs. Should be '1'
            @assertEqual(1, size(bcset%bcs))

            ! 'bc' should be allocated
            @assertTrue( allocated(bcset%bcs(1)%bc))

        end associate

    end subroutine
    





    ! Test bcset%add procedure for adding boundary conditions to a set. 
    ! Test that data was added correctly to bcset for one boundary condition
    !-----------------------------------------------------
    @Test
    subroutine test_bcset_add_one_datacopy(self)
        class(test_bcset),  intent(inout)   :: self
        
        type(bc_m)  :: bc
        integer(ik) :: iface
        integer(ik) :: ielems_ref(4), ifaces_ref(4)

        iface = XI_MIN
        associate(bcset => self%chidg%data%bcset(1), mesh => self%chidg%data%mesh(1) )
        
            ! Initialize bc.
            call bc%init(mesh,iface)
            ielems_ref = [1,3,5,7]                      ! These elements should be associated with the boundary condition
            ifaces_ref = [XI_MIN,XI_MIN,XI_MIN,XI_MIN]  ! These faces should be associated with the boundary condition
        
    
            ! Add boundary condition to boundary condition set. This is what we are testing
            call bcset%add(bc)
    

            ! Test to make sure that the initialized boundary condition data was copied over to bcset correctly
            @assertEqual(ielems_ref,bcset%bcs(1)%bc%ielems)
            @assertEqual(ifaces_ref,bcset%bcs(1)%bc%ifaces)


        end associate

    end subroutine






    ! Test bcset%add procedure for adding boundary conditions to a set.
    ! Test that data was added correctly to bcset for two boundary conditions
    !-----------------------------------------------------
    @Test
    subroutine test_bcset_add_two_datacopy(self)
        class(test_bcset),  intent(inout)   :: self
        
        type(bc_m)  :: bc_a, bc_b
        integer(ik) :: iface_a, iface_b
        integer(ik), dimension(4) :: ielems_ref_a, ielems_ref_b, ifaces_ref_a, ifaces_ref_b

        iface_a = XI_MIN
        iface_b = ETA_MIN
        associate(bcset => self%chidg%data%bcset(1), mesh => self%chidg%data%mesh(1))
        
            ! Initialize two boundary conditions
            call bc_a%init(mesh,iface_a)
            call bc_b%init(mesh,iface_b)
            ielems_ref_a = [1,3,5,7]                            ! These elements should be associated with the boundary condition A
            ielems_ref_b = [1,2,5,6]                            ! These elements should be associated with the boundary condition B
            ifaces_ref_a = [XI_MIN,XI_MIN,XI_MIN,XI_MIN]        ! These faces should be associated with the boundary condition A
            ifaces_ref_b = [ETA_MIN,ETA_MIN,ETA_MIN,ETA_MIN]    ! These faces should be associated with the boundary condition B
        
    
            ! Add boundary conditions to boundary condition set. We want to test expected behavior with more than one bc added
            call bcset%add(bc_a)
            call bcset%add(bc_b)
    

            ! Test to make sure that the initialized boundary condition data was copied over to bcset correctly
            @assertEqual(ielems_ref_a,bcset%bcs(1)%bc%ielems)
            @assertEqual(ifaces_ref_a,bcset%bcs(1)%bc%ifaces)
            
            @assertEqual(ielems_ref_b,bcset%bcs(2)%bc%ielems)
            @assertEqual(ifaces_ref_b,bcset%bcs(2)%bc%ifaces)


        end associate

    end subroutine











end module test_bcset_mod
