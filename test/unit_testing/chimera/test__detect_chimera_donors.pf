!>
!!
!!   Overlapping cubes. Each cube is 2x2x2 elements. Only one element of overlap
!!
!!    |--------|-|---------|
!!    |        | |         |
!!    |        | |         |
!!    |        | |         |
!!    |--------|-|---------|
!!
!!
!!
!-----------------------------------------------------------------------------------------------
@Test
subroutine test__detect_chimera_donors()
    use pfunit_mod
    use mod_kinds,      only: rk, ik
    use mod_constants,  only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                              INTERIOR, BOUNDARY, CHIMERA, IO_DESTINATION

    use type_chidg,     only: chidg_t
    use type_point,     only: point_t
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file

    use mod_chimera,    only: detect_chimera_faces, detect_chimera_donors
    implicit none


    type(chidg_t)                   :: chidg
    type(point_t)                   :: coord
    character(len=100)              :: filename = "D2E8M1_overlapping_matching.h5"
    real(rk)                        :: tol
    integer(ik)                     :: ndom, ChiID, ddomain, delement, ndonors, ngq
    integer(ik)                     :: ndonors_component, ndonors_size
    integer(ik)                     :: idom, ielem, igq, idonor, iface


    tol             = 1.e-13_rk
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG environment
    !
    call chidg%start_up('core')

    !
    ! Set accuracy for the solution expansion
    !
    call chidg%set('Solution Order', integer_input=2)

    !
    ! Create grid file
    !
    call create_mesh_file("D2 E8 M1 : Overlapping : Matching", filename)


    !
    ! Read 2-Domain overlapping grid
    !
    call chidg%read_mesh_grids(filename)
    call chidg%read_mesh_boundary_conditions(filename)



    call chidg%init('domains')
    call chidg%init('comm - interior')




    call detect_chimera_faces(chidg%data%mesh)
    !
    ! Detect Chimera donors. THIS IS BEING TESTED
    !
    call detect_chimera_donors(chidg%data%mesh)





    !
    ! Test Domain 1 - ChiID 1
    !
    idom  = 1
    ChiID = 1
    ndonors_component = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%ndonors()
    ndonors_size      = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%size()
    idonor   = 1
    ddomain  = 2
    delement = 1

    ielem    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_element_l
    iface    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_face
    ngq      = chiDG%data%mesh%domain(idom)%faces(ielem,iface)%gq%face%nnodes

    @assertEqual(1, ndonors_component)
    @assertEqual(1, ndonors_size)
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%at(1))
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_l%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_g%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_l%at(1))
    @assertEqual(ngq,      chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size())

    do igq = 1,chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size()
        coord = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%at(igq)
        @assertEqual(-0.6_rk, coord%c1_, tol)
    end do






    !
    ! Test Domain 1 - ChiID 2
    !
    idom  = 1
    ChiID = 2
    ndonors_component = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%ndonors()
    ndonors_size      = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%size()
    idonor   = 1
    ddomain  = 2
    delement = 3

    ielem    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_element_l
    iface    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_face
    ngq      = chiDG%data%mesh%domain(idom)%faces(ielem,iface)%gq%face%nnodes

    @assertEqual(1, ndonors_component)
    @assertEqual(1, ndonors_size)
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%at(1))
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_l%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_g%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_l%at(1))
    @assertEqual(ngq,      chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size())

    do igq = 1,chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size()
        coord = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%at(igq)
        @assertEqual(-0.6_rk, coord%c1_, tol)
    end do







    !
    ! Test Domain 2 - ChiID 1
    !
    idom  = 2
    ChiID = 1
    ndonors_component = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%ndonors()
    ndonors_size      = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%size()
    idonor   = 1
    ddomain  = 1
    delement = 2

    ielem    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_element_l
    iface    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_face
    ngq      = chiDG%data%mesh%domain(idom)%faces(ielem,iface)%gq%face%nnodes

    @assertEqual(1, ndonors_component)
    @assertEqual(1, ndonors_size)
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%at(1))
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_l%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_g%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_l%at(1))
    @assertEqual(ngq,      chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size())

    do igq = 1,chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size()
        coord = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%at(igq)
        @assertEqual(0.6_rk, coord%c1_, tol)
    end do







    !
    ! Test Domain 2 - ChiID 2
    !
    idom  = 2
    ChiID = 2
    ndonors_component = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%ndonors()
    ndonors_size      = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%size()
    idonor   = 1
    ddomain  = 1
    delement = 4

    ielem    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_element_l
    iface    = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%receiver_face
    ngq      = chiDG%data%mesh%domain(idom)%faces(ielem,iface)%gq%face%nnodes

    @assertEqual(1, ndonors_component)
    @assertEqual(1, ndonors_size)
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_g%at(1))
    @assertEqual(ddomain,  chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_l%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_g%at(1))
    @assertEqual(delement, chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_l%at(1))
    @assertEqual(ngq,      chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size())

    do igq = 1,chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%size()
        coord = chidg%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(idonor)%at(igq)
        @assertEqual(0.6_rk, coord%c1_, tol)
    end do




    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')


    ! Clean-up
    call delete_file(filename)


end subroutine test__detect_chimera_donors
!***********************************************************************************************
