@Test
subroutine test_find_gq_donor_cylinder_abutting()
#include <messenger.h>
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  IO_DESTINATION, ZERO

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use type_function,      only: function_t
    use type_point,         only: point_t
    use mod_bc,             only: create_bc


    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file
    use mod_function,       only: create_function
    implicit none


    type(chidg_t)                   :: chidgA
    type(meshdata_t),   allocatable :: meshdataA(:)
    class(function_t),  allocatable :: constant, gaussian
    real(rk),           allocatable :: density_residual_D4_E31(:), density_residual_D4_E36(:)
    integer(ik)                     :: idom, ielem, ChiID, idom_d, ielem_d, iface, ndonors, &
                                       gq_index, igq, ngq, spacedim
    real(rk)                        :: chi_xi, chi_eta, chi_zeta, ref_xi, ref_eta, ref_zeta
    type(point_t)                   :: chimera_node
    real(rk)                        :: tol
    character(1024)                 :: filename = "cylinder_chimera_matching.h5"


    tol            = 1.e-12_rk
    spacedim       = 3
    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidgA%start_up('core')


    !
    ! Generate cylinder mesh
    !
    call create_mesh_file("Cylinder : Diagonal : Matching",trim(filename))


    !
    ! Read grid
    !
    call chidgA%read_grid(trim(filename),spacedim)


    !
    ! Initialize solution data storage
    !
    call chidgA%set('Solution Order', integer_input=2)
    call chidgA%init('domains')
    call chidgA%init('communication')
    call chidgA%init('chimera')




    !
    ! Test computational coordinates
    !
    idom = 4
    ielem = 25
    iface = XI_MIN

    ChiID   = chidgA%data%mesh%domain(idom)%faces(ielem,iface)%ChiID
    idom_d  = chidgA%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_domain_l%at(1)
    ielem_d = chidgA%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_element_l%at(1)
    ngq     = chidgA%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_gq_indices(1)%size()

    do igq = 1,ngq

        gq_index = chidgA%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_gq_indices(1)%at(igq)
        chimera_node  = chidgA%data%mesh%domain(idom)%chimera%recv%data(ChiID)%donor_coords(1)%at(igq)
        chi_xi   = chimera_node%c1_
        chi_eta  = chimera_node%c2_
        chi_zeta = chimera_node%c3_

        ref_xi   = chidgA%data%mesh%domain(idom_d)%faces(ielem_d,XI_MAX)%gq%face%nodes(gq_index,XI_MAX)%c1_
        ref_eta  = chidgA%data%mesh%domain(idom_d)%faces(ielem_d,XI_MAX)%gq%face%nodes(gq_index,XI_MAX)%c2_
        ref_zeta = chidgA%data%mesh%domain(idom_d)%faces(ielem_d,XI_MAX)%gq%face%nodes(gq_index,XI_MAX)%c3_



        @assertEqual(ref_xi,chi_xi,tol)
        @assertEqual(ref_eta,chi_eta,tol)
        @assertEqual(ref_zeta,chi_zeta,tol)
        
    end do




    ! Close ChiDG
    call chidgA%shut_down('core')

    ! Clean-up test
    call delete_file(trim(filename))

end subroutine test_find_gq_donor_cylinder_abutting
