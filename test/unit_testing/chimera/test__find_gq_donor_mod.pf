!-------------------------------------------------------------------------------------------
!!
!!  @author Nathan A. Wukie
!!
!!  Initialize a single 2x2x2-element grid in a ChiDG instance. 
!!  Specify some random points inside the grid; test to make sure
!!  find_gq_donor is finding the correct elements.
!!
!!  elements (2x2x2) - linear
!!
!!          *-------*-------*                                  *-------*-------*
!!         /       /       /|                                 /       /    (3)/|
!!        *-------*-------* |   Pick some points inside      *-------*-------* |
!!       /       /       /| *   the grid((1),(2),(3)),      /       /       /| *
!!      *-------*-------* |/|   and call find_gq_donor     *-------*-------* |/|
!!      |       |       | * |                              |       |       | * |
!!      |       |       |/| *   Since we know the grid,    |       |    (2)|/| *
!!      *-------*-------* |/    and we know what points    *-------*-------* |/
!!      |       |       | *     we are picking, we can     |       |       | *
!!      |       |       |/      check to make sure the     |  (1)  |       |/
!!      *-------*-------*       correct elements were      *-------*-------*
!!                              found as donors.
!!
!*******************************************************************************************
module test__find_gq_donor_mod
    use pfunit_mod
    use mod_kinds,              only: rk, ik
    use mod_constants,          only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                      INTERIOR, BOUNDARY, CHIMERA, IO_DESTINATION

    use type_chidg,             only: chidg_t
    use type_meshdata,          only: meshdata_t
    use type_point,             only: point_t
    use type_element_info,      only: element_info_t
    use type_face_info,         only: face_info_t

    use mod_test_utilities,     only: create_mesh
    use mod_chimera,            only: find_gq_donor
    implicit none

    public  :: test_find_gq_donor




    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !----------------------------------------------------------------------------
    @TestParameter
    type, extends(AbstractTestParameter) :: node_donor_coord
        integer(ik)                 :: testNumber   ! Test index
        type(point_t)               :: gqnode       ! input
        type(element_info_t)        :: donor        ! expected output
        type(point_t)               :: donor_coord  ! expected output
    contains
        procedure   :: toString
    end type node_donor_coord
    !****************************************************************************








    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !----------------------------------------------------------------------------
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(ParameterizedTestCase) :: test_find_gq_donor
        type(chidg_t)   :: chidg

        type(point_t)           :: gqnode
        type(element_info_t)    :: donor
        type(point_t)           :: donor_coord
    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_find_gq_donor
    !*****************************************************************************













contains



    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_find_gq_donor),  intent(inout)   :: this

        type(meshdata_t)                :: meshdata
        integer(ik)                     :: nterms_c, spacedim, nelements_g, eqn_ID

        spacedim        = 3
        nterms_c        = 8
        IO_DESTINATION  = 'file'


        ! Initialize ChiDG environment
        call this%chidg%start_up('core')


        ! Create 2x2x2-element Grid
        call create_mesh('2x2x2',meshdata%points,meshdata%connectivity)
        nelements_g = 8


        ! Initialize equation set
        call this%chidg%data%add_equation_set('Scalar Advection')
        eqn_ID = this%chidg%data%get_equation_set_id('Scalar Advection')


        ! Add domain to ChiDG, initialize
        call this%chidg%data%mesh%add_domain('D_01',                 &
                                             meshdata%points,        &
                                             meshdata%connectivity,  &
                                             nelements_g,            &
                                             spacedim,               &
                                             nterms_c,               &
                                             'Cartesian',            &
                                             eqn_ID)

        call this%chidg%set('Solution Order', integer_input=2)
        call this%chidg%init('domains')
        call this%chidg%init('comm - interior')

    end subroutine setUp
    !**************************************************************************************



    !>
    !!
    !!
    !--------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_find_gq_donor),  intent(inout)   :: this

        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************





    !
    ! Parameter constructors
    !
    function newTest(testParameter) result(test)
        type(node_donor_coord), intent(in)  :: testParameter

        type(test_find_gq_donor)    :: test

        test%gqnode      = testParameter%gqnode
        test%donor       = testParameter%donor
        test%donor_coord = testParameter%donor_coord

    end function newTest



    !
    ! Parameter initialization
    !
    function getParameters() result(params)
        type(node_donor_coord), allocatable :: params(:)

        integer(ik), parameter      :: ntests = 5
        type(point_t)               :: gqnode(ntests)
        type(element_info_t)        :: donor(ntests)
        type(point_t)               :: donor_coords(ntests)


        ! Test 1
        call gqnode(1)%set(0.25_rk,0.25_rk,0.25_rk)
        donor(1)%idomain_g  = 1
        donor(1)%idomain_l  = 1
        donor(1)%ielement_g = 1
        donor(1)%ielement_l = 1
        call donor_coords(1)%set(0._rk,0._rk,0._rk)

        ! Test 2
        call gqnode(2)%set(.75_rk,0.25_rk,0.25_rk)
        donor(2)%idomain_g  = 1
        donor(2)%idomain_l  = 1
        donor(2)%ielement_g = 2
        donor(2)%ielement_l = 2
        call donor_coords(2)%set(0._rk,0._rk,0._rk)

        ! Test 3
        call gqnode(3)%set(.75_rk,.75_rk,.75_rk)
        donor(3)%idomain_g  = 1
        donor(3)%idomain_l  = 1
        donor(3)%ielement_g = 8
        donor(3)%ielement_l = 8
        call donor_coords(3)%set(0._rk,0._rk,0._rk)

        ! Test 4
        call gqnode(4)%set(0.25_rk,0.25_rk,.75_rk)
        donor(4)%idomain_g  = 1
        donor(4)%idomain_l  = 1
        donor(4)%ielement_g = 5
        donor(4)%ielement_l = 5
        call donor_coords(4)%set(0._rk,0._rk,0._rk)

        ! Test 5
        call gqnode(5)%set(0.375_rk, 0.375_rk, 0.375_rk)
        donor(5)%idomain_g  = 1
        donor(5)%idomain_l  = 1
        donor(5)%ielement_g = 1
        donor(5)%ielement_l = 1
        call donor_coords(5)%set(0.5_rk,0.5_rk,0.5_rk)





        ! node_donor_coord
        params = [ node_donor_coord(1,gqnode(1),donor(1),donor_coords(1)), &
                   node_donor_coord(2,gqnode(2),donor(2),donor_coords(2)), &
                   node_donor_coord(3,gqnode(3),donor(3),donor_coords(3)), &
                   node_donor_coord(4,gqnode(4),donor(4),donor_coords(4)), &
                   node_donor_coord(5,gqnode(5),donor(5),donor_coords(5))  &
                   ]



    end function getParameters
    !**********************************************************************************************




    !>
    !! Reporting in the case of a failed test
    !!
    !----------------------------------------------------------------------------------------------
    function toString(this) result(string)
        class(node_donor_coord),    intent(in)  :: this
        character(:),   allocatable :: string
        character(len=200) :: buffer

        write(buffer,'( "(testNumber)=", I2 )') this%testNumber

        string = trim(buffer)
    end function toString
    !**********************************************************************************************






    !>  For a given gqnode, try to find a donor using 'find_gq_donor'
    !!
    !!  Test:
    !!      - correct donor element was found
    !!      - correct location in the donor-local coordinates was computed (xi,eta,zeta)
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------------
    @Test
    subroutine test__find_gq_donor__point(self)
        class(test_find_gq_donor),  intent(inout)   :: self

        type(point_t)           :: gq_node, donor_coord
        type(element_info_t)    :: donor
        type(face_info_t)       :: receiver


        receiver%idomain_g  = 0
        receiver%idomain_l  = 0
        receiver%ielement_g = 0
        receiver%ielement_l = 0
        receiver%iface      = 0


        !
        ! Given some point, find a donor element in the grid. THIS IS BEING TESTED
        !
        call find_gq_donor(self%chidg%data%mesh,self%gqnode,receiver,donor,donor_coord)


        !
        ! Check that the correct donor element was found
        !
        @assertEqual(self%donor%idomain_g, donor%idomain_g)
        @assertEqual(self%donor%idomain_l, donor%idomain_l)
        @assertEqual(self%donor%ielement_g,donor%ielement_g)
        @assertEqual(self%donor%ielement_l,donor%ielement_l)


        !
        ! Check that the local coordinates in the donor element are correct
        !
        @assertEqual(self%donor_coord%c1_, donor_coord%c1_)
        @assertEqual(self%donor_coord%c2_, donor_coord%c2_)
        @assertEqual(self%donor_coord%c3_, donor_coord%c3_)


    end subroutine test__find_gq_donor__point
    !*************************************************************************************************






end module test__find_gq_donor_mod
