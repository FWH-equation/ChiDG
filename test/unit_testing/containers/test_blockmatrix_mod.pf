module test_blockmatrix_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, IO_DESTINATION
    use mod_grid_operators,         only: initialize_variable
    use mod_testutils,              only: meshgen
    use type_blockmatrix,           only: blockmatrix_t
    use DNAD_D
    use fcn_constant,               only: constant_f
    implicit none

    public  :: test_blockmatrix

    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_blockmatrix

        type(chidg_t)                        :: chidg
        type(blockmatrix_t)                  :: bmat
        type(constant_f)                     :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_blockmatrix
    !********************************************************************************************


contains

    !>
    !! NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!
    !-----------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_blockmatrix),    intent(inout)   :: this

        integer(ik)                                 :: nterms_c, nterms_s, ivar, ielem, iblk, spacedim
        type(point_t),  allocatable                 :: nodes(:)
        type(domain_connectivity_t)                 :: connectivity
        
        IO_DESTINATION = 'file' 

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')


        !
        ! Create 3x3x3 element grid
        !
        call meshgen('333',nodes,connectivity)


        !
        ! Initialize domains
        !
        nterms_c = 8
        nterms_s = 8
        spacedim = 3
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar Advection')
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')


        !
        ! Initialize blockmatrix
        !
        call this%bmat%init(this%chidg%data%mesh(1),mtype='full')

    
    end subroutine
    




    subroutine tearDown(this)
        class(test_blockmatrix),    intent(inout)   :: this
        
        !
        ! Close ChiDG interface
        !
        call this%chidg%close('core')
    end subroutine
    !*****************************************************************************************************



    !------------------------------------------------------------------------------------------------------
    !------------------------------------------------------------------------------------------------------
    !------------------------------------------------------------------------------------------------------



    !>  Test that number of rows equals number of elements
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------
    @Test
    subroutine test_blockmatrix__init_linearization__nrows(self)
        class(test_blockmatrix),    intent(inout)   :: self
        
        integer(ik)                 :: nelem

        nelem = self%chidg%data%mesh(1)%nelem
        @assertEqual(nelem,size(self%bmat%lblks,1))  

    end subroutine test_blockmatrix__init_linearization__nrows
    !************************************************************************************
    
    
    


    !>  Test that number of columns equals number of neighbor elems plus one(diag)
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------
    @Test
    subroutine test_blockmatrix__init_linearization__ncols(self)
        class(test_blockmatrix),    intent(inout)   :: self

        @assertEqual(7,size(self%bmat%lblks,2))  

        
    end subroutine test_blockmatrix__init_linearization__ncols
    !*************************************************************************************
    
    
    



    !>  Test that appropriate blocks are allocated. Test block dimensions
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------
    @Test
    subroutine test_blockmatrix__init_linearization__denseblocks(self)
        class(test_blockmatrix),    intent(inout)   :: self
        
        integer(ik) :: nelem, ielem, size1d
        
        associate ( mesh => self%chidg%data%mesh(1), lblks => self%bmat%lblks)
        
            
            nelem = mesh%nelem
            
            !
            ! Test appropriate blocks are allocated or not allocated for the first element            
            !
            ielem = 1
            @assertFalse(allocated(lblks(ielem,1)%mat))
            @assertTrue(allocated(lblks(ielem,2)%mat))
            @assertFalse(allocated(lblks(ielem,3)%mat))
            @assertTrue(allocated(lblks(ielem,4)%mat))
            @assertFalse(allocated(lblks(ielem,5)%mat))
            @assertTrue(allocated(lblks(ielem,6)%mat))
            @assertTrue(allocated(lblks(ielem,7)%mat))
            
            
            !
            ! Test first element, linearization block sizes
            !
            size1d = mesh%nterms_s  *  mesh%neqns
            @assertEqual(size1d,size(lblks(ielem,2)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,2)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,4)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,4)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,6)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,6)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,7)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,7)%mat,2))
            
            
            
            
            !
            ! Test appropriate blocks are allocated or not allocated for the middle element
            ! All linearization blocks should be initialized            
            !
            ielem = 14
            @assertTrue(allocated(lblks(ielem,1)%mat))
            @assertTrue(allocated(lblks(ielem,2)%mat))
            @assertTrue(allocated(lblks(ielem,3)%mat))
            @assertTrue(allocated(lblks(ielem,4)%mat))
            @assertTrue(allocated(lblks(ielem,5)%mat))
            @assertTrue(allocated(lblks(ielem,6)%mat))
            @assertTrue(allocated(lblks(ielem,7)%mat))
            
            
            !
            ! Test middle element, linearization block sizes
            !
            size1d = mesh%nterms_s  *  mesh%neqns
            
            @assertEqual(size1d,size(lblks(ielem,1)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,1)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,2)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,2)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,3)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,3)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,4)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,4)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,5)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,5)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,6)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,6)%mat,2))
            
            @assertEqual(size1d,size(lblks(ielem,7)%mat,1))
            @assertEqual(size1d,size(lblks(ielem,7)%mat,2))
            
    
    
        end associate   
    
    
    end subroutine test_blockmatrix__init_linearization__denseblocks
    !**********************************************************************************
    
    
    




    
    !>  Test STORE procedure for storing derivative information
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------
    @Test
    subroutine test_blockmatrix__store(self)
        class(test_blockmatrix),    intent(inout)   :: self
        
        type(AD_D)  :: integral(8)
        integer(ik) :: ielem, iblk, ivar, nderiv, i
        
        associate (bmat => self%bmat)
    
            ielem  = 14
            iblk   = 1
            ivar   = 1
            nderiv = 8
        
            !
            ! Initialize AD variables with allocated derivative arrays
            !
            do i = 1,8
                integral(i) = AD_D(nderiv)
            end do
        
            !
            ! Set the first and last element of each derivative array so they aren't just zeros
            !
            integral = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]

            integral(1)%xp_ad_(1) = ONE
            integral(1)%xp_ad_(8) = ONE
            
            integral(2)%xp_ad_(1) = TWO
            integral(2)%xp_ad_(8) = TWO
            
            integral(3)%xp_ad_(1) = THREE
            integral(3)%xp_ad_(8) = THREE
            
            integral(4)%xp_ad_(1) = FOUR
            integral(4)%xp_ad_(8) = FOUR
            
            integral(5)%xp_ad_(1) = FIVE
            integral(5)%xp_ad_(8) = FIVE
            
            integral(6)%xp_ad_(1) = SIX
            integral(6)%xp_ad_(8) = SIX
            
            integral(7)%xp_ad_(1) = SEVEN
            integral(7)%xp_ad_(8) = SEVEN
            
            integral(8)%xp_ad_(1) = EIGHT
            integral(8)%xp_ad_(8) = EIGHT
        
        
        
            !
            ! STORE integral data. THIS IS BEING TESTED
            !
            call bmat%store(integral,ielem,iblk,ivar)
        
        
        
            !
            ! Check that the derivatives were assigned to their correct locations in the block matrix.
            ! The xp_ad_ arrays should be stored as rows of the block matrix.
            !
            @assertEqual(integral(1)%xp_ad_, bmat%lblks(ielem,iblk)%mat(1,1:8) )
            @assertEqual(integral(2)%xp_ad_, bmat%lblks(ielem,iblk)%mat(2,1:8) )
            @assertEqual(integral(3)%xp_ad_, bmat%lblks(ielem,iblk)%mat(3,1:8) )
            @assertEqual(integral(4)%xp_ad_, bmat%lblks(ielem,iblk)%mat(4,1:8) )
            @assertEqual(integral(5)%xp_ad_, bmat%lblks(ielem,iblk)%mat(5,1:8) )
            @assertEqual(integral(6)%xp_ad_, bmat%lblks(ielem,iblk)%mat(6,1:8) )
            @assertEqual(integral(7)%xp_ad_, bmat%lblks(ielem,iblk)%mat(7,1:8) )
            @assertEqual(integral(8)%xp_ad_, bmat%lblks(ielem,iblk)%mat(8,1:8) )
                
                
        end associate
    
    
    end subroutine test_blockmatrix__store
    !********************************************************************************************
    
    
    
    
    
    


end module test_blockmatrix_mod
