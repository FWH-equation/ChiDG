@Test
subroutine test_blockvector_distribute()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ONE, TWO, THREE, FOUR
    use type_blockvector,   only: blockvector_t
    use mod_testutils,      only: meshgen
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t

    implicit none
    type(chidg_t)               :: chidg
    type(blockvector_t)         :: bvec
    type(point_t),  allocatable :: nodes(:)
    integer(ik),    allocatable :: connectivity(:,:)
    real(rk),       allocatable :: fullvec(:)
    integer(ik)                 :: idomain, nterms_c, nterms_s, spacedim



    !
    ! Initialize chidg environment
    !
    call chidg%init('env')



    !
    ! Generate points for a 2x2x1 mesh
    !
    call meshgen('221',nodes,connectivity)



    !
    ! Call domain initialization
    !
    idomain  = 1
    spacedim = 3
    nterms_c = 8
    nterms_s = 8
    call chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'scalar')
    call chidg%initialize_solution_domains(nterms_s)


    !
    ! Call initailization on blockvector
    !
    call bvec%init(chidg%data%mesh(1))



    allocate(fullvec(32))
    fullvec = 0._rk



    !
    ! Assign reference blocks to the blockvector matrix
    !
    fullvec(1:8)   = ONE
    fullvec(9:16)  = TWO
    fullvec(17:24) = THREE
    fullvec(25:32) = FOUR



    !
    !   THIS IS WHAT WE ARE TESTING
    !
    ! Call routine to build full-vector representation
    call bvec%distribute(fullvec)




    !
    ! Test full-vector values against expected reference values
    !
    @assertEqual(ONE,bvec%lvecs(1)%vec)
    @assertEqual(TWO,bvec%lvecs(2)%vec)
    @assertEqual(THREE,bvec%lvecs(3)%vec)
    @assertEqual(FOUR,bvec%lvecs(4)%vec)




    !
    ! Close ChiDG interface
    !
    call chidg%close()


end subroutine
