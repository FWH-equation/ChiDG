module test_blockvector_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, IO_DESTINATION
    use type_blockvector,           only: blockvector_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use DNAD_D
    use fcn_constant,               only: constant_f
    use mod_test_utilities,         only: create_mesh
    implicit none

    public  :: test_blockvector

    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !----------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_blockvector

        type(chidg_t)                        :: chidg
        type(blockvector_t)                  :: bvec
        type(constant_f)                     :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_blockvector
    !*****************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a 
    !! derived type procedure. The argument names have to match
    !!
    !-------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_blockvector),    intent(inout)   :: this

        integer(ik)                 :: nterms_c, ivar, spacedim, nelements_g, eqn_ID
        type(point_t),  allocatable :: nodes(:)
        type(domain_connectivity_t) :: connectivity
        
        IO_DESTINATION = 'file'
        
        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('core')


        !
        ! Generate points for 3x3x3 element mesh
        !
        call create_mesh('333',nodes,connectivity)


        !
        ! Add domain to ChiDG
        !
        spacedim    = 3
        nterms_c    = 8
        nelements_g = 27


        call this%chidg%data%add_equation_set('Scalar Advection')
        eqn_ID = this%chidg%data%get_equation_set_id('Scalar Advection')

        call this%chidg%data%mesh%add_domain('D_01',nodes,connectivity,nelements_g,spacedim,nterms_c,'Cartesian',eqn_ID)

        call this%chidg%set('Solution Order', integer_input=2)
        call this%chidg%init('domains')


        !
        ! Initialize blockvector
        !
        call this%bvec%init(this%chidg%data%mesh%domain(1))
    
    
    end subroutine setUp
    !*****************************************************************************************
    

    !>
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_blockvector),    intent(inout)   :: this
        
        ! Close ChiDG interface
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !*******************************************************************************************







    !>  Test that number of rows equals number of elements
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__init__nrows(self)
        class(test_blockvector),    intent(inout)   :: self
        
        integer(ik)                 :: nelem

        nelem = self%chidg%data%mesh%domain(1)%nelem
        @assertEqual(nelem,size(self%bvec%vecs,1))  

    end subroutine test_blockvector__init__nrows
    !**************************************************************************
    



    
    
    
    
    !>  Test that appropriate blocks are allocated. Test block dimensions
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__init__densevector_allocation(self)
        class(test_blockvector),    intent(inout)   :: self
        

        associate ( vecs => self%bvec%vecs )

            !
            ! Test densevector storage is allocated for each element
            !
            @assertTrue(allocated(vecs(1)%vec))
            @assertTrue(allocated(vecs(2)%vec))
            @assertTrue(allocated(vecs(3)%vec))
            @assertTrue(allocated(vecs(4)%vec))
            @assertTrue(allocated(vecs(5)%vec))
            @assertTrue(allocated(vecs(6)%vec))
            @assertTrue(allocated(vecs(7)%vec))
            @assertTrue(allocated(vecs(8)%vec))
            @assertTrue(allocated(vecs(9)%vec))
            @assertTrue(allocated(vecs(10)%vec))
            @assertTrue(allocated(vecs(11)%vec))
            @assertTrue(allocated(vecs(12)%vec))
            @assertTrue(allocated(vecs(13)%vec))
            @assertTrue(allocated(vecs(14)%vec))
            @assertTrue(allocated(vecs(15)%vec))
            @assertTrue(allocated(vecs(16)%vec))
            @assertTrue(allocated(vecs(17)%vec))
            @assertTrue(allocated(vecs(18)%vec))
            @assertTrue(allocated(vecs(19)%vec))
            @assertTrue(allocated(vecs(20)%vec))
            @assertTrue(allocated(vecs(21)%vec))
            @assertTrue(allocated(vecs(22)%vec))
            @assertTrue(allocated(vecs(23)%vec))
            @assertTrue(allocated(vecs(24)%vec))
            @assertTrue(allocated(vecs(25)%vec))
            @assertTrue(allocated(vecs(26)%vec))
            @assertTrue(allocated(vecs(27)%vec))
            
        end associate


    end subroutine test_blockvector__init__densevector_allocation
    !**************************************************************************








    !>  Test that densevector components of blockvector are all initialized with correct storage sizes
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__init__densevector_sizes(self)
        class(test_blockvector),    intent(inout)       :: self

        integer(ik) :: size1d


        associate ( domain => self%chidg%data%mesh%domain(1), vecs => self%bvec%vecs)


            !
            ! Test first element, linearization block sizes
            !
            size1d = domain%nterms_s  *  domain%neqns


            @assertEqual(size1d,size(vecs(1)%vec))
            @assertEqual(size1d,size(vecs(2)%vec))
            @assertEqual(size1d,size(vecs(3)%vec))
            @assertEqual(size1d,size(vecs(4)%vec))
            @assertEqual(size1d,size(vecs(5)%vec))
            @assertEqual(size1d,size(vecs(6)%vec))
            @assertEqual(size1d,size(vecs(7)%vec))
            @assertEqual(size1d,size(vecs(8)%vec))
            @assertEqual(size1d,size(vecs(9)%vec))
            @assertEqual(size1d,size(vecs(10)%vec))
            @assertEqual(size1d,size(vecs(11)%vec))
            @assertEqual(size1d,size(vecs(12)%vec))
            @assertEqual(size1d,size(vecs(13)%vec))
            @assertEqual(size1d,size(vecs(14)%vec))
            @assertEqual(size1d,size(vecs(15)%vec))
            @assertEqual(size1d,size(vecs(16)%vec))
            @assertEqual(size1d,size(vecs(17)%vec))
            @assertEqual(size1d,size(vecs(18)%vec))
            @assertEqual(size1d,size(vecs(19)%vec))
            @assertEqual(size1d,size(vecs(20)%vec))
            @assertEqual(size1d,size(vecs(21)%vec))
            @assertEqual(size1d,size(vecs(22)%vec))
            @assertEqual(size1d,size(vecs(23)%vec))
            @assertEqual(size1d,size(vecs(24)%vec))
            @assertEqual(size1d,size(vecs(25)%vec))
            @assertEqual(size1d,size(vecs(26)%vec))
            @assertEqual(size1d,size(vecs(27)%vec))
            
        end associate   
    
    
    end subroutine test_blockvector__init__densevector_sizes
    !**************************************************************************
    
    









    !>  Test blockvector%norm procedure
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !---------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__norm(self)
        class(test_blockvector),    intent(inout)   :: self

        integer(ik) :: ielem
        real(rk)    :: norm_ref, norm
        real(rk)    :: ref_vec(8)

        ! Zero values
        do ielem = 1,size(self%bvec%vecs)
            self%bvec%vecs(ielem)%vec = ZERO
        end do


        ! Initialize select values.
        ref_vec= [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
        self%bvec%vecs(1)%vec  = ref_vec   ! Element 1 Values
        self%bvec%vecs(27)%vec = ref_vec   ! Element 27 values


        ! Compute norm. THIS IS WHAT WE ARE TESTING
        norm = self%bvec%norm()


        norm_ref = sqrt( sum( ref_vec**TWO + ref_vec**TWO) )    ! Twice since two elements were set
        @assertEqual(norm_ref,norm)

    end subroutine test_blockvector__norm
    !***************************************************************************











    !>  Test blockvector%sumsqr procedure
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !---------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__sumsqr(self)
        class(test_blockvector),    intent(inout)   :: self

        integer(ik) :: ielem
        real(rk)    :: sumsqr_ref, sumsqr
        real(rk)    :: ref_vec(8)

        ! Zero values
        do ielem = 1,size(self%bvec%vecs)
            self%bvec%vecs(ielem)%vec = ZERO
        end do


        ! Initialize select values.
        ref_vec= [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
        self%bvec%vecs(1)%vec  = ref_vec   ! Element 1 Values
        self%bvec%vecs(27)%vec = ref_vec   ! Element 27 values


        ! Compute sumsqr. THIS IS WHAT WE ARE TESTING
        sumsqr = self%bvec%sumsqr()


        sumsqr_ref = sum( ref_vec**TWO + ref_vec**TWO)   ! Twice since two elements were set
        @assertEqual(sumsqr_ref,sumsqr)

    end subroutine test_blockvector__sumsqr
    !***************************************************************************


















    !>  Test blockvector%clear procedure
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !----------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__clear(self)
        class(test_blockvector),    intent(inout)   :: self

        integer(ik) :: ielem
        real(rk)    :: ref_vec(8)


        ref_vec = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]


        ! Initialize all componenets
        do ielem = 1,size(self%bvec%vecs)
            self%bvec%vecs(ielem)%vec = ref_vec
        end do



        ! Call blockvector%clear to ZERO vector storage. THIS IS BEING TESTED.
        call self%bvec%clear()


        do ielem = 1,size(self%bvec%vecs)
            @assertEqual(ZERO,self%bvec%vecs(ielem)%vec)
        end do 


    end subroutine test_blockvector__clear
    !****************************************************************************





    !>  Test blockvector%nentries procedure
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !----------------------------------------------------------------------------
    @Test
    subroutine test_blockvector__nentries(self)
        class(test_blockvector),    intent(inout)   :: self

        integer(ik) :: nentries_ref, nentries, nelems, nterms

        nelems = 27
        nterms = 8

        nentries_ref = nelems * nterms


        !
        ! Call blockvector%nentrios to return number of values store in the vector. THIS IS BEING TESTED.
        !
        nentries = self%bvec%nentries()

        @assertEqual(nentries_ref,nentries)

    end subroutine test_blockvector__nentries
    !*****************************************************************************






    


end module test_blockvector_mod
