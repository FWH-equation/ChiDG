module test_chidgVector_operators_mod
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, HALF, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, &
                                          IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_testutils,              only: meshgen

    use type_chidgVector

    implicit none

    public :: test_chidgVector


    @TestCase
    type, extends(TestCase) :: test_chidgVector
        type(chidg_t)       :: chidg

        type(chidgVector_t) :: vec_a
        type(chidgVector_t) :: vec_b

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_chidgVector


contains


    subroutine setUp(this)
        class(test_chidgVector),    intent(inout)   :: this

        type(point_t),  allocatable :: nodes(:)
        type(domain_connectivity_t) :: connectivity
        integer(ik)                 :: nterms_c, nterms_s, spacedim

        IO_DESTINATION = 'file'

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')


        !
        ! Generate points for 2x2x2 element mesh
        !
        call meshgen('222',nodes,connectivity)


        !
        ! Add domain to ChiDG
        !
        spacedim = 3
        nterms_c = 8
        nterms_s = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar')
        call this%chidg%initialize_solution_domains(nterms_s)


        !
        ! Initialize solution data containers
        !
        call this%vec_a%init(this%chidg%data%mesh)
        call this%vec_b%init(this%chidg%data%mesh)



        !
        ! Set vector values
        !
        this%vec_a%dom(1)%lvecs(1)%vec = ONE
        this%vec_a%dom(1)%lvecs(2)%vec = TWO
        this%vec_a%dom(1)%lvecs(3)%vec = THREE
        this%vec_a%dom(1)%lvecs(4)%vec = FOUR
        this%vec_a%dom(1)%lvecs(5)%vec = FIVE
        this%vec_a%dom(1)%lvecs(6)%vec = SIX
        this%vec_a%dom(1)%lvecs(7)%vec = SEVEN
        this%vec_a%dom(1)%lvecs(8)%vec = EIGHT


        this%vec_b%dom(1)%lvecs(1)%vec = ONE
        this%vec_b%dom(1)%lvecs(2)%vec = TWO
        this%vec_b%dom(1)%lvecs(3)%vec = THREE
        this%vec_b%dom(1)%lvecs(4)%vec = FOUR
        this%vec_b%dom(1)%lvecs(5)%vec = FIVE
        this%vec_b%dom(1)%lvecs(6)%vec = SIX
        this%vec_b%dom(1)%lvecs(7)%vec = SEVEN
        this%vec_b%dom(1)%lvecs(8)%vec = EIGHT


    end subroutine



    subroutine tearDown(this)
        class(test_chidgVector),    intent(inout)   :: this

        !
        ! Close ChiDG interface
        !
        call this%chidg%close('core')
    end subroutine





    @Test
    subroutine test_chidgVector__add(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = self%vec_a + self%vec_b

        @assertEqual(TWO, res%dom(1)%lvecs(1)%vec)
        @assertEqual(FOUR, res%dom(1)%lvecs(2)%vec)
        @assertEqual(SIX, res%dom(1)%lvecs(3)%vec)
        @assertEqual(EIGHT, res%dom(1)%lvecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%lvecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%lvecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%lvecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%lvecs(8)%vec)

    end subroutine
    



    @Test
    subroutine test_chidgVector__sub(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = self%vec_a - self%vec_b

        @assertEqual(ZERO, res%dom(1)%lvecs(1)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(2)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(3)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(4)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(5)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(6)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(7)%vec)
        @assertEqual(ZERO, res%dom(1)%lvecs(8)%vec)

    end subroutine
    



    @Test
    subroutine test_chidgVector__mult_rv(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = 2._rk * self%vec_b

        @assertEqual(TWO, res%dom(1)%lvecs(1)%vec)
        @assertEqual(FOUR, res%dom(1)%lvecs(2)%vec)
        @assertEqual(SIX, res%dom(1)%lvecs(3)%vec)
        @assertEqual(EIGHT, res%dom(1)%lvecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%lvecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%lvecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%lvecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%lvecs(8)%vec)

    end subroutine
    






    @Test
    subroutine test_chidgVector__mult_vr(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = self%vec_b * 2._rk

        @assertEqual(TWO, res%dom(1)%lvecs(1)%vec)
        @assertEqual(FOUR, res%dom(1)%lvecs(2)%vec)
        @assertEqual(SIX, res%dom(1)%lvecs(3)%vec)
        @assertEqual(EIGHT, res%dom(1)%lvecs(4)%vec)
        @assertEqual(10._rk, res%dom(1)%lvecs(5)%vec)
        @assertEqual(12._rk, res%dom(1)%lvecs(6)%vec)
        @assertEqual(14._rk, res%dom(1)%lvecs(7)%vec)
        @assertEqual(16._rk, res%dom(1)%lvecs(8)%vec)

    end subroutine






    @Test
    subroutine test_chidgVector__div_rv(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = 2._rk / self%vec_b

        @assertEqual(TWO, res%dom(1)%lvecs(1)%vec)
        @assertEqual(ONE, res%dom(1)%lvecs(2)%vec)
        @assertEqual(2._rk/3._rk, res%dom(1)%lvecs(3)%vec)
        @assertEqual(2._rk/4._rk, res%dom(1)%lvecs(4)%vec)
        @assertEqual(2._rk/5._rk, res%dom(1)%lvecs(5)%vec)
        @assertEqual(2._rk/6._rk, res%dom(1)%lvecs(6)%vec)
        @assertEqual(2._rk/7._rk, res%dom(1)%lvecs(7)%vec)
        @assertEqual(2._rk/8._rk, res%dom(1)%lvecs(8)%vec)

    end subroutine



    @Test
    subroutine test_chidgVector__div_vr(self)
        class(test_chidgVector),    intent(inout)   :: self

        type(chidgVector_t) :: res
        

        res = self%vec_b / 2._rk

        @assertEqual(HALF, res%dom(1)%lvecs(1)%vec)
        @assertEqual(ONE, res%dom(1)%lvecs(2)%vec)
        @assertEqual(1.5_rk, res%dom(1)%lvecs(3)%vec)
        @assertEqual(TWO, res%dom(1)%lvecs(4)%vec)
        @assertEqual(2.5_rk, res%dom(1)%lvecs(5)%vec)
        @assertEqual(THREE, res%dom(1)%lvecs(6)%vec)
        @assertEqual(3.5_rk, res%dom(1)%lvecs(7)%vec)
        @assertEqual(FOUR, res%dom(1)%lvecs(8)%vec)

    end subroutine











end module test_chidgVector_operators_mod
