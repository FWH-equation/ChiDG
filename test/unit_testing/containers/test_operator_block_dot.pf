@Test
subroutine test_operator_block_dot()
    use pfunit_mod

    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, &
                                          IO_DESTINATION
    use type_blockvector,           only: blockvector_t
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_test_utilities,         only: create_mesh

    use operator_block_dot
    implicit none


    type(chidg_t)               :: chidg
    type(point_t),  allocatable :: nodes(:)
    type(domain_connectivity_t) :: connectivity
    type(blockvector_t)         :: a, b

    real(rk)                    :: tol
    integer(ik)                 :: nterms_c, nterms_s, idomain, spacedim
    real(rk),   dimension(8)    :: vec_a1, vec_a2, vec_a3, vec_b1, vec_b2, vec_b3
    real(rk)                    :: dot_ref, dot_test


    tol         = 1.e-13_rk
    idomain     = 1
    spacedim    = 3
    nterms_c    = 8
    nterms_s    = 8

    IO_DESTINATION = 'file'


    ! Initialize ChiDG
    call chidg%init('env')


    ! Get grid points
    call create_mesh('311',nodes,connectivity)

    
    ! Initialize domain
    call chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar Advection')
    call chidg%initialize_solution_domains(nterms_s)
    call chidg%init('communication')



    !
    ! Initialize data containers
    !
    call a%init(chidg%data%mesh(1))
    call b%init(chidg%data%mesh(1))


    !
    ! Initialize blockvector data (a)
    !
    vec_a1 = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
    vec_a2 = [TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE]
    vec_a3 = [THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE, TWO]

    a%vecs(1)%vec = vec_a1
    a%vecs(2)%vec = vec_a2
    a%vecs(3)%vec = vec_a3


    !
    ! Initialize blockvector data (b)
    !
    vec_b1 = [THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE, TWO]
    vec_b2 = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
    vec_b3 = [TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE]

    b%vecs(1)%vec = vec_b1
    b%vecs(2)%vec = vec_b2
    b%vecs(3)%vec = vec_b3



    !
    ! Compute reference dot product
    !    
    dot_ref = dot_product(vec_a1,vec_b1) + dot_product(vec_a2,vec_b2) + dot_product(vec_a3,vec_b3)


    !
    ! Compute dot product implementation. THIS IS BEING TESTED
    !
    dot_test = block_dot(a,b)



    @assertEqual(dot_ref,dot_test,tol)







    !
    ! Close ChiDG interface
    !
    call chidg%close('core')


end subroutine test_operator_block_dot


