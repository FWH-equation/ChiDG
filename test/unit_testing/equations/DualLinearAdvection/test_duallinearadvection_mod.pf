module test_duallinearadvection_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                          NFACES, IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_function,              only: function_t
    use mod_function,               only: create_function
    use type_point,                 only: point_t
    use type_densematrix,           only: densematrix_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_test_utilities,         only: create_mesh
    use mod_check_jacobian
    implicit none

    public  :: test_eq_duallinearadvection




    !> This parameter is used to test the linearization for different blocks.
    !! iblk = [XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG]
    !!
    !!
    !---------------------------------------------------------------------------------
    @TestParameter(constructor=newBlock)
    type, extends (AbstractTestParameter) :: blockParam

        integer(ik)         :: iblk

    contains

        procedure :: toString

    end type blockParam
    !*********************************************************************************
    



    
    
    !>
    !!
    !!
    !!
    !!
    !---------------------------------------------------------------------------------
    @TestCase(constructor=newTest)
    type, extends(ParameterizedTestCase) ::  test_eq_duallinearadvection

        type(chidg_t)       :: chidg
        integer(ik)         :: iblk

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_eq_duallinearadvection
    !**********************************************************************************





contains

    !>  Set up test case.
    !!
    !!  NOTE: make sure to use 'this' instead of 'self' since these are over-writting 
    !!  a derived type procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !----------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_eq_duallinearadvection),    intent(inout)   :: this
        
        integer(ik),        parameter       :: npt = 64
        type(point_t),      allocatable     :: nodes(:)
        type(domain_connectivity_t)         :: connectivity
        class(function_t),  allocatable     :: fcn
        integer(ik)                         :: neqns, nterms_c, idomain, spacedim
        real(rk), dimension(npt)            :: x,y,z
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'


        !
        ! Initialize chidg environment
        !
        call this%chidg%start_up('core')

        
        !
        ! Generate points array for 3x3x3 mesh
        !
        call create_mesh('3x3x3_unit',nodes,connectivity)


        !
        ! Initialize domain
        !
        idomain  = 1
        spacedim = 3
        nterms_c = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'DualLinearAdvection')

        call this%chidg%set('Solution Order', integer_input=2)
        call this%chidg%init('domains')
        call this%chidg%init('communication')
        call this%chidg%init('solvers')


        !
        ! Initialize fields
        !
        call create_function(fcn,'gaussian')
        
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,1)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,fcn,2)
            
    end subroutine setUp
    !******************************************************************************************
    
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_eq_duallinearadvection),    intent(inout)   :: this


        ! Close ChiDG interface
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !******************************************************************************************



    !--------------------------
    ! PARAMETER CONSTRUCTORS
    !--------------------------
    
    !------------------------------------------------------------------------------------------
    ! Function for setting the correct parameter value in the constructor
    function newBlock(iblk) result(param)
        type(blockParam)        :: param
        integer(ik), intent(in) :: iblk
        
        param%iblk = iblk
    end function newBlock
    
    ! TestCase constructor for parameter specification
    function newTest(param)
        type(test_eq_duallinearadvection) :: newTest
        type(blockParam)                    :: param
        
        newTest%iblk = param%iblk
    end function newTest

    ! ToString
    function toString(this) result(string)
        class(blockParam), intent(in)   :: this
        character(:), allocatable       :: string
        character(len=3)                :: str
         
        write(str,'(i0)') this%iblk
        string = str
    end function toString
    !******************************************************************************************



    !------------------------------------------------------------------------------------------
    !                                        TESTS
    !------------------------------------------------------------------------------------------
    ! Test Volume Flux jacobian calclation
    @Test(cases = [1, 2, 3, 4, 5, 6, 7])
    subroutine test_DLA_jacobian_volume_advective_flux_FD(self)
        class(test_eq_duallinearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        real(rk)            :: blk_exact(8,8)
        integer(ik) :: ielem, iblk, irow
        real(rk)    :: tol
        
        tol = 1.0e-5_rk
        
        ielem = 14
        
        ! Block Parameter from cases = []
        iblk = self%iblk
        

        ! Compute Automatic and Finite Difference jacobians
        call check_jacobian_volume_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)

        
        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        


    end subroutine test_DLA_jacobian_volume_advective_flux_FD
    !******************************************************************************************
    
    







    !>  Test Boundary Average Flux jacobian calculation
    !!
    !!  @author Nathan A. Wukie
    !!
    !------------------------------------------------------------------------------------------
    @Test(cases = [1, 2, 3, 4, 5, 6, 7])
    subroutine test_DLA_jacobian_boundary_advective_flux_FD(self)
        class(test_eq_duallinearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, iface, ivar, iblk, irow
        real(rk)    :: tol
        
        tol = 1.0e-5_rk
        
        ielem = 14
        
        ! Block Parameter from cases = []
        iblk = self%iblk
        

        ! Compute Automatic and Finite Difference jacobians
        call check_jacobian_boundary_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)


        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
    end subroutine test_DLA_jacobian_boundary_advective_flux_FD
    !*****************************************************************************************
    
    
    
    
    




end module test_duallinearadvection_mod
