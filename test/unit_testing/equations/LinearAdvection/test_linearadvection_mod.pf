module test_linearadvection_mod
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, NFACES, &
                                  IO_DESTINATION

    use type_chidg,         only: chidg_t
    use type_point,         only: point_t
    use type_function,      only: function_t
    use mod_function,       only: create_function
    use type_densematrix,   only: densematrix_t
    use mod_testutils,      only: meshgen
    use mod_hdfio,            only: read_grid_hdf
    use mod_check_jacobian
    use mod_grid_operators, only: initialize_variable
    implicit none

    public  :: test_eq_LA




    ! This parameter is used to test the linearization for different blocks.
    ! iblk = [XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG]
    @TestParameter(constructor=newBlock)
    type, extends (AbstractTestParameter) :: blockParam

        integer(ik)         :: iblk

    contains
        procedure :: toString
    end type blockParam
    
    



    
    @TestCase(constructor=newTest)
    type, extends(ParameterizedTestCase) ::  test_eq_LA
        type(chidg_t)       :: chidg
        integer(ik)         :: iblk
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_eq_LA








contains
    !----------------------------------------------------------------------------------------------
    !                                    SET-UP  +  TEAR-DOWN
    !----------------------------------------------------------------------------------------------
    ! NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    ! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_eq_LA),    intent(inout)   :: this
        
        integer(ik), parameter      :: npt = 64
        type(point_t),  allocatable :: nodes(:)
        integer(ik),    allocatable :: connectivity(:,:)
        integer(ik)                 :: neqns, nterms_s, nterms_c, spacedim
        real(rk), dimension(npt)    :: x,y,z
        class(function_t), allocatable  :: fcn

        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'
        

        !
        ! Initialize chidg environment
        !
        call this%chidg%init('env')


        !
        ! Generate points array for 3x3x3 mesh
        !
        call meshgen('3x3x3_unit',nodes,connectivity)


        !
        ! Initialize domain
        !
        spacedim = 3
        nterms_s = 8
        nterms_c = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'linearadvection')
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%initialize_solution_solver()


        call create_function(fcn,'constant')
        call fcn%set_option('val',1.0_rk)
        call initialize_variable(this%chidg%data,1,fcn)

    end subroutine
    
    subroutine tearDown(this)
        class(test_eq_LA),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%close()
    end subroutine


    !--------------------------
    ! PARAMETER CONSTRUCTORS
    !--------------------------
    
    ! Function for setting the correct parameter value in the constructor
    function newBlock(iblk) result(param)
        type(blockParam)        :: param
        integer(ik), intent(in) :: iblk
        
        param%iblk = iblk
    end function newBlock
    
    ! TestCase constructor for parameter specification
    function newTest(param)
        type(test_eq_LA) :: newTest
        type(blockParam)                    :: param
        
        newTest%iblk = param%iblk
    end function newTest
 
    ! ToString
    function toString(this) result(string)
        class(blockParam), intent(in)   :: this
        character(:), allocatable       :: string
        character(len=3)                :: str
         
        write(str,'(i0)') this%iblk
        string = str
    end function toString
 


!------------------------------------------------------------------------------------------
!                                        TESTS
!------------------------------------------------------------------------------------------
! Test Volume Flux jacobian calclation
@Test(cases = [1, 2, 3, 4, 5, 6, 7])
    subroutine test_LA_jacobian_volume_advective_flux(self)
        class(test_eq_LA),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, ivar, iblk, irow
        real(rk)    :: tol
        
        tol = 1.0e-5_rk
        
        ielem = 14
        
        ! Block Parameter from cases = []
        iblk = self%iblk
        
        ! Compute Automatic and Finite Difference jacobians
        call check_jacobian_volume_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)
        

        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
    end subroutine
    
    
    
     


!> Test Boundary Average Flux jacobian calclation
@Test(cases = [1, 2, 3, 4, 5, 6, 7])
    subroutine test_LA_jacobian_boundary_advective_flux(self)
        class(test_eq_LA),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, iface, ivar, iblk, irow
        real(rk)    :: tol
        
        tol = 1.0e-5_rk
        
        ielem = 14
        iface = 1
        ivar  = 1
        
        ! Block Parameter from cases = []
        iblk = self%iblk
        
        ! Compute Automatic and Finite Difference jacobians
        call check_jacobian_boundary_advective_flux(self%chidg%data,ielem,iblk,blk_dnad,blk_fd)
        
        
        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
    end subroutine
    
    
    
    
    
    
    
    

end module test_linearadvection_mod
