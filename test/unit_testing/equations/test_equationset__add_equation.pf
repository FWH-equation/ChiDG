!
! Test 'add_equation' routine. Add single equation, test number of equations, name, and index
!
@Test
subroutine test_equationset__add_equation__one()
    use pfunit_mod
    
    use mock_equation_set,  only: mock_equation_set_t


    type(mock_equation_set_t)   :: meq

    !
    ! Add one equation. THIS IS BEING TESTED.
    !
    call meq%add_primary_field("a")




    ! Test number of equations
    @assertEqual(1,size(meq%prop%primary_fields))

    ! Test equation name
    @assertEqual("a",meq%prop%primary_fields(1)%name)

    ! Test equation index
    @assertEqual(1,meq%prop%primary_fields(1)%ind)

end subroutine





!
! Test 'add_equation' routine. Add two equations. Test number of equations, names, and indices
!
@Test
subroutine test_equationset__add_equation__two()
    use pfunit_mod
    
    use mock_equation_set, only: mock_equation_set_t


    type(mock_equation_set_t)  :: meq

    !
    ! Add two equations. THIS IS BEING TESTED.
    !
    call meq%add_primary_field("a")
    call meq%add_primary_field("b")

    ! Test number of equations
    @assertEqual(2,size(meq%prop%primary_fields))

    ! Test equation name
    @assertEqual("a",meq%prop%primary_fields(1)%name)
    @assertEqual("b",meq%prop%primary_fields(2)%name)

    ! Test equation index
    @assertEqual(1,meq%prop%primary_fields(1)%ind)
    @assertEqual(2,meq%prop%primary_fields(2)%ind)

end subroutine





