!
! Test 'add_volume_advective_flux'. Add single volume advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_volume_advective_operator__one()
    use pfunit_mod
    
    use mock_equation_set,              only: mock_equation_set_t
    use SA_volume_advective_operator,   only: SA_volume_advective_operator_t


    type(mock_equation_set_t)           :: meq

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    call meq%add_operator('Scalar Advection Volume Operator')



    ! Test number of flux components
    @assertEqual(1,size(meq%volume_advective_operator))



    ! Test flux type
    select type (component_flux => meq%volume_advective_operator(1)%op)
        type is (SA_volume_advective_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)


end subroutine test_equationset__add_volume_advective_operator__one







!
! Test 'add_volume_advective_flux'. Add two volume advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_volume_advective_operator__two()
    use pfunit_mod
    
    use mock_equation_set,              only: mock_equation_set_t
    use SA_volume_advective_operator,   only: SA_volume_advective_operator_t


    type(mock_equation_set_t)          :: meq

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    call meq%add_operator('Scalar Advection Volume Operator')
    call meq%add_operator('Scalar Advection Volume Operator')



    ! Test number of flux components
    @assertEqual(2,size(meq%volume_advective_operator))



    ! Test first type
    select type (component_flux => meq%volume_advective_operator(1)%op)
        type is (SA_volume_advective_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



    ! Test second type
    select type (component_flux => meq%volume_advective_operator(2)%op)
        type is (SA_volume_advective_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)

end subroutine test_equationset__add_volume_advective_operator__two









!
! Test 'add_boundary_advective_flux'. Add one boundary advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_boundary_advective_operator__one()
    use pfunit_mod
    
    use mock_equation_set,                      only: mock_equation_set_t
    use SA_boundary_average_advective_operator, only: SA_boundary_average_advective_operator_t


    type(mock_equation_set_t)                  :: meq

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    call meq%add_operator("Scalar Advection Boundary Average Operator")



    ! Test number of flux components
    @assertEqual(1,size(meq%boundary_advective_operator))



    ! Test first type
    select type (component_flux => meq%boundary_advective_operator(1)%op)
        type is (SA_boundary_average_advective_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)

end subroutine test_equationset__add_boundary_advective_operator__one





!
! Test 'add_boundary_advective_flux'. Add one boundary advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_boundary_advective_operator__two()
    use pfunit_mod
    
    use mock_equation_set,                      only: mock_equation_set_t
    use SA_boundary_average_advective_operator, only: SA_boundary_average_advective_operator_t
    use SA_LaxFriedrichs_operator,              only: SA_LaxFriedrichs_operator_t


    type(mock_equation_set_t)                  :: meq

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    call meq%add_operator("Scalar Advection Boundary Average Operator")
    call meq%add_operator("Scalar Advection LaxFriedrichs Operator")


    ! Test number of flux components
    @assertEqual(2,size(meq%boundary_advective_operator))



    ! Test first type
    select type (component_flux => meq%boundary_advective_operator(1)%op)
        type is (SA_boundary_average_advective_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



    ! Test second type
    select type (component_flux => meq%boundary_advective_operator(2)%op)
        type is (SA_LaxFriedrichs_operator_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



end subroutine test_equationset__add_boundary_advective_operator__two

