!
! Test 'add_volume_advective_flux'. Add single volume advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_volume_advective_operator__one()
    use pfunit_mod
    
    use mock_equation_set,          only: mock_equation_set_t
    use LA_volume_advective_flux,  only: LA_volume_advective_flux_t
!    use LA_properties,             only: LA_properties_t


    type(mock_equation_set_t)           :: meq
!    type(LA_properties_t)              :: LA_prop
!    type(LA_volume_advective_flux_t)   :: flux

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    !call meq%add_volume_advective_flux(flux)
    call meq%add_operator('LA Volume Flux')



    ! Test number of flux components
    @assertEqual(1,size(meq%volume_advective_operator))



    ! Test flux type
    select type (component_flux => meq%volume_advective_operator(1)%op)
        type is (LA_volume_advective_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)


end subroutine test_equationset__add_volume_advective_operator__one







!
! Test 'add_volume_advective_flux'. Add two volume advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_volume_advective_operator__two()
    use pfunit_mod
    
    use mock_equation_set,         only: mock_equation_set_t
    use LA_volume_advective_flux,  only: LA_volume_advective_flux_t
!    use LA_properties,             only: LA_properties_t


    type(mock_equation_set_t)          :: meq
!    type(LA_properties_t)              :: LA_prop
!    type(LA_volume_advective_flux_t)   :: flux_a
!    type(LA_volume_advective_flux_t)   :: flux_b

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
!    call meq%add_volume_advective_flux(flux_a)
!    call meq%add_volume_advective_flux(flux_b)
    call meq%add_operator('LA Volume Flux')
    call meq%add_operator('LA Volume Flux')



    ! Test number of flux components
    @assertEqual(2,size(meq%volume_advective_operator))



    ! Test first type
    select type (component_flux => meq%volume_advective_operator(1)%op)
        type is (LA_volume_advective_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



    ! Test second type
    select type (component_flux => meq%volume_advective_operator(2)%op)
        type is (LA_volume_advective_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)

end subroutine test_equationset__add_volume_advective_operator__two









!
! Test 'add_boundary_advective_flux'. Add one boundary advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_boundary_advective_operator__one()
    use pfunit_mod
    
    use mock_equation_set,                     only: mock_equation_set_t
    use LA_boundary_average_advective_flux,    only: LA_boundary_average_advective_flux_t


    type(mock_equation_set_t)                  :: meq
!    type(LA_boundary_average_advective_flux_t) :: average_flux

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
    !call meq%add_boundary_advective_flux(average_flux)
    call meq%add_operator("LA Boundary Average Flux")



    ! Test number of flux components
    @assertEqual(1,size(meq%boundary_advective_operator))



    ! Test first type
    select type (component_flux => meq%boundary_advective_operator(1)%op)
        type is (LA_boundary_average_advective_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)

end subroutine test_equationset__add_boundary_advective_operator__one





!
! Test 'add_boundary_advective_flux'. Add one boundary advective flux. 
! Test number of flux components. Test flux type.
!
@Test
subroutine test_equationset__add_boundary_advective_operator__two()
    use pfunit_mod
    
    use mock_equation_set,                     only: mock_equation_set_t
    use LA_boundary_average_advective_flux,    only: LA_boundary_average_advective_flux_t
    use LA_LaxFriedrichs_flux,                 only: LA_LaxFriedrichs_flux_t


    type(mock_equation_set_t)                  :: meq
!    type(LA_boundary_average_advective_flux_t) :: average_flux
!    type(LA_LaxFriedrichs_flux_t)              :: upwind_flux

    logical :: correct_type = .false.


    !
    ! Add one volume advective flux component. THIS IS BEING TESTED.
    !
!    call meq%add_boundary_advective_flux(average_flux)
!    call meq%add_boundary_advective_flux(upwind_flux)

    call meq%add_operator("LA Boundary Average Flux")
    call meq%add_operator("LA LaxFriedrichs Flux")


    ! Test number of flux components
    @assertEqual(2,size(meq%boundary_advective_operator))



    ! Test first type
    select type (component_flux => meq%boundary_advective_operator(1)%op)
        type is (LA_boundary_average_advective_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



    ! Test second type
    select type (component_flux => meq%boundary_advective_operator(2)%op)
        type is (LA_LaxFriedrichs_flux_t)
            correct_type = .true. 
        class default
            correct_type = .false.
    end select
    @assertTrue(correct_type)



end subroutine test_equationset__add_boundary_advective_operator__two

