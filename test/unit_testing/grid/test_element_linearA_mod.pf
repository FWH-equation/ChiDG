module test_element_linearA_mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_element,               only: element_t
    use type_face,                  only: face_t
    use type_element_connectivity,  only: element_connectivity_t
    use mod_io,                     only: gq_rule
    implicit none

    public  :: test_element_linearA


    @TestCase
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------
    type, extends(TestCase) ::  test_element_linearA
        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t),   allocatable :: faces(:)
        type(point_t),  allocatable :: nodes(:)
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_element_linearA
    !***************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !--------------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_linearA),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        type(point_t)                   :: nodes(npt)
        type(element_connectivity_t)    :: connectivity
        integer(ik)                     :: ftype, mapping, ielem, idomain, spacedim, ntime, neqns, nterms_s, &
                                           ineighbor_domain_g, ineighbor_domain_l, ineighbor_element_g,      &
                                           ineighbor_element_l, ineighbor_face, ineighbor_proc,              &
                                           ineighbor_neqns, ineighbor_nterms_s
        
        
        gq_rule = 1 !> Set collocation quadrature for testing coordinates at quadrature points
        
        
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        !> (x = 0-5 :: y = 0-1 :: z = 0-1)
        !!          *-------*
        !!         /       /|
        !!    x=5 /       / |
        !!       /       /  *
        !!      *-------*  /
        !!      |       | /
        !!  z=1 |       |/
        !!      *-------*
        !!         y=1
        !!
        call nodes(1)%set(0._rk, 0._rk, 0._rk)
        call nodes(2)%set(5._rk, 0._rk, 0._rk)
        call nodes(3)%set(0._rk, 1._rk, 0._rk)
        call nodes(4)%set(5._rk, 1._rk, 0._rk)
        call nodes(5)%set(0._rk, 0._rk, 1._rk)
        call nodes(6)%set(5._rk, 0._rk, 1._rk)
        call nodes(7)%set(0._rk, 1._rk, 1._rk)
        call nodes(8)%set(5._rk, 1._rk, 1._rk)
        this%nodes = nodes

        mapping = 1
        call connectivity%init(mapping)
        call connectivity%set_domain_index(1)
        call connectivity%set_element_index(1)
        call connectivity%set_element_nodes([1, 2, 3, 4, 5, 6, 7, 8])
        
        
        !> Initialize Element geometry and Numerics
        spacedim = 3
        idomain  = 1
        ielem    = 1
        neqns    = 2
        nterms_s = 8
        ntime    = 1
        call this%elem%init_geom(spacedim,nodes,connectivity,idomain,ielem)
        call this%elem%init_sol(neqns,nterms_s,ntime)
        
        
        !> Initialize face geometries
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)

        !> Initialize face neighbors
        ftype = 0
        ineighbor_domain_g  = 0
        ineighbor_domain_l  = 0
        ineighbor_element_g = 0
        ineighbor_element_l = 0
        ineighbor_face      = 0
        ineighbor_neqns     = 2
        ineighbor_nterms_s  = 8
        ineighbor_proc      = 0
        call this%faces(XI_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,      &
                                                    ineighbor_element_g,ineighbor_element_l,    &
                                                    ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)
        call this%faces(XI_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,      &
                                                    ineighbor_element_g,ineighbor_element_l,    &
                                                    ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ETA_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,     &
                                                     ineighbor_element_g,ineighbor_element_l,   &
                                                     ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ETA_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,     &
                                                     ineighbor_element_g,ineighbor_element_l,   &
                                                     ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ZETA_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,    &
                                                      ineighbor_element_g,ineighbor_element_l,  &
                                                      ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)
        call this%faces(ZETA_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,    &
                                                      ineighbor_element_g,ineighbor_element_l,  &
                                                      ineighbor_face,ineighbor_neqns,ineighbor_nterms_s,ineighbor_proc)

        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)
    end subroutine setUp
    !************************************************************************************
    

    !>
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_linearA),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !**************************************************************************************





    !> Test element metric entries at quadrature points
    !!
    !!
    !!-------------------------------------------------------------------------------------
    @Test
    subroutine testElement_metric(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%elem%gq%vol%nnodes)
        
        test_metric(1,1,:) = 0.25_rk
        test_metric(2,1,:) = 0._rk
        test_metric(3,1,:) = 0._rk
        test_metric(1,2,:) = 0._rk
        test_metric(2,2,:) = 1.25_rk
        test_metric(3,2,:) = 0._rk
        test_metric(1,3,:) = 0._rk
        test_metric(2,3,:) = 0._rk
        test_metric(3,3,:) = 1.25_rk
        @assertEqual(test_metric,self%elem%metric)
        
    end subroutine testElement_metric
    !***************************************************************************************



    !> Test inverse element jacobian entries at quadrature points
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_jinv(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_jinv(self%elem%gq%vol%nnodes)
        
        test_jinv = 0.625_rk
        @assertEqual(test_jinv,self%elem%jinv)
    end subroutine testElement_jinv
    !****************************************************************************************

    

    @Test
    !> Test mass matrix entries
    !!
    !!
    !!
    !!---------------------------------------------------------------------------------------
    subroutine testElement_mass(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_mass = ZERO
        test_mass(1,1) = EIGHT
        test_mass(2,2) = EIGHT/THREE
        test_mass(3,3) = EIGHT/THREE
        test_mass(4,4) = EIGHT/THREE
        test_mass(5,5) = EIGHT/NINE
        test_mass(6,6) = EIGHT/NINE
        test_mass(7,7) = EIGHT/NINE
        test_mass(8,8) = EIGHT/27._rk
        
        test_mass = 0.625_rk * test_mass
        
        @assertEqual(test_mass,self%elem%mass,tol)
    end subroutine testElement_mass
    !*****************************************************************************************





    !> Test volume
    !!
    !!
    !!
    !!---------------------------------------------------------------------------------------
    @Test
    subroutine testElement_volume(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        @assertEqual(self%elem%vol,5._rk,tol)

    end subroutine testElement_volume
    !*****************************************************************************************


    @Test
    !> Test cartesian coordinate values at quadrature nodes
    !!
    !!
    !-----------------------------------------------------------------------------------------
    subroutine testElement_quadpts(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%elem%gq%vol%nnodes)    :: test_x, test_y, test_z
        real(rk)                                        :: x1,x2,y1,y2,z1,z2

        x1 = 2.5_rk*(ONE - sqrt(ONE/THREE))
        x2 = 2.5_rk*(ONE + sqrt(ONE/THREE))
        y1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        y2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        z1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        z2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        test_x = [x1, x2, x1, x2, x1, x2, x1, x2]
        test_y = [y1, y1, y2, y2, y1, y1, y2, y2]
        test_z = [z1, z1, z1, z1, z2, z2, z2, z2]
        
        @assertEqual(test_x,self%elem%quad_pts(:)%c1_)
        @assertEqual(test_y,self%elem%quad_pts(:)%c2_)
        @assertEqual(test_z,self%elem%quad_pts(:)%c3_)
    end subroutine testElement_quadpts
    !*******************************************************************************************







    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_ddx(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%elem%gq%vol%nnodes, 8) :: test
        real(rk), dimension(self%elem%gq%vol%nnodes)    :: xi, eta, zeta
        
        real(rk) :: tol
        
        tol = 1.e-14_rk
        
        xi   = self%elem%gq%vol%nodes(:)%c1_
        eta  = self%elem%gq%vol%nodes(:)%c2_
        zeta = self%elem%gq%vol%nodes(:)%c3_
        
        
        
        test(:,1) = ZERO                !> Mode 1
        test(:,2) = ZERO                !> Mode 2
        test(:,3) = ZERO                !> Mode 3
        test(:,4) = 0.4_rk              !> Mode 4
        test(:,5) = 0.4_rk * eta        !> Mode 5
        test(:,6) = 0.4_rk * zeta       !> Mode 6
        test(:,7) = ZERO                !> Mode 7
        test(:,8) = 0.4_rk * eta * zeta !> Mode 8
        @assertEqual(test,self%elem%ddx,tol)
    end subroutine
    !*******************************************************************************************





    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_ddy(self)
       class(test_element_linearA),    intent(inout)   :: self
       real(rk), dimension(self%elem%gq%vol%nnodes, 8) :: test
       real(rk), dimension(self%elem%gq%vol%nnodes)    :: xi, eta, zeta
       
       real(rk) :: tol
       
       tol = 1.e-14_rk
       
       xi   = self%elem%gq%vol%nodes(:)%c1_
       eta  = self%elem%gq%vol%nodes(:)%c2_
       zeta = self%elem%gq%vol%nodes(:)%c3_
       
       
       
       test(:,1) = ZERO                !> Mode 1
       test(:,2) = TWO                 !> Mode 2
       test(:,3) = ZERO                !> Mode 3
       test(:,4) = ZERO                !> Mode 4
       test(:,5) = TWO * xi            !> Mode 5
       test(:,6) = ZERO                !> Mode 6
       test(:,7) = TWO * zeta          !> Mode 7
       test(:,8) = TWO * xi * zeta     !> Mode 8
       @assertEqual(test,self%elem%ddy,tol)
    end subroutine
    !*******************************************************************************************





    !> Test cartesian gradient matrices
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_ddz(self)
       class(test_element_linearA),    intent(inout)   :: self
       real(rk), dimension(self%elem%gq%vol%nnodes, 8) :: test
       real(rk), dimension(self%elem%gq%vol%nnodes)    :: xi, eta, zeta
       
       real(rk) :: tol
       
       tol = 1.e-14_rk
       
       xi   = self%elem%gq%vol%nodes(:)%c1_
       eta  = self%elem%gq%vol%nodes(:)%c2_
       zeta = self%elem%gq%vol%nodes(:)%c3_
       
       
       
       test(:,1) = ZERO                !> Mode 1
       test(:,2) = ZERO                !> Mode 2
       test(:,3) = TWO                 !> Mode 3
       test(:,4) = ZERO                !> Mode 4
       test(:,5) = ZERO                !> Mode 5
       test(:,6) = TWO * xi            !> Mode 6
       test(:,7) = TWO * eta           !> Mode 7
       test(:,8) = TWO * xi * eta      !> Mode 8
       @assertEqual(test,self%elem%ddz,tol)
       
    end subroutine
    !*******************************************************************************************












!------------------------------------------------------------------------------
!                                Face tests
!------------------------------------------------------------------------------


    !>
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_metrics(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%faces(XI_MAX)%gq%face%nnodes)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_metric(1,1,:) = 0.25_rk
        test_metric(2,1,:) = 0._rk
        test_metric(3,1,:) = 0._rk
        test_metric(1,2,:) = 0._rk
        test_metric(2,2,:) = 1.25_rk
        test_metric(3,2,:) = 0._rk
        test_metric(1,3,:) = 0._rk
        test_metric(2,3,:) = 0._rk
        test_metric(3,3,:) = 1.25_rk
        
        @assertEqual(test_metric,self%faces(XI_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%metric,tol)
    end subroutine
    !*******************************************************************************************


    !>
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testelement_face_normals(self)
        class(test_element_lineara),    intent(inout)   :: self
        real(rk), dimension(self%faces(xi_max)%gq%face%nnodes) :: test_norm_x, test_norm_y, test_norm_z
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        ! xi_min
        test_norm_x = -0.25_rk
        test_norm_y = zero
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(xi_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(xi_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(xi_min)%norm(:,3),tol)
        
        ! xi_max
        test_norm_x = 0.25_rk
        test_norm_y = zero
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(xi_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(xi_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(xi_max)%norm(:,3),tol)
        
        ! eta_min
        test_norm_x = zero
        test_norm_y = -1.25_rk
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(eta_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(eta_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(eta_min)%norm(:,3),tol)     
        
        ! eta_max
        test_norm_x = zero
        test_norm_y = 1.25_rk
        test_norm_z = zero
        
        @assertequal(test_norm_x,self%faces(eta_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(eta_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(eta_max)%norm(:,3),tol)

        ! zeta_min
        test_norm_x = zero
        test_norm_y = zero
        test_norm_z = -1.25_rk
        
        @assertequal(test_norm_x,self%faces(zeta_min)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(zeta_min)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(zeta_min)%norm(:,3),tol)
        
        ! zeta_max
        test_norm_x = zero
        test_norm_y = zero
        test_norm_z = 1.25_rk
        
        @assertequal(test_norm_x,self%faces(zeta_max)%norm(:,1),tol)
        @assertequal(test_norm_y,self%faces(zeta_max)%norm(:,2),tol)
        @assertequal(test_norm_z,self%faces(zeta_max)%norm(:,3),tol)
       

    end subroutine
    !*******************************************************************************************








    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine testElement_face_unit_normals(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%faces(XI_MAX)%gq%face%nnodes) :: test_norm_x, test_norm_y, test_norm_z
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_norm_x = -ONE
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%unorm(:,3),tol)
        
        ! XI_MAX
        test_norm_x = ONE
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%unorm(:,3),tol)
        
        ! ETA_MIN
        test_norm_x = ZERO
        test_norm_y = -ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%unorm(:,3),tol)     
        
        ! ETA_MAX
        test_norm_x = ZERO
        test_norm_y = ONE
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%unorm(:,3),tol)

        ! ZETA_MIN
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = -ONE
        
        @assertEqual(test_norm_x,self%faces(ZETA_MIN)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MIN)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%unorm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = ONE
        
        @assertEqual(test_norm_x,self%faces(ZETA_MAX)%unorm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MAX)%unorm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%unorm(:,3),tol)
       

    end subroutine
    !*******************************************************************************************





























!------------------------------------------------------------------------------
!      element%mesh_point, element%solution_point, element%metric_point, element%computational_point
!------------------------------------------------------------------------------


    !> Test mesh_point routine returns the correct x-coordinate value
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__x(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]
        eta = [-ONE, -ONE, -ONE, -ONE, ZERO]
        zeta = [-ONE, -ONE, -ONE, -ONE, ZERO] 

        ref_coords = [ZERO, 1.25_rk, 3.75_rk, 5._rk, 3.75_rk]


        icoord = 1 ! Check x-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%grid_point(icoord, xi(ipt), eta(ipt), zeta(ipt))
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine
    !*******************************************************************************************



        
    !> Test mesh_point routine returns the correct y-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__y(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi   = [-ONE, -ONE, -ONE, -ONE, ZERO]
        eta  = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]
        zeta = [-ONE, -ONE, -ONE, -ONE, ZERO] 

        ref_coords = [ZERO, 0.25_rk, 0.75_rk, 1._rk, 0.75_rk]


        icoord = 2 ! Check y-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%grid_point(icoord, xi(ipt), eta(ipt), zeta(ipt))
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine
    !*******************************************************************************************




    !> Test mesh_point routine returns the correct z-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__mesh_point__z(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(5)  :: ref_coords, check_coords, xi, eta, zeta
        integer(ik)             :: icoord, ipt
                        

        xi   = [-ONE, -ONE, -ONE, -ONE, ZERO]
        eta  = [-ONE, -ONE, -ONE, -ONE, ZERO] 
        zeta = [-1.0_rk, -0.5_rk, 0.5_rk, 1.0_rk, 0.5_rk]

        ref_coords = [ZERO, 0.25_rk, 0.75_rk, 1._rk, 0.75_rk]


        icoord = 3 ! Check z-coordinates
        do ipt = 1,5
            check_coords(ipt) = self%elem%grid_point(icoord, xi(ipt), eta(ipt), zeta(ipt))
        end do

        @assertEqual(ref_coords,check_coords)

    end subroutine
    !*******************************************************************************************









    !> Test computational_point routine returns the correct xi-coordinate value
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__computational_point(self)
        class(test_element_linearA),    intent(inout)   :: self

        real(rk), dimension(8)  :: ref_xi, ref_eta, ref_zeta
        real(rk), dimension(8)  :: check_xi, check_eta, check_zeta
        type(point_t)           :: check_coords
        real(rk)                :: x, y, z
        integer(ik)             :: ipt
                        


        ref_xi   = [-ONE, ONE, -ONE, ONE, -ONE, ONE, -ONE, ONE]
        ref_eta  = [-ONE, -ONE, ONE, ONE, -ONE, -ONE, ONE, ONE]
        ref_zeta = [-ONE, -ONE, -ONE, -ONE, ONE, ONE, ONE, ONE]


        do ipt = 1,size(self%nodes)
            x = self%nodes(ipt)%c1_
            y = self%nodes(ipt)%c2_
            z = self%nodes(ipt)%c3_

            check_coords = self%elem%computational_point(x, y, z)

            check_xi(ipt)   = check_coords%c1_
            check_eta(ipt)  = check_coords%c2_
            check_zeta(ipt) = check_coords%c3_
        end do

        @assertEqual(ref_xi,   check_xi  )
        @assertEqual(ref_eta,  check_eta )
        @assertEqual(ref_zeta, check_zeta)

    end subroutine test__computational_point
    !*******************************************************************************************


















end module test_element_linearA_mod
