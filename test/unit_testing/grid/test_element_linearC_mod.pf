module test_element_linearC_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, EIGHT, NINE, TEN, &
                                          XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX  
    use type_point,                 only: point_t
    use type_face,                  only: face_t
    use type_element,               only: element_t
    use type_element_connectivity,  only: element_connectivity_t
    implicit none

    public  :: test_element_linearC


    @TestCase
    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------
    type, extends(TestCase) ::  test_element_linearC
        type(chidg_t)   :: chidg
        type(element_t) :: elem
        type(face_t), allocatable   :: faces(:)
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_element_linearC
    !**************************************************************************


contains


    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_element_linearC),    intent(inout)   :: this
        
        integer(ik), parameter          :: npt = 8
        type(point_t)                   :: nodes(npt)
        type(element_connectivity_t)    :: connectivity
        real(rk)                        :: sqrt_two, inv_sqrt_two
        integer(ik)                     :: ftype, ineighbor, mapping, ielem, idomain, spacedim
        integer(ik)                     :: ineighbor_domain_g, ineighbor_domain_l, ineighbor_element_g, ineighbor_element_l, ineighbor_face, ineighbor_proc
        
        
        call this%chidg%start_up('core')
        allocate(this%faces(6))
        
        !> Cube element rotated at 45-degrees along the 0,0,0 y-axis
        !!
        !!              *  (sqrt(2), 0, 0)
        !!            /   \ 
        !!          /       \
        !!        /           \
        !!       *             *  (1/sqrt(2), 0, 1/sqrt(2))
        !!        \           /
        !!          \       /
        !!            \   /
        !!              *
        !!          (0,0,0)
        !!
        sqrt_two        = sqrt(2._rk)
        inv_sqrt_two    = 1._rk/sqrt_two
        call nodes(1)%set(0._rk,          0._rk,      0._rk)
        call nodes(2)%set(inv_sqrt_two,   0._rk,      inv_sqrt_two)
        call nodes(3)%set(inv_sqrt_two,   0._rk,     -inv_sqrt_two)
        call nodes(4)%set(sqrt_two,       0._rk,      0._rk)
        call nodes(5)%set(0._rk,          1._rk,      0._rk)
        call nodes(6)%set(inv_sqrt_two,   1._rk,      inv_sqrt_two)
        call nodes(7)%set(inv_sqrt_two,   1._rk,     -inv_sqrt_two)
        call nodes(8)%set(sqrt_two,       1._rk,      0._rk)


        mapping = 1
        call connectivity%init(mapping)
        call connectivity%set_domain_index(1)
        call connectivity%set_element_index(1)
        call connectivity%set_element_nodes([1, 2, 3, 4, 5, 6, 7, 8])
        
        ! Initialize Element geometry and Numerics
        spacedim = 3
        idomain = 1
        ielem   = 1
        call this%elem%init_geom(spacedim,nodes,connectivity,idomain,ielem)
        call this%elem%init_sol(2,8)    ! 2 equations, 8 terms (3*3*3)
        



        !> Initialize face geometries
        call this%faces(XI_MIN)%init_geom(XI_MIN,this%elem)
        call this%faces(XI_MAX)%init_geom(XI_MAX,this%elem)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,this%elem)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,this%elem)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,this%elem)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,this%elem)

        !> Initialize face neighbors
        ftype = 0
        ineighbor_domain_g = 0
        ineighbor_domain_l = 0
        ineighbor_element_g = 0
        ineighbor_element_l = 0
        ineighbor_proc      = 0
        call this%faces(XI_MIN)%init_neighbor(  ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        call this%faces(XI_MAX)%init_neighbor(  ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        call this%faces(ETA_MIN)%init_neighbor( ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        call this%faces(ETA_MAX)%init_neighbor( ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        call this%faces(ZETA_MIN)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        call this%faces(ZETA_MAX)%init_neighbor(ftype,ineighbor_domain_g,ineighbor_domain_l,ineighbor_element_g,ineighbor_element_l,ineighbor_face,ineighbor_proc)
        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)
    end subroutine setUp
    !***************************************************************************************************
    

    !>
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_element_linearC),    intent(inout)   :: this


        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')

    end subroutine tearDown
    !****************************************************************************************************






    @Test
    !>
    !!
    !!
    !!
    !----------------------------------------------------------------------------------------------------
    subroutine testElement_metric(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%elem%gq%vol%nnodes)
        real(rk)    :: sqrt_two, inv_sqrt_two, tol
        
        tol = 1.e-13_rk
        sqrt_two = sqrt(2._rk)
        inv_sqrt_two = 1._rk/sqrt_two
        
        test_metric(1,1,:)  =  inv_sqrt_two/4._rk
        test_metric(2,1,:)  =  inv_sqrt_two/4._rk
        test_metric(3,1,:)  =  0._rk
        
        test_metric(1,2,:)  =  0._rk
        test_metric(2,2,:)  =  0._rk
        test_metric(3,2,:)  =  0.25_rk
        
        test_metric(1,3,:)  =  inv_sqrt_two/4._rk
        test_metric(2,3,:)  = -inv_sqrt_two/4._rk
        test_metric(3,3,:)  =  0._rk
        @assertEqual(test_metric,self%elem%metric,tol)
        
    end subroutine testElement_metric
    !******************************************************************************************************






    @Test
    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    subroutine testElement_jinv(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk)    :: test_jinv(self%elem%gq%vol%nnodes), tol
        tol = 1.e-13_rk
        
        test_jinv = 1._rk/8._rk
        @assertEqual(test_jinv,self%elem%jinv,tol)

    end subroutine testElement_jinv
    !******************************************************************************************************
    




    @Test
    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    subroutine testElement_mass(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        test_mass = ZERO
        test_mass(1,1) = EIGHT
        test_mass(2,2) = EIGHT/THREE
        test_mass(3,3) = EIGHT/THREE
        test_mass(4,4) = EIGHT/THREE
        test_mass(5,5) = EIGHT/NINE
        test_mass(6,6) = EIGHT/NINE
        test_mass(7,7) = EIGHT/NINE
        test_mass(8,8) = EIGHT/27._rk
        
        test_mass = 1._rk/8._rk * test_mass
        
        @assertEqual(test_mass,self%elem%mass,tol)

    end subroutine testElement_mass
    !*******************************************************************************************************





    @Test
    !>
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    subroutine testElement_volume(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        @assertEqual(self%elem%vol,1._rk,tol)

    end subroutine testElement_volume
    !*******************************************************************************************************






    !------------------------------------------------------------------------------
    !>                                Face tests
    !------------------------------------------------------------------------------


    @Test
    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------
    subroutine testElement_face_metrics(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%faces(XI_MAX)%gq%face%nnodes)
        real(rk)    :: sqrt_two, inv_sqrt_two, tol
        
        tol = 1.e-15_rk
        sqrt_two = sqrt(2._rk)
        inv_sqrt_two = 1._rk/sqrt_two
        
        test_metric(1,1,:) = inv_sqrt_two/FOUR
        test_metric(2,1,:) = inv_sqrt_two/FOUR
        test_metric(3,1,:) = ZERO
        test_metric(1,2,:) = ZERO
        test_metric(2,2,:) = ZERO
        test_metric(3,2,:) = 0.25_rk
        test_metric(1,3,:) = inv_sqrt_two/FOUR
        test_metric(2,3,:) = -inv_sqrt_two/FOUR
        test_metric(3,3,:) = ZERO
        
        @assertEqual(test_metric,self%faces(XI_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%metric,tol)

    end subroutine testElement_face_metrics
    !*******************************************************************************************************



    @Test
    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------
    subroutine testElement_face_normals(self)
        class(test_element_linearC),    intent(inout)   :: self
        real(rk), dimension(self%faces(XI_MAX)%gq%face%nnodes) :: test_norm_x, test_norm_y, test_norm_z
        real(rk) :: inv_sqrt_two, tol
        
        tol = 1.e-15_rk
        inv_sqrt_two = ONE/sqrt(TWO)
        
        ! XI_MIN
        test_norm_x = -inv_sqrt_two/FOUR
        test_norm_y = ZERO
        test_norm_z = -inv_sqrt_two/FOUR
        
        @assertEqual(test_norm_x,self%faces(XI_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%norm(:,3),tol)
        
        ! XI_MAX
        test_norm_x = inv_sqrt_two/FOUR
        test_norm_y = ZERO
        test_norm_z = inv_sqrt_two/FOUR
        
        @assertEqual(test_norm_x,self%faces(XI_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%norm(:,3),tol)
        
        ! ETA_MIN
        test_norm_x = -inv_sqrt_two/FOUR
        test_norm_y = ZERO
        test_norm_z = inv_sqrt_two/FOUR
        
        @assertEqual(test_norm_x,self%faces(ETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%norm(:,3),tol)      
        
        ! ETA_MAX
        test_norm_x = inv_sqrt_two/FOUR
        test_norm_y = ZERO
        test_norm_z = -inv_sqrt_two/FOUR
        
        @assertEqual(test_norm_x,self%faces(ETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%norm(:,3),tol)

        ! ZETA_MIN
        test_norm_x = ZERO
        test_norm_y = -0.25_rk
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ZETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%norm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_x = ZERO
        test_norm_y = 0.25_rk
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ZETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%norm(:,3),tol)
       

    end subroutine testElement_face_normals
    !*****************************************************************************************************










end module test_element_linearC_mod





