module test_interpolate_chimera_multipledonor_mod
    use pfunit_mod
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t
    use type_seed,          only: seed_t
    use type_meshdata,      only: meshdata_t
    use type_face_info,     only: face_info_t
    use type_bc,            only: bc_t
    use mod_bc,             only: create_bc


    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  LOCAL, NEIGHBOR, IO_DESTINATION

    use mod_hdfio,          only: read_grid_hdf
    use mod_chidg_mpi,      only: IRANK
    use mod_interpolate,    only: interpolate_face, interpolate_element
    use mod_grid_operators, only: initialize_variable
    use mod_testutils,      only: meshgen
    use mod_chimera


    use DNAD_D

    use type_function,      only: function_t
    use mod_function,       only: create_function
    implicit none

    public  :: test_interpolate_chimera_multipledonor

    
    !>
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !-----------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_interpolate_chimera_multipledonor

        type(chidg_t)                   :: chidg
        class(function_t),  allocatable :: fcn

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_interpolate_chimera_multipledonor
    !******************************************************************************


contains

    !
    ! NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    ! procedure. The argument names have to match
    !
    subroutine setUp(this)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: this

        integer(ik)                     :: nterms_s, ivar, idom, spacedim
        type(meshdata_t),   allocatable :: meshdata(:) 
        class(bc_t),        allocatable :: bc
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'
    
        !        
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')

        !
        ! Read D2_E8_M1. Two domains, 2x2x2 elements in each domain, linear mapping
        !
        spacedim = 3
        nterms_s = 8
        call this%chidg%read_grid('D2_E8_M1_overlapping_multipledonor.h5',spacedim)
        call this%chidg%read_boundaryconditions('D2_E8_M1_overlapping_multipledonor.h5')



        !
        ! Initialize chidg solution data storage
        !
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%init('chimera')
        call this%chidg%initialize_solution_solver()

        !
        ! Initialized solution to constant values
        !
        ivar = this%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')   ! Get variable index


        !
        ! Initialize variable
        !
        call create_function(this%fcn,'constant')                       ! Allocate constant function
        call this%fcn%set_option('val',5._rk)                           ! Set constant function value
        call initialize_variable(this%chidg%data,ivar,this%fcn)         ! Initialize variable using constant function

    
    end subroutine
    
    subroutine tearDown(this)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: this
        

        !
        ! Close ChiDG interface
        !
        call this%chidg%close('core')


    end subroutine
    !************************************************************************************************************



    
    
        
    !-----------------------------------------------------------------------------------------------------
    !                               Face - surface interpolation - Autodiff
    !-----------------------------------------------------------------------------------------------------
        
    
    
    !> Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=NEIGHBOR. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__values__idE(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face

            !
            ! A seed element, this is a neighbor for this test - so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 2
            seed%ielement_l = 2
            seed%iproc      = IRANK


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed

            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            !call interpolate_face(self%chidg%data%mesh,q,idomain,ielem,iface,ivar,u_gq,seed, NEIGHBOR)
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__values__idE
    !*************************************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=NEIGHBOR. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__derivatives__idF(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, igq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face


            !
            ! A seed element, this is the current element. Since we are performing a NEIGHBOR interpolation, derivatives should be zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 2
            seed%ielement_l = 2
            seed%iproc      = IRANK

            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            !call interpolate_face(self%chidg%data%mesh,q,idomain,ielem,iface,ivar,u_gq,seed, NEIGHBOR)
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded with a neighbor element
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__derivatives__idF
    !*************************************************************************************************************













    
    
    !> Interpolation of modes to surface quadrature nodes. Seeding current element. source=NEIGHBOR. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__values__idG(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face

            !
            ! A seed element, neighbor to ielem/iface. Performing NEIGHBOR interpolation so all dervative arrays should be nonzero
            !
            seed%idomain_g  = 2
            seed%idomain_l  = 2
            seed%ielement_g = 1     ! neighbor to element 14 about face 1
            seed%ielement_l = 1     ! neighbor to element 14 about face 1
            seed%iproc      = IRANK

            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            !call interpolate_face(self%chidg%data%mesh,q,idomain,ielem,iface,ivar,u_gq,seed, NEIGHBOR)
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__values__idG
    !*********************************************************************************************************
    
    
    
    
    
    !> Interpolation of modes to surface quadrature nodes. Seeding current element. source=NEIGHBOR. Testing fuction derivatives. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_chimera_AD_MD__derivatives__idH(self)
        class(test_interpolate_chimera_multipledonor),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, igq, ngq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        real(rk),   allocatable     :: mat(:,:)
        type(face_info_t)           :: face

        integer(ik)                 :: idonor, ChiID, ndonor_nodes, node_index
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1         ! domain index
            ielem   = 2         ! given element
            iface   = XI_MAX    ! given face
            idonor  = 1

            ChiID = self%chidg%data%mesh(idomain)%faces(ielem,iface)%ChiID

            !
            ! A seed element, neighbor to ielem/iface. Performing NEIGHBOR interpolation so all dervative arrays should be nonzero
            !
            seed%idomain_g  = 2
            seed%idomain_l  = 2
            seed%ielement_g = 1
            seed%ielement_l = 1
            seed%iproc      = IRANK


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed



            
            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            !call interpolate_face(self%chidg%data%mesh,q,idomain,ielem,iface,ivar,u_gq,seed, NEIGHBOR)
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
              
            
            


            !
            ! Test derivatives from first donor
            !
            mat = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_interpolator%at(idonor)
            ndonor_nodes = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%size()

            do igq = 1,ndonor_nodes
                node_index = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%at(igq)

                deriv_ref = mat(igq,:)     ! Set expected derivatives
                
                @assertEqual(deriv_ref,u_gq(node_index)%xp_ad_,tol)
                
                deriv_ref = ZERO                                            ! Reset to zero
            end do




            !
            ! Test derivatives from second donor
            !
            idonor = 2
            mat = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_interpolator%at(idonor)
            ndonor_nodes = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%size()

            do igq = 1,ndonor_nodes
                node_index = self%chidg%data%mesh(idomain)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%at(igq)

                deriv_ref = mat(igq,:)     ! Set expected derivatives
                deriv_ref = ZERO           ! should be zero since donor 1 was being differentiated and this is donor two
                
                @assertEqual(deriv_ref,u_gq(node_index)%xp_ad_,tol)
                
                deriv_ref = ZERO                                            ! Reset to zero
            end do


        end associate
        
    end subroutine test__interpolate_face_chimera_AD_MD__derivatives__idH
    !************************************************************************************************************













end module test_interpolate_chimera_multipledonor_mod
