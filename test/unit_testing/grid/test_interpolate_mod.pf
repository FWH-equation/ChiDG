module test_interpolate_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_seed,                  only: seed_t
    use type_face_info,             only: face_info_t
    use type_domain_connectivity,   only: domain_connectivity_t


    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  LOCAL, NEIGHBOR, IO_DESTINATION
    use mod_hdfio,          only: read_grid_hdf
    use mod_interpolate,    only: interpolate_face, interpolate_element
    use mod_grid_operators, only: initialize_variable
    use mod_testutils,      only: meshgen
    use DNAD_D
    use mod_DNAD_tools,     only: compute_neighbor_element_l, compute_neighbor_face
    use type_function,      only: function_t
    use mod_function,       only: create_function
    implicit none

    public  :: test_interpolate





@TestCase
    type, extends(TestCase) ::  test_interpolate

        type(chidg_t)                   :: chidg
        class(function_t), allocatable  :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_interpolate






contains
    !---------------------------------------------------------------------------------------------
    ! NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    ! procedure. The argument names have to match
    !---------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_interpolate),    intent(inout)   :: this
        integer(ik)                                 :: nterms_c, nterms_s, ivar, spacedim

        type(point_t),  allocatable                 :: nodes(:)
        type(domain_connectivity_t)                 :: connectivity
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'
    

        !        
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')


        !
        ! Read 3x3x3 element grid
        !
        call meshgen('333',nodes,connectivity)


        !
        ! Add domain to ChiDG
        !
        spacedim = 3
        nterms_c = 8
        nterms_s = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar')


        !
        ! Initialize chidg solution data storage
        !
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%initialize_solution_solver()


        !
        ! Initialized solution to constant values
        !
        ivar = this%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')   ! Get variable index


        !
        ! Initialize variable
        !
        call create_function(this%fcn,'constant')                       ! Allocate constant function
        call this%fcn%set_option('val',5._rk)                           ! Set constant function value
        call initialize_variable(this%chidg%data,ivar,this%fcn)         ! Initialize variable using constant function

    
    end subroutine
    
    subroutine tearDown(this)
        class(test_interpolate),    intent(inout)   :: this
        

        !
        ! Close ChiDG interface
        !
        call this%chidg%close('core')

        
    end subroutine


!------------------------------------------------------------------------------------------------------


!> Test interpolation of modes to volume quadrature nodes. No AD variables
@Test
    subroutine test_interpolate_element_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, idomain
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        

        tol     = 1.e-13_rk
        idomain = 1
        ielem   = 14
        ivar    = 1


        ngq = self%chidg%data%mesh(1)%elems(ielem)%gq%nnodes_v


        allocate(u_gq(ngq), &
                 u_ref(ngq))


        !
        ! PROCEDURE BEING TESTED
        !
        call interpolate_element(self%chidg%data%mesh, self%chidg%data%sdata%q, idomain, ielem, ivar, u_gq)



        ! Initialize reference
        val = self%fcn%get_option_value('val')
        u_ref = val
        !u_ref = self%fcn%value_


        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)

    end subroutine
    
    
    
    
    
@Test
    subroutine test_interpolate_face_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        
        
        
        tol   = 1.e-13_rk
        idomain = 1
        ielem   = 14
        iface   = 1
        ivar    = 1

        ngq = self%chidg%data%mesh(1)%faces(ielem,iface)%gq%nnodes_f

        allocate(u_gq(ngq))
        allocate(u_ref(ngq))
        
        
        !
        ! PROCEDURE BEING TESTED
        !
        call interpolate_face(self%chidg%data%mesh,self%chidg%data%sdata%q,idomain,ielem,iface,ivar,u_gq)
        
        
        ! Initialize reference
        val = self%fcn%get_option_value('val')
        u_ref = val
        !u_ref = self%fcn%value_ 
        
        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)
        
        
    end subroutine





!-----------------------------------------------------------------------------------------------------
!                               ELEMENT - volume interpolation - Autodiff
!-----------------------------------------------------------------------------------------------------

!> Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_element_autodiff__values__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ielem_s, ivar, ngq, idomain
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(seed_t)                :: seed
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )

            idomain = 1
            ielem   = 14    ! given element

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15

            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = elems(ielem)%gq%nnodes_v

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            

            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_element(self%chidg%data%mesh,q,idomain,ielem,ivar,u_gq,seed)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            !u_ref = self%fcn%value_ 

            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine



!> Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing derivative values.
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_element_autodiff__derivs__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, igq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )

            idomain = 1     ! domain index
            ielem   = 14    ! given element index

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq    = elems(ielem)%gq%nnodes_v
            nderiv = elems(ielem)%neqns  *  elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_element(self%chidg%data%mesh,q,idomain,ielem,ivar,u_gq,seed)
            
            
            ! Initialize reference
            deriv_ref = ZERO    !> all derivatives should be zero, since the neightboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(ngq)%xp_ad_,tol)
            end do
            
        end associate
        
    end subroutine
    
    
    
    
    
    
!> Interpolation of modes to volume quadrature nodes. Seeding neighbor current. Testing function values.    
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_element_autodiff__values__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 14    ! a seed element, so all derivative arrays should be seeded to zero
            seed%ielement_l = 14    ! a seed element, so all derivative arrays should be seeded to zero


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')
            
            ngq = elems(ielem)%gq%nnodes_v  !> Number of quadrature nodes
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_element(self%chidg%data%mesh,q,idomain,ielem,ivar,u_gq,seed)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            !u_ref = self%fcn%value_ 
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine


!> Interpolation of modes to volume quadrature nodes. Seeding neighbor current. Testing derivative values.
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_element_autodiff__derivs__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, igq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 14
            seed%ielement_l = 14


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = elems(ielem)%gq%nnodes_v      !> Number of quadrature nodes
            nderiv = elems(ielem)%neqns  *  elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_element(self%chidg%data%mesh,q,idomain,ielem,ivar,u_gq,seed)
            
            
            ! Initialize reference
            deriv_ref    = ZERO         !> all derivatives should be zero, since the neighboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            do igq = 1,ngq
                deriv_ref = elems(ielem)%gq%vol%val(igq,:)      !> Set expected derivatives. Here it turns out to be the igq row of the quadrature matrix
                                                                !> This is because the seeded derivatives are one, so the values are not amplified.
                
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                deriv_ref = ZERO                                !> Reset to zero
            end do
            
        end associate
        
    end subroutine
    
    
    
    
    
    
    
    
!-----------------------------------------------------------------------------------------------------
!                               Face - surface interpolation - Autodiff
!-----------------------------------------------------------------------------------------------------
    
    
    
!> Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=LOCAL. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__values__idA(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face

            !
            ! A seed element, this is a neighbor for this test - so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15


            !
            ! Set face
            !
            face%idomain_g = idomain
            face%idomain_l = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface    = iface
            face%seed     = seed


            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,LOCAL)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            !u_ref = self%fcn%value_ 

            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine
    
    
    
    
    
        
!> Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=LOCAL. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__derivatives__idB(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, igq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face


            !
            ! A seed element, this is a neihgbor for this test - so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15



            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed




            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,LOCAL)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded with a neighbor element
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine
    
    
    
!> Interpolation of modes to surface quadrature nodes. Seeding current element. source=LOCAL. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__values__idC(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 14
            seed%ielement_l = 14


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed





            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,LOCAL)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            !u_ref = self%fcn%value_ 
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine
    
    
    
    
    
!> Interpolation of modes to surface quadrature nodes. Seeding current element. source=LOCAL. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__derivatives__idD(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, igq, ngq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 14
            seed%ielement_l = 14


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed



            
            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,LOCAL)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            do igq = 1,ngq
                deriv_ref = faces(ielem,iface)%gq%face%val(igq,:,iface)     !> Set expected derivatives
                
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                deriv_ref = ZERO                                            !> Reset to zero
            end do
        end associate
        
    end subroutine














    
!> Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=NEIGHBOR. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__values__idE(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face

            !
            ! A seed element, this is a neighbor for this test - so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed




            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            !u_ref = self%fcn%value_ 
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine
    
    
    
    
    
        
!> Interpolation of modes to surface quadrature nodes. Seeding neighbor element. source=NEIGHBOR. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__derivatives__idF(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, igq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face


            !
            ! A seed element, this is a neihgbor for this test - so all derivative arrays should be seeded to zero
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 15
            seed%ielement_l = 15

            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed





            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded with a neighbor element
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine
    















    
    
!> Interpolation of modes to surface quadrature nodes. Seeding current element. source=NEIGHBOR. Testing fuction values. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__values__idG(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 13     ! neighbor to element 14 about face 1
            seed%ielement_l = 13     ! neighbor to element 14 about face 1


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed




            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq = faces(ielem,iface)%gq%nnodes_f
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine
    
    
    
    
    
!> Interpolation of modes to surface quadrature nodes. Seeding current element. source=NEIGHBOR. Testing fuction derivatives. 
!-------------------------------------------------------------------------------------------------------------
@Test
    subroutine test__interpolate_face_autodiff__derivatives__idH(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, igq, ngq, nderiv, idomain
        type(seed_t)                :: seed
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face

        integer(ik)                 :: ielem_n, iface_n, idonor
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            idonor  = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            seed%idomain_g  = 1
            seed%idomain_l  = 1
            seed%ielement_g = 13     ! neighbor to element 14 about face 1
            seed%ielement_l = 13     ! neighbor to element 14 about face 1


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface
            face%seed       = seed


            
            tol   = 1.e-13_rk
            ivar  = self%chidg%data%eqnset(1)%item%prop%get_eqn_index('u')

            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            call interpolate_face(self%chidg%data%mesh,face,q,ivar,u_gq,NEIGHBOR)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            ielem_n = compute_neighbor_element_l(self%chidg%data%mesh,idomain,ielem,iface,idonor)
            iface_n = compute_neighbor_face(   self%chidg%data%mesh,idomain,ielem,iface,idonor)


            do igq = 1,ngq
                deriv_ref = faces(ielem_n,iface_n)%gq%face%val(igq,:,iface_n)     !> Set expected derivatives
                
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                deriv_ref = ZERO                                            !> Reset to zero
            end do
        end associate
        
    end subroutine




























end module test_interpolate_mod
