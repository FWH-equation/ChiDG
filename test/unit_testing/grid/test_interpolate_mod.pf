module test_interpolate_mod
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_element_info,          only: element_info_t
    use type_face_info,             only: face_info_t
    use type_function_info,         only: function_info_t
    use type_function,              only: function_t
    use type_domain_connectivity,   only: domain_connectivity_t


    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, &
                                  ME, NEIGHBOR, IO_DESTINATION, VOLUME_ADVECTIVE_FLUX
    use mod_function,       only: create_function
    use mod_interpolate,    only: interpolate_face_standard, interpolate_face_autodiff, &
                                  interpolate_element_standard, interpolate_element_autodiff
    use mod_test_utilities, only: create_mesh
    use mod_chidg_mpi,      only: IRANK
    use mod_DNAD_tools,     only: compute_neighbor_element_l, compute_neighbor_face
    use DNAD_D
    implicit none

    public  :: test_interpolate





    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_interpolate

        type(chidg_t)                   :: chidg
        class(function_t), allocatable  :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_interpolate
    !*****************************************************************************************






contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !---------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_interpolate),    intent(inout)   :: this
        integer(ik)                                 :: nterms_c, ivar, spacedim

        type(point_t),  allocatable                 :: nodes(:)
        type(domain_connectivity_t)                 :: connectivity
        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'
    

        !        
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('core')


        !
        ! Read 3x3x3 element grid
        !
        call create_mesh('333',nodes,connectivity)


        !
        ! Add domain to ChiDG
        !
        spacedim = 3
        nterms_c = 8
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar Advection','Cartesian')


        !
        ! Initialize chidg solution data storage
        !
        call this%chidg%set('Solution Order', integer_input=2)
        !call this%chidg%initialize_solution_domains()
        call this%chidg%init('domains')
        call this%chidg%init('communication')
        call this%chidg%init('solvers')
        !call this%chidg%initialize_solution_solver()


        !
        ! Initialized solution to constant values
        !
        ivar = this%chidg%data%eqnset(1)%prop%get_primary_field_index('u')


        !
        ! Initialize variable
        !
        call create_function(this%fcn,'constant')
        call this%fcn%set_option('val',5._rk)
        call this%chidg%data%sdata%q%project(this%chidg%data%mesh,this%fcn,ivar)

    
    end subroutine setUp
    !*******************************************************************************************
    
    !>
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_interpolate),    intent(inout)   :: this
        

        ! Close ChiDG interface
        call this%chidg%shut_down('core')

        
    end subroutine tearDown
    !*******************************************************************************************




    !> Test interpolation of modes to volume quadrature nodes. No AD variables
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test_interpolate_element_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ieqn, ngq, idomain, itime
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        

        tol     = 1.e-13_rk
        idomain = 1
        ielem   = 14
        ieqn    = 1
        itime   = 1


        ngq = self%chidg%data%mesh(1)%elems(ielem)%gq%nnodes_v


        allocate(u_gq(ngq), &
                 u_ref(ngq))


        !
        ! PROCEDURE BEING TESTED
        !
        u_gq = interpolate_element_standard(self%chidg%data%mesh, self%chidg%data%sdata%q, idomain, ielem, ieqn, itime,'value')



        ! Initialize reference
        val   = self%fcn%get_option_value('val')
        u_ref = val


        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)

    end subroutine test_interpolate_element_standard
    !*******************************************************************************************
    
    
    
    
    
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test_interpolate_face_standard(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ieqn, ngq, idomain, itime
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol, val
        
        
        
        tol   = 1.e-13_rk
        idomain = 1
        ielem   = 14
        iface   = 1
        ieqn    = 1
        itime   = 1

        ngq = self%chidg%data%mesh(1)%faces(ielem,iface)%gq%nnodes_f

        allocate(u_gq(ngq))
        allocate(u_ref(ngq))
        
        !
        ! PROCEDURE BEING TESTED
        !
        u_gq = interpolate_face_standard(self%chidg%data%mesh,self%chidg%data%sdata%q,idomain,ielem,iface,ieqn, itime)
        
        
        ! Initialize reference
        val = self%fcn%get_option_value('val')
        u_ref = val
        
        ! Test that standard interpolation to quadrature 
        ! on an element volume is producing expected results
        @assertEqual(u_ref,u_gq,tol)
        
        
    end subroutine test_interpolate_face_standard
    !******************************************************************************************





    !------------------------------------------------------------------------------------------
    !                               ELEMENT - volume interpolation - Autodiff
    !------------------------------------------------------------------------------------------


    !> Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__values__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ielem_s, ieqn, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, rhs => self%chidg%data%sdata%rhs )

            idomain = 1
            ielem   = 14    ! given element
            itime   = 1

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 15,    &
                                         ielement_l   = 15,    &
                                         neqns        = 1,     &
                                         nterms_s     = 8,     &
                                         iproc        = IRANK, &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)

            tol   = 1.e-13_rk
            ieqn  = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq   = elems(ielem)%gq%nnodes_v

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            elem_info%idomain_g  = idomain
            elem_info%idomain_l  = idomain
            elem_info%ielement_g = ielem
            elem_info%ielement_l = ielem

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ieqn, itime, 'value')
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val

            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__values__neighbor
    !*****************************************************************************************



    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor element. Testing 
    !!  derivative values.
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__derivs__neighbor(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )

            idomain = 1     ! domain index
            ielem   = 14    ! given element index
            itime   = 1

            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 15,    &
                                         ielement_l   = 15,    &
                                         neqns        = 1,     &
                                         nterms_s     = 8,     &
                                         iproc        = IRANK, &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = elems(ielem)%gq%nnodes_v
            nderiv = elems(ielem)%neqns  *  elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            elem_info%idomain_g  = idomain
            elem_info%idomain_l  = idomain
            elem_info%ielement_g = ielem
            elem_info%ielement_l = ielem

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ivar, itime, 'value')
            
            
            ! Initialize reference
            deriv_ref = ZERO    !> all derivatives should be zero, since the neightboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(ngq)%xp_ad_,tol)
            end do
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__derivs__neighbor
    !*****************************************************************************************
    
    
    
    
    
    
    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor current. 
    !!  Testing function values.    
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__values__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            itime   = 1


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 14,    &
                                         ielement_l   = 14,    &
                                         neqns        = 1,     &
                                         nterms_s     = 8,     &
                                         iproc        = IRANK, &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol  = 1.e-13_rk
            ivar = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = elems(ielem)%gq%nnodes_v  !> Number of quadrature nodes
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            elem_info%idomain_g  = idomain
            elem_info%idomain_l  = idomain
            elem_info%ielement_g = ielem
            elem_info%ielement_l = ielem

            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ivar,itime,'value')
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__values__current
    !******************************************************************************************








    !>  Interpolation of modes to volume quadrature nodes. Seeding neighbor current. Testing 
    !!  derivative values.
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_element_autodiff__derivs__current(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(element_info_t)        :: elem_info
        type(function_info_t)       :: function_info
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, q => self%chidg%data%sdata%q, &
                    rhs => self%chidg%data%sdata%rhs )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            itime   = 1


            !
            ! A seed element, so all derivative arrays should be seeded to zero
            !
            function_info%type    = VOLUME_ADVECTIVE_FLUX
            function_info%ifcn    = 1
            function_info%idepend = 1
            function_info%idiff   = 1
            call function_info%seed%init(idomain_g    = 1,     &
                                         idomain_l    = 1,     &
                                         ielement_g   = 14,    &
                                         ielement_l   = 14,    &
                                         neqns        = 1,     &
                                         nterms_s     = 8,     &
                                         iproc        = IRANK, &
                                         recv_comm    = 0,     &
                                         recv_domain  = 0,     &
                                         recv_element = 0)


            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = elems(ielem)%gq%nnodes_v      !> Number of quadrature nodes
            nderiv = elems(ielem)%neqns  *  elems(ielem)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            elem_info%idomain_g  = idomain
            elem_info%idomain_l  = idomain
            elem_info%ielement_g = ielem
            elem_info%ielement_l = ielem


            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_element_autodiff(self%chidg%data%mesh,q,elem_info,function_info,ivar,itime,'value')
            
            
            ! Initialize reference
            deriv_ref    = ZERO         !> all derivatives should be zero, since the neighboring element is being seeded 
            
            
            ! Test that the derivatives for each gq variable are zero
            do igq = 1,ngq
                deriv_ref = elems(ielem)%gq%vol%val(igq,:)      !> Set expected derivatives. Here it turns out to be the igq row of the quadrature matrix
                                                                !> This is because the seeded derivatives are one, so the values are not amplified.
                
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                deriv_ref = ZERO                                !> Reset to zero
            end do
            
        end associate
        
    end subroutine test__interpolate_element_autodiff__derivs__current
    !******************************************************************************************
    
    
    
    
    
    
    
    
    !-----------------------------------------------------------------------------------------
    !                               Face - surface interpolation - Autodiff
    !-----------------------------------------------------------------------------------------
        
        
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idA(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, &
                    faces => self%chidg%data%mesh(1)%faces, &
                    q     => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, this is a neighbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 15,    &
                               ielement_l   = 15,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface


            tol  = 1.e-13_rk
            ivar = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%gq%nnodes_f

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are not yet allocated
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',ME)
            
            
            ! Initialize reference
            val = self%fcn%get_option_value('val')
            u_ref = val

            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idA
    !******************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idB(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1


            !
            ! A seed element, this is a neihgbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 15,    &
                               ielement_l   = 15,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)



            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface



            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',ME)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded 
            ! with a neighbor element.
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idB
    !******************************************************************************************
    






    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idC(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 14,    &
                               ielement_l   = 14,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface




            tol  = 1.e-13_rk
            ivar = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%gq%nnodes_f
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',ME)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idC
    !*******************************************************************************************
    
    
    
    
    


    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. source=ME. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idD(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, igq, ngq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 14,    &
                               ielement_l   = 14,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface

            
            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',ME)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            do igq = 1,ngq
                ! Set expected derivatives
                deriv_ref = faces(ielem,iface)%gq%face%val(igq,:,iface)
                
                ! Test derivatives
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                ! Reset to zero
                deriv_ref = ZERO
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idD
    !******************************************************************************************








    
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idE(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, this is a neighbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 15,    &
                               ielement_l   = 15,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface


            tol  = 1.e-13_rk
            ivar = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%gq%nnodes_f

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',NEIGHBOR)
            
            
            ! Initialize reference
            val   = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idE
    !*****************************************************************************************
    
    
    
    
    
        
    !>  Interpolation of modes to surface quadrature nodes. Seeding neighbor element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idF(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, igq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, &
                    faces => self%chidg%data%mesh(1)%faces, &
                    q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1


            !
            ! A seed element, this is a neihgbor for this test - so all derivative 
            ! arrays should be seeded to zero.
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 15,    &
                               ielement_l   = 15,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)

            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface



            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))             ! AD
            allocate(deriv_ref(nderiv))     ! Real
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',NEIGHBOR)
            
            deriv_ref = ZERO
            
            ! Test that the derivatives for each gq variable are zero, since we seeded 
            ! with a neighbor element.
            do igq = 1,ngq
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idF
    !******************************************************************************************
    






    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction values. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !------------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__values__idG(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, ngq, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: u_ref(:)
        real(rk)                    :: tol, val
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, &
                    faces => self%chidg%data%mesh(1)%faces, &
                    q => self%chidg%data%sdata%q )
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 13,    &
                               ielement_l   = 13,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface


            tol  = 1.e-13_rk
            ivar = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq  = faces(ielem,iface)%gq%nnodes_f
            
            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays 
            ! are not yet allocated.
            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',NEIGHBOR)
            
            
            !
            ! Initialize reference
            !
            val = self%fcn%get_option_value('val')
            u_ref = val
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq(:)%x_ad_,tol)
            
        end associate
        
    end subroutine test__interpolate_face_autodiff__values__idG
    !******************************************************************************************
    
    
    
    
    
    !>  Interpolation of modes to surface quadrature nodes. Seeding current element. 
    !!  source=NEIGHBOR. 
    !!  Testing fuction derivatives. 
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !-----------------------------------------------------------------------------------------
    @Test
    subroutine test__interpolate_face_autodiff__derivatives__idH(self)
        class(test_interpolate),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, iface, ivar, igq, ngq, nderiv, idomain, itime
        type(AD_D), allocatable     :: u_gq(:)
        real(rk),   allocatable     :: deriv_ref(:)
        real(rk)                    :: tol
        type(face_info_t)           :: face
        type(function_info_t)       :: fcn

        integer(ik)                 :: ielem_n, iface_n, idonor
        
        
        associate ( elems => self%chidg%data%mesh(1)%elems, faces => self%chidg%data%mesh(1)%faces, q => self%chidg%data%sdata%q)        
            idomain = 1     ! domain index
            ielem   = 14    ! given element
            iface   = 1     ! given face
            itime   = 1
            idonor  = 1

            !
            ! A seed element, same as ielem - so all derivative arrays should include non-zeros
            !
            call fcn%seed%init(idomain_g    = 1,     &
                               idomain_l    = 1,     &
                               ielement_g   = 13,    &
                               ielement_l   = 13,    &
                               neqns        = 1,     &
                               nterms_s     = 8,     &
                               iproc        = IRANK, &
                               recv_comm    = 0,     &
                               recv_domain  = 0,     &
                               recv_element = 0)


            !
            ! Set face
            !
            face%idomain_g  = idomain
            face%idomain_l  = idomain
            face%ielement_g = ielem
            face%ielement_l = ielem
            face%iface      = iface

            
            tol    = 1.e-13_rk
            ivar   = self%chidg%data%eqnset(1)%prop%get_primary_field_index('u')
            ngq    = faces(ielem,iface)%gq%nnodes_f
            nderiv = faces(ielem,iface)%neqns  *  faces(ielem,iface)%nterms_s

            ! Allocate number of AD variables for data at GQ nodes. Derivative arrays are 
            ! not yet allocated.
            allocate(u_gq(ngq))
            allocate(deriv_ref(nderiv))
            
            
            !
            ! PROCEDURE BEING TESTED
            !
            u_gq = interpolate_face_autodiff(self%chidg%data%mesh,q,face,fcn,ivar,itime,'value',NEIGHBOR)
              
            
            
            ! Test that interpolation to quadrature nodes from modes to autodiff variables 
            ! on an element volume is producing expected results
            ielem_n = compute_neighbor_element_l(self%chidg%data%mesh,idomain,ielem,iface,idonor)
            iface_n = compute_neighbor_face(     self%chidg%data%mesh,idomain,ielem,iface,idonor)


            do igq = 1,ngq
                ! Set expected derivatives
                deriv_ref = faces(ielem_n,iface_n)%gq%face%val(igq,:,iface_n)
                
                ! Test derivatives
                @assertEqual(deriv_ref,u_gq(igq)%xp_ad_,tol)
                
                ! Reset to zero
                deriv_ref = ZERO
            end do
        end associate
        
    end subroutine test__interpolate_face_autodiff__derivatives__idH
    !******************************************************************************************












end module test_interpolate_mod
