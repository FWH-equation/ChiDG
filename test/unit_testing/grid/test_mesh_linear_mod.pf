module test_mesh_linear_mod
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, NFACES
    use mod_test_utilities, only: create_mesh

    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_mesh,                  only: mesh_t
    use type_element,               only: element_t
    use type_face,                  only: face_t
    use type_domain_connectivity,   only: domain_connectivity_t
    implicit none

    public  :: test_mesh_linear

    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_mesh_linear

        type(chidg_t)   :: chidg
        type(mesh_t)    :: mesh

    contains

        procedure   ::  setUp
        procedure   ::  tearDown

    end type test_mesh_linear
    !**************************************************************************************


contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_mesh_linear),    intent(inout)   :: this
        
        integer(ik), parameter      :: npt = 64
        type(point_t),  allocatable :: nodes(:)
        type(domain_connectivity_t) :: connectivity
        integer(ik)                 :: ftype, ineighbor, mapping, ielem, &
                                       ipt_xi, ipt_eta, ipt_zeta, ipt
        integer(ik)                 :: neqns, nterms_s, nterms_c, idomain, spacedim
        real(rk), dimension(npt)    :: x,y,z

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%start_up('core')
        


        ! elements (3x3x3) - linear
        !
        !            *-------*-------*-------*
        !           /       /       /       /|
        !          *-------*-------*-------* |
        !         /       /       /       /| *
        !        *-------*-------*-------* |/|
        !       /       /       /       /| * |
        !      *-------*-------*-------* |/| *
        !      |       |       |       | * |/|
        !      |       |       |       |/| * |
        !      *-------*-------*-------* |/| *
        !      |       |       |       | * |/
        !      |       |       |       |/| *
        !      *-------*-------*-------* |/
        !      |       |       |       | *
        !      |       |       |       |/
        !      *-------*-------*-------*
        !         
        !
        call create_mesh('333',nodes,connectivity)


        !
        ! Initialize mesh
        !
        idomain  = 1
        spacedim = 3
        nterms_c = 8
        neqns = 1
        nterms_s = 8
        call this%mesh%init_geom(idomain,spacedim,nterms_c,nodes,connectivity)
        call this%mesh%init_sol(neqns,nterms_s)
        call this%mesh%init_comm_local()

    end subroutine
    


    subroutine tearDown(this)
        class(test_mesh_linear),    intent(inout)   :: this
    end subroutine
    !****************************************************************************************************







    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !----------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_integers(self)
        class(test_mesh_linear),    intent(inout)   :: self
        integer(ik) :: neqns, nterms_s, nterms_c, nelem_xi, nelem_eta, nelem_zeta, nelem, idomain
        
        neqns       = 1
        idomain     = 1
        nterms_s    = 8
        nterms_c    = 8
        nelem_xi    = 3
        nelem_eta   = 3
        nelem_zeta  = 3
        nelem       = 27

        @assertEqual(neqns,self%mesh%neqns)
        @assertEqual(nterms_s,self%mesh%nterms_s)
        @assertEqual(nterms_c,self%mesh%nterms_c)
        @assertEqual(nelem,self%mesh%nelem)
        @assertEqual(idomain,self%mesh%idomain_g)

    end subroutine testMesh_integers
    !*****************************************************************************************************
    
    
    
    !>  Test to make sure all elements were initialized
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_elements_initialized(self)
        class(test_mesh_linear),    intent(inout)   :: self
        integer(ik) :: ielem
        
        do ielem = 1,self%mesh%nelem
            @assertTrue(self%mesh%elems(ielem)%geomInitialized)
            @assertTrue(self%mesh%elems(ielem)%numInitialized)
        end do
        
    end subroutine testMesh_elements_initialized
    !******************************************************************************************************
        
        
        
    !>  Test to make sure all faces were initialized
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_faces_initialized(self)
        class(test_mesh_linear),    intent(inout)   :: self
        integer(ik) :: ielem, iface
        
        do ielem = 1,self%mesh%nelem
            do iface = 1,NFACES
                @assertTrue(self%mesh%faces(ielem,iface)%geomInitialized)
                @assertTrue(self%mesh%faces(ielem,iface)%numInitialized)
            end do
        end do
    end subroutine testMesh_faces_initialized
    !******************************************************************************************************
        
    
    
    !>  Test to make sure the parent and neighbor element indices are correct for an interior element
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !------------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_indices_interior(self)
        class(test_mesh_linear),    intent(inout)   :: self
        
        associate (faces => self%mesh%faces)
            ! Test parent element
            @assertEqual(14,faces(14,XI_MIN)%iparent_g)
            @assertEqual(14,faces(14,XI_MAX)%iparent_g)
            @assertEqual(14,faces(14,ETA_MIN)%iparent_g)
            @assertEqual(14,faces(14,ETA_MAX)%iparent_g)
            @assertEqual(14,faces(14,ZETA_MIN)%iparent_g)
            @assertEqual(14,faces(14,ZETA_MAX)%iparent_g)        
            
            ! Test neighbor elements
            @assertEqual(13,faces(14,XI_MIN)%get_neighbor_element_l())
            @assertEqual(15,faces(14,XI_MAX)%get_neighbor_element_l())
            @assertEqual(11,faces(14,ETA_MIN)%get_neighbor_element_l())
            @assertEqual(17,faces(14,ETA_MAX)%get_neighbor_element_l())
            @assertEqual(5,faces(14,ZETA_MIN)%get_neighbor_element_l())
            @assertEqual(23,faces(14,ZETA_MAX)%get_neighbor_element_l())
        end associate

    end subroutine testMesh_indices_interior
    !*******************************************************************************************************
    
    

    !>  Test to make sure the neighbor element indices are correct for a boundary element    
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_indices_boundary(self)
        class(test_mesh_linear),    intent(inout)   :: self
        
        associate (faces => self%mesh%faces)
            !> Test neighbor elements
            @assertEqual(0,faces(1,XI_MIN)%get_neighbor_element_l())
            @assertEqual(2,faces(1,XI_MAX)%get_neighbor_element_l())
            @assertEqual(0,faces(1,ETA_MIN)%get_neighbor_element_l())
            @assertEqual(4,faces(1,ETA_MAX)%get_neighbor_element_l())
            @assertEqual(0,faces(1,ZETA_MIN)%get_neighbor_element_l())
            @assertEqual(10,faces(1,ZETA_MAX)%get_neighbor_element_l())
        end associate
        
    end subroutine testMesh_indices_boundary
    !*******************************************************************************************************
    
    
    
    




    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !!
    !---------------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_E1_faces_ftype(self)
        class(test_mesh_linear),    intent(inout)   :: self
        
        integer(ik) :: ielem
        logical     :: isInterior
        
        
        associate ( faces => self%mesh%faces )
        
        ielem = 1

        !> XI_MIN
        isInterior = (faces(ielem,XI_MIN)%ftype == 0)
        @assertFalse(isInterior)
        
        !> XI_MAX
        isInterior = (faces(ielem,XI_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ETA_MIN
        isInterior = (faces(ielem,ETA_MIN)%ftype == 0)
        @assertFalse(isInterior)
        
        !> ETA_MAX
        isInterior = (faces(ielem,ETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ZETA_MIN
        isInterior = (faces(ielem,ZETA_MIN)%ftype == 0)
        @assertFalse(isInterior)
        
        !> ZETA_MAX
        isInterior = (faces(ielem,ZETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        
        
        end associate
    end subroutine testMesh_E1_faces_ftype
    !**********************************************************************************************************





    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !-----------------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_E2_faces_ftype(self)
        class(test_mesh_linear),    intent(inout)   :: self
        
        integer(ik) :: ielem
        logical     :: isInterior
        
        
        associate ( faces => self%mesh%faces )
        
        ielem = 2

        !> XI_MIN
        isInterior = (faces(ielem,XI_MIN)%ftype == 0)
        @assertTrue(isInterior)
        
        !> XI_MAX
        isInterior = (faces(ielem,XI_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ETA_MIN
        isInterior = (faces(ielem,ETA_MIN)%ftype == 0)
        @assertFalse(isInterior)
        
        !> ETA_MAX
        isInterior = (faces(ielem,ETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ZETA_MIN
        isInterior = (faces(ielem,ZETA_MIN)%ftype == 0)
        @assertFalse(isInterior)
        
        !> ZETA_MAX
        isInterior = (faces(ielem,ZETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        
        
        end associate
    end subroutine testMesh_E2_faces_ftype
    !*************************************************************************************************
    
    
    
    !>
    !!
    !!  @author Nathan A. Wukie
    !!
    !!
    !!
    !--------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh_E14_faces_ftype(self)
        class(test_mesh_linear),    intent(inout)   :: self
        
        integer(ik) :: ielem
        logical     :: isInterior
        
        
        associate ( faces => self%mesh%faces )
        
        ielem = 14

        !> XI_MIN
        isInterior = (faces(ielem,XI_MIN)%ftype == 0)
        @assertTrue(isInterior)
        
        !> XI_MAX
        isInterior = (faces(ielem,XI_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ETA_MIN
        isInterior = (faces(ielem,ETA_MIN)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ETA_MAX
        isInterior = (faces(ielem,ETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ZETA_MIN
        isInterior = (faces(ielem,ZETA_MIN)%ftype == 0)
        @assertTrue(isInterior)
        
        !> ZETA_MAX
        isInterior = (faces(ielem,ZETA_MAX)%ftype == 0)
        @assertTrue(isInterior)
        
        
        
        end associate
    end subroutine testMesh_E14_faces_ftype
    !***************************************************************************************************






    !>  Test that the routine mesh%get_comm_procs is returning all the correct processor ranks that have 
    !!  been set in self%ineighbor_proc
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/30/2016
    !!
    !!
    !----------------------------------------------------------------------------------------------------
    @Test
    subroutine testMesh__get_comm_procs(self)
        class(test_mesh_linear),    intent(inout)   :: self

        integer(ik),    allocatable :: comm_procs(:)

        !
        ! Initially, all processor ranks should be set to 1, since this is run in serial.
        ! So, we will manually set a few neighbor ranks to make sure they are getting detected and 
        ! returned correctly.
        !
        self%mesh%faces(14,XI_MIN)%ineighbor_proc   = 2
        self%mesh%faces(14,XI_MAX)%ineighbor_proc   = 3
        self%mesh%faces(14,ETA_MIN)%ineighbor_proc  = 4
        self%mesh%faces(14,ETA_MAX)%ineighbor_proc  = 5
        self%mesh%faces(14,ZETA_MIN)%ineighbor_proc = 6
        self%mesh%faces(14,ZETA_MAX)%ineighbor_proc = 0 ! Should not be added because this would indicate on-processor neighbor

        !
        ! set artificial global communication intialization so mesh%get_comm_procs will run.
        !
        self%mesh%global_comm_initialized = .true.


        !
        ! Call get_comm_procs. THIS IS BEING TESTED.
        !
        comm_procs = self%mesh%get_send_procs()


        !
        ! Test
        !
        @assertEqual([2,3,4,5,6],comm_procs)

    end subroutine testMesh__get_comm_procs
    !****************************************************************************************************
















end module test_mesh_linear_mod
