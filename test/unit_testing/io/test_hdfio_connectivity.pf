!> Test for reading an hdf grid. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine read_connectivity_hdf__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, IO_DESTINATION
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_hdfio,                  only: read_connectivity_hdf
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1E1M1.h5'
    integer(ik)                     :: ndomains
    type(domain_connectivity_t),   allocatable :: connectivities(:)
    

    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')
    
    !
    ! Create mesh file
    !
    call create_mesh_file("D1 E1 M1",filename)

    !
    ! Read and partition connectivity. THIS IS BEING TESTED.
    !
    call read_connectivity_hdf(filename,connectivities)

    
    ! Test number of domains
    ndomains = size(connectivities)
    @assertEqual(1,ndomains)


    ! Test domain indices
    @assertEqual(1,connectivities(1)%get_domain_index())


    ! Test connectivity data
    @assertEqual([1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], connectivities(1)%data(1)%data(:) )



    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')


    call delete_file(filename)

end subroutine read_connectivity_hdf__D1_E1_M1












!> Test for reading an hdf grid. D1_E27_M1 = One Domain, 27 Elements (3x3x3), Linear Mapping
@Test
subroutine read_connectivity_hdf__D1_E27_M1() 
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, THIRD, NFACES, IO_DESTINATION
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_hdfio,                  only: read_connectivity_hdf
    implicit none
    
    type(chidg_t)                       :: chidg
    character(100), parameter           :: filename = 'D1_E27_M1.h5'
    integer(ik)                         :: ndomains
    type(domain_connectivity_t),   allocatable :: connectivities(:)
    
    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')
    
    call create_mesh_file("D1 E27 M1",filename)

    !
    ! Read and partition connectivity. THIS IS BEING TESTED.
    !
    call read_connectivity_hdf(filename,connectivities)

    
    ! Test number of domains
    ndomains = size(connectivities)
    @assertEqual(1,ndomains)


    ! Test domain indices
    @assertEqual(1,connectivities(1)%get_domain_index())


    ! Test first couple element's connectivity data
    @assertEqual([1, 1, 1, 1, 2, 5, 6, 17, 18, 21, 22], connectivities(1)%data(1)%data(:) )
    @assertEqual([1, 2, 1, 2, 3, 6, 7, 18, 19, 22, 23], connectivities(1)%data(2)%data(:) )
    @assertEqual([1, 3, 1, 3, 4, 7, 8, 19, 20, 23, 24], connectivities(1)%data(3)%data(:) )
    

    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine read_connectivity_hdf__D1_E27_M1













! Test for reading an hdf grid. D2_E1_M1 = Two Domains, One Element, Linear Mapping
@Test
subroutine read_connectivity_hdf__D2_E1_M1() 
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, ONE, IO_DESTINATION
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_hdfio,                  only: read_connectivity_hdf
    implicit none
    
    type(chidg_t)                       :: chidg
    character(100), parameter           :: filename = 'D2_E1_M1.h5'
    integer(ik)                         :: ndomains
    type(domain_connectivity_t),   allocatable :: connectivities(:)
    
    IO_DESTINATION = 'file'

    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')
    

    call create_mesh_file("D2 E1 M1",filename)

    !
    ! Read and partition connectivity. THIS IS BEING TESTED.
    !
    call read_connectivity_hdf(filename,connectivities)

    
    ! Test number of domains
    ndomains = size(connectivities)
    @assertEqual(2,ndomains)


    ! Test domain indices
    @assertEqual(1,connectivities(1)%get_domain_index())
    @assertEqual(2,connectivities(2)%get_domain_index())




    ! Test connectivity data
    @assertEqual([1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], connectivities(1)%data(1)%data(:) )
    @assertEqual([2, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], connectivities(2)%data(1)%data(:) )



    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine read_connectivity_hdf__D2_E1_M1













!> Test for reading an hdf grid. D2_E27_M1 = Two Domains, 27 Elements (3x3x3), Linear Mapping
@Test
subroutine read_connectivity_hdf__D2_E27_M1() 
    use pfunit_mod
    use type_chidg,                 only: chidg_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, THIRD, NFACES, IO_DESTINATION
    use mod_test_utilities,         only: create_mesh_file
    use mod_file_utilities,         only: delete_file
    use mod_hdfio,                  only: read_connectivity_hdf
    implicit none
    
    type(chidg_t)                       :: chidg
    character(100), parameter           :: filename = 'D2_E27_M1.h5'
    integer(ik)                         :: ndomains
    type(domain_connectivity_t),   allocatable :: connectivities(:)
    
    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')
    

    call create_mesh_file("D2 E27 M1",filename)


    !
    ! Read and partition connectivity. THIS IS BEING TESTED.
    !
    call read_connectivity_hdf(filename,connectivities)

    
    ! Test number of domains
    ndomains = size(connectivities)
    @assertEqual(2,ndomains)


    ! Test domain indices
    @assertEqual(1,connectivities(1)%get_domain_index())
    @assertEqual(2,connectivities(2)%get_domain_index())


    ! Test first couple element's connectivity data
    @assertEqual([1, 1, 1, 1, 2, 5, 6, 17, 18, 21, 22], connectivities(1)%data(1)%data(:) )
    @assertEqual([1, 2, 1, 2, 3, 6, 7, 18, 19, 22, 23], connectivities(1)%data(2)%data(:) )
    @assertEqual([1, 3, 1, 3, 4, 7, 8, 19, 20, 23, 24], connectivities(1)%data(3)%data(:) )
    
    @assertEqual([2, 1, 1, 1, 2, 5, 6, 17, 18, 21, 22], connectivities(2)%data(1)%data(:) )
    @assertEqual([2, 2, 1, 2, 3, 6, 7, 18, 19, 22, 23], connectivities(2)%data(2)%data(:) )
    @assertEqual([2, 3, 1, 3, 4, 7, 8, 19, 20, 23, 24], connectivities(2)%data(3)%data(:) )


    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine read_connectivity_hdf__D2_E27_M1




