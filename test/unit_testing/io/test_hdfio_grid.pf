!> Test for reading an hdf grid. D1_E1_M1 = One Domain, One Element, Linear Mapping
@Test
subroutine testIO__read_grid_hdf__D1_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E1_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer(ik),    parameter       :: spacedim = 3
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 1
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    ! Initialize element mapping
    call chidg%start_up('core')
    

    !
    ! Create mesh file
    !
    call create_mesh_file("D1 E1 M1", filename)

    !
    ! Read grid and add domain to chidg
    !
    call chidg%read_grid(filename, spacedim)


    call chidg%set('Solution Order', integer_input=2)
    call chidg%initialize_solution_domains()



    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%ndomains())

    
    ! Test domain mapping
    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
    
    ! Test points
    ! This is for element with center at zero
    x = [ZERO,  ONE, ZERO,  ONE, ZERO,  ONE, ZERO, ONE]
    y = [ZERO, ZERO,  ONE,  ONE, ZERO, ZERO,  ONE, ONE]
    z = [ZERO, ZERO, ZERO, ZERO,  ONE,  ONE,  ONE, ONE]

    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
    
    !  Test nelem
    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
    
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)

end subroutine testIO__read_grid_hdf__D1_E1_M1












!> Test for reading an hdf grid. D1_E27_M1 = One Domain, 27 Elements (3x3x3), Linear Mapping
@Test
subroutine testIO__read_grid_hdf__D1_E27_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, THIRD, NFACES, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D1_E27_M1.h5'
    integer,        parameter       :: ndomains = 1
    integer,        parameter       :: spacedim = 3
    integer,        parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 27
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    integer(ik)                     :: ielem, iface
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'


    ! Initialize element mapping
    call chidg%start_up('core')
    
    !
    ! Create mesh file
    !
    call create_mesh_file("D1 E27 M1", filename)

    !
    ! Read grid
    !
    call chidg%read_grid(filename,spacedim)


    call chidg%set('Solution Order', integer_input=2)
    call chidg%initialize_solution_domains()

    
    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%ndomains())

    
    ! Test domain mapping
    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
    
    ! Test points
    x = [ZERO, THIRD, ZERO, THIRD, ZERO, THIRD, ZERO, THIRD]
    y = [ZERO, ZERO, THIRD, THIRD, ZERO, ZERO, THIRD, THIRD]
    z = [ZERO, ZERO, ZERO, ZERO, THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
    
    !  Test nelem
    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
    
    
    !  Test all elements have been initialized
    do ielem = 1,chidg%data%mesh(1)%nelem
        @assertTrue(chidg%data%mesh(1)%elems(ielem)%geomInitialized)
        
        do iface = 1,NFACES
            @assertTrue(chidg%data%mesh(1)%faces(ielem,iface)%geomInitialized)
        end do
    end do
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)
end subroutine testIO__read_grid_hdf__D1_E27_M1













! Test for reading an hdf grid. D2_E1_M1 = Two Domains, One Element, Linear Mapping
@Test
subroutine testIO__read_grid_hdf__D2_E1_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D2_E1_M1.h5'
    integer,        parameter       :: ndomains = 2
    integer(ik),    parameter       :: spacedim = 3
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 1
    integer(ik)                     :: idom
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    IO_DESTINATION = 'file'

    ! Initialize element mapping
    call chidg%start_up('core')
    
    !
    ! Create mesh file
    !
    call create_mesh_file("D2 E1 M1", filename)

    !
    ! Read grid
    !
    call chidg%read_grid(filename,spacedim)

    call chidg%set('Solution Order', integer_input=2)
    call chidg%initialize_solution_domains()



    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%ndomains())

    
    ! Test domain mapping
    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
    @assertEqual(nterms_c,chidg%data%mesh(2)%nterms_c)


    ! Test number of elements
    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
    @assertEqual(nelem,chidg%data%mesh(2)%nelem)


    ! Test points
    x = [ZERO, ONE, ZERO, ONE, ZERO, ONE, ZERO, ONE]
    y = [ZERO, ZERO, ONE, ONE, ZERO, ZERO, ONE, ONE]
    z = [ZERO, ZERO, ZERO, ZERO, ONE, ONE, ONE, ONE]
    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
    
    
    x = x + 1._8
    y = [ZERO, ZERO, ONE, ONE, ZERO, ZERO, ONE, ONE]
    z = [ZERO, ZERO, ZERO, ZERO, ONE, ONE, ONE, ONE]
    @assertEqual(x,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c3_,tol)
    

    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)
end subroutine testIO__read_grid_hdf__D2_E1_M1
















! Test for reading an hdf grid. D2_E27_M1 = Two Domains, One Element, Linear Mapping
@Test
subroutine testIO__read_grid_hdf__D2_E27_M1() 
    use pfunit_mod
    use type_chidg,             only: chidg_t
    use mod_kinds,              only: rk,ik
    use mod_constants,          only: ZERO, ONE, THIRD, IO_DESTINATION
    use mod_test_utilities,     only: create_mesh_file
    use mod_file_utilities,     only: delete_file
    use mod_grid,               only: compute_element_mappings
    implicit none
    
    type(chidg_t)                   :: chidg
    character(100), parameter       :: filename = 'D2_E27_M1.h5'
    integer,        parameter       :: ndomains = 2
    integer(ik),    parameter       :: spacedim = 3
    integer(ik),    parameter       :: nterms_c = 8
    integer,        parameter       :: nelem    = 27
    integer(ik)                     :: idom
    real(rk)                        :: x(8), y(8), z(8)
    real(rk)                        :: tol
    
    tol = 1.e-14_rk
    
    IO_DESTINATION = 'file'

    ! Initialize element mapping
    call chidg%start_up('core')
    
    !
    ! Create mesh file
    !
    call create_mesh_file("D2 E27 M1", filename)

    !
    ! Read grid
    !
    call chidg%read_grid(filename,spacedim)

    call chidg%set('Solution Order', integer_input=2)
    call chidg%initialize_solution_domains()



    ! Test number of allocated domains
    @assertEqual(ndomains,chidg%data%ndomains())

    
    ! Test domain mapping
    @assertEqual(nterms_c,chidg%data%mesh(1)%nterms_c)
    @assertEqual(nterms_c,chidg%data%mesh(2)%nterms_c)


    ! Test number of elements
    @assertEqual(nelem,chidg%data%mesh(1)%nelem)
    @assertEqual(nelem,chidg%data%mesh(2)%nelem)


    ! Test points
    x = [ZERO, THIRD, ZERO, THIRD, ZERO, THIRD, ZERO, THIRD]
    y = [ZERO, ZERO, THIRD, THIRD, ZERO, ZERO, THIRD, THIRD]
    z = [ZERO, ZERO, ZERO, ZERO, THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(1)%elems(1)%elem_pts(:)%c3_,tol)
    
    
    x = x + 1._8
    y = [ZERO, ZERO, THIRD, THIRD, ZERO, ZERO, THIRD, THIRD]
    z = [ZERO, ZERO, ZERO, ZERO, THIRD, THIRD, THIRD, THIRD]
    @assertEqual(x,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c1_,tol)
    @assertEqual(y,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c2_,tol)
    @assertEqual(z,chidg%data%mesh(2)%elems(1)%elem_pts(:)%c3_,tol)
    
    !
    ! Close ChiDG
    !
    call chidg%shut_down('core')

    call delete_file(filename)
end subroutine testIO__read_grid_hdf__D2_E27_M1














