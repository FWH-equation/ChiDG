@Test
subroutine test_fgmres_solve()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX, &
                                          IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use type_fgmres,                only: fgmres_t
    use precon_identity,            only: precon_identity_t

    use type_chidgMatrix
    use type_chidgVector

    use mod_testutils,              only: meshgen
    implicit none

    type(chidg_t)               :: chidg
    type(point_t),  allocatable :: nodes(:)
    type(domain_connectivity_t) :: connectivity

    real(rk)    :: tol
    integer(ik) :: nterms_c, nterms_s, idomain, spacedim


    tol      = 1.e-9_rk
    idomain  = 1
    spacedim = 3
    nterms_c = 8
    nterms_s = 1
    IO_DESTINATION = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%init('env')



    !
    ! Set ChiDG components
    !
    call chidg%set('time_scheme',       'steady')
    call chidg%set('nonlinear_solver',  'newton')
    call chidg%set('linear_solver',     'fgmres')
    call chidg%set('preconditioner',    'identity')


    !
    ! Get grid points
    !
    call meshgen('311',nodes,connectivity)


    !
    ! Initialize domain
    !
    call chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar')
    call chidg%initialize_solution_domains(nterms_s)
    call chidg%init('communication')
    call chidg%initialize_solution_solver()




    associate ( A => chidg%data%sdata%lhs, b => chidg%data%sdata%rhs, x => chidg%data%sdata%dq, M => chidg%preconditioner )
        ! Initialize blockmatrix data (A)
        !
        ! [4  3  0]
        ! [3  4 -1]
        ! [0 -1  4]
        !
        A%dom(1)%lblks(1,DIAG)%mat   = 4._rk
        A%dom(1)%lblks(1,XI_MAX)%mat = THREE

        A%dom(1)%lblks(2,XI_MIN)%mat = THREE
        A%dom(1)%lblks(2,DIAG)%mat   = 4._rk
        A%dom(1)%lblks(2,XI_MAX)%mat = -ONE

        A%dom(1)%lblks(3,XI_MIN)%mat = -ONE
        A%dom(1)%lblks(3,DIAG)%mat   = 4._rk




        ! Initialize blockvector data (b)
        !
        ! [ 24]
        ! [ 30]
        ! [-24]
        !
        b%dom(1)%lvecs(1)%vec = 24._rk
        b%dom(1)%lvecs(2)%vec = 30._rk
        b%dom(1)%lvecs(3)%vec = -24._rk

        

        !
        ! Finalize ChiDG initialization
        !
        call chidg%init('finalize')


        !
        ! Solve matrix system. Ax=b. TESTING
        !
        chidg%linear_solver%report = .false.  
        chidg%linear_solver%tol    = 1.e-13_rk
        call chidg%linear_solver%solve(A,x,b,M)



        ! Expecting solution
        !
        !     [ 3]
        ! x = [ 4]
        !     [-5]
        !
        @assertEqual(3._rk,x%dom(1)%lvecs(1)%vec,tol)
        @assertEqual(4._rk,x%dom(1)%lvecs(2)%vec,tol)
        @assertEqual(-5._rk,x%dom(1)%lvecs(3)%vec,tol)

    end associate


    !
    ! Close ChiDG interface
    !
    call chidg%close('core')

end subroutine test_fgmres_solve
