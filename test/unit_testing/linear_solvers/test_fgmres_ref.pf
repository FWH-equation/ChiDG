@Test
subroutine test_fgmres_ref_solve()
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX, &
                                          IO_DESTINATION

    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use type_fgmres,                only: fgmres_t

    use type_chidgMatrix
    use type_chidgVector,           only: chidgVector_t

    use mod_test_utilities,         only: create_mesh
    implicit none

    type(chidg_t)               :: chidg
    type(point_t),  allocatable :: nodes(:)
    type(domain_connectivity_t) :: connectivity

    type(chidgMatrix_t)         :: A
    type(chidgVector_t)         :: x, b
    type(fgmres_t)              :: linear_solver
    
    real(rk)    :: tol
    integer(ik) :: nterms_c, idomain, spacedim, imat, ielem, itime


    tol             = 1.e-9_rk
    idomain         = 1
    spacedim        = 3
    nterms_c        = 8
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG
    !
    call chidg%start_up('core')


    !
    ! Set ChiDG components
    !
    call chidg%set('Time Integrator',  'steady'  )
    call chidg%set('Nonlinear Solver', 'newton'  )
    call chidg%set('Linear Solver',    'fgmres'  )
    call chidg%set('Preconditioner',   'identity')


    !
    ! Get grid points
    !
    call create_mesh('211',nodes,connectivity)


    !
    ! Initialize domain
    !
    call chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'Scalar Advection')

    call chidg%set('Solution Order', integer_input=1)
    call chidg%initialize_solution_domains()
    call chidg%init('communication')
    call chidg%initialize_solution_solver()


    !
    ! Initialize data containers
    !
    call A%init(chidg%data%mesh,mtype='full')
    call x%init(chidg%data%mesh)
    call b%init(chidg%data%mesh)





    ! Initialize blockmatrix data (A)
    !
    ! [ 0  1]
    ! [-1  0]
    ! 
    ielem = 1
    itime = 1
    imat = A%dom(1)%lblks(ielem,itime)%loc(1,1)
    A%dom(1)%lblks(1,1)%data_(imat)%mat   = ZERO

    imat = A%dom(1)%lblks(ielem,itime)%loc(1,2)
    A%dom(1)%lblks(1,1)%data_(imat)%mat = ONE



    ielem = 2
    itime = 1
    imat = A%dom(1)%lblks(ielem,itime)%loc(1,1)
    A%dom(1)%lblks(ielem,itime)%data_(imat)%mat = -ONE

    imat = A%dom(1)%lblks(ielem,itime)%loc(1,2)
    A%dom(1)%lblks(ielem,itime)%data_(imat)%mat = ZERO




    ! Initialize blockvector data (b)
    !
    ! [ 1]
    ! [ 1]
    !
    b%dom(1)%vecs(1)%vec = ONE
    b%dom(1)%vecs(2)%vec = ONE


    !
    ! Finalize ChiDG initialization
    !
    call chidg%init('finalize')


    !
    ! Solve matrix system. Ax=b. TESTING
    !
    associate ( M => chidg%preconditioner )
    linear_solver%report = .false.  
    linear_solver%tol    = 1.e-13_rk
    call linear_solver%solve(A,x,b,M)
    end associate



    ! Expecting solution
    !
    !     [-1]
    ! x = [ 1]
    !
    @assertEqual(-ONE,x%dom(1)%vecs(1)%vec,tol)
    @assertEqual(ONE,x%dom(1)%vecs(2)%vec,tol)





    !
    ! Close ChiDG interface
    !
    call chidg%shut_down('core')





end subroutine test_fgmres_ref_solve
