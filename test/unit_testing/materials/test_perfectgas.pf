@Test
subroutine test_perfectgas_pressure()
    use pfunit_mod
    use mod_kinds,      only: rk, ik
    use perfect_gas,    only: perfect_gas_t
    use DNAD_D
    

    type(perfect_gas_t)                     :: fluid
    type(AD_D),         dimension(8)        :: rho, rhou, rhov, rhow, rhoE
    type(AD_D), allocatable, dimension(:)   ::p
    real(rk),   allocatable, dimension(:)   :: pref
    real(rk)                                :: tol

    tol = 1.e-13_rk

    do i = 1,size(rho)
        allocate(rho(i)%xp_ad_(3))
        allocate(rhou(i)%xp_ad_(3))
        allocate(rhov(i)%xp_ad_(3))
        allocate(rhow(i)%xp_ad_(3))
        allocate(rhoE(i)%xp_ad_(3))
    end do


    rho  = [0.9_rk, 1.0_rk, 1.1_rk, 1.2_rk, 1.3_rk, 1.4_rk, 1.5_rk, 1.6_rk]
    rhou = [1.0_rk, 2.0_rk, 3.0_rk, 4.0_rk, 5.0_rk, 6.0_rk, 7.0_rk, 8.0_rk]
    rhov = [0.1_rk, 0.2_rk, 0.3_rk, 0.4_rk, 0.5_rk, 0.6_rk, 0.7_rk, 0.8_rk]
    rhow = [0.5_rk, 0.4_rk, 0.3_rk, 0.2_rk, 0.1_rk, 0.0_rk, -0.9_rk, -1.0_rk]
    rhoE = [10._rk, 20._rk, 30._rk, 40._rk, 50._rk, 60._rk, 70._rk, 80._rk]


    ! known pressure values for the above data
    pref    = [3.72_rk, 7.16_rk, 10.3309090909090909_rk, 13.3_rk, 16.11384615384620_rk, 18.8057142857143_rk, 21.293333333333333_rk, 23.795_rk]



    !
    ! Test fluid pressure calculation
    !
    call fluid%compute_pressure(rho,rhou,rhov,rhow,rhoE,p)


    @assertEqual(pref, p(:)%x_ad_, tol)


end subroutine
