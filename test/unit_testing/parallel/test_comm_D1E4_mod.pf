module test_comm_D1E4_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: XI_MIN, XI_MAX, DIAG, BOUNDARY, IO_DESTINATION, &
                                          ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN

    use type_chidg,                 only: chidg_t
    use type_chidgMatrix,           only: chidgMatrix_t
    use type_chidgVector,           only: chidgVector_t
    use type_partition,             only: partition_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_hdfio,                  only: read_connectivity_hdf
    use mod_partitioners,           only: partition_connectivity, send_partitions, recv_partition
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use operator_chidg_dot,         only: dot
    use operator_chidg_mv,          only: chidg_mv

    use mpi_f08,                    only: MPI_Barrier, MPI_COMM_WORLD, MPI_COMM
    use pfunit_mod
    implicit none



    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) :: test_comm_D1E4

        type(chidg_t)   :: chidg

        integer(ik)     :: nterms_s = 27
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure       :: setUp
        procedure       :: tearDown
    end type test_comm_D1E4
    !******************************************************************




contains

    !>  This test reads a 4x1x1 element grid using 1, 2, 3, and 4 processors and tests communication data.
    !!
    !!  Using 1 processor, all communication(face neighbors) should be local. Using 4 processors, all communication
    !!  should occur globally, across processors.
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/21/2016
    !!
    !-----------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_comm_D1E4), intent(inout) :: this

!        type(domain_connectivity_t),    allocatable :: connectivities(:)
!        type(partition_t),              allocatable :: partitions(:)
!        type(partition_t)                           :: partition


        character(len=:),   allocatable :: gridfile
        integer(ik)                     :: iread, spacedim, ierr, ielem
        real(rk)                        :: initial_vals(this%nterms_s)

        
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call this%chidg%init('env',this%ChiDG_COMM)


        IO_DESTINATION = 'file'
        gridfile       = 'D1_E4_M1.h5'
        spacedim       = 3




!        !
!        ! Read connectivities, partition, distribute
!        !
!        if ( IRANK == GLOBAL_MASTER ) then
!            call read_connectivity_hdf(gridfile,connectivities)
!
!            call partition_connectivity(connectivities, partitions)
!
!            call send_partitions(partitions,this%ChiDG_COMM)
!        end if
!
!
!        !
!        ! Receive partition from GLOBAL_MASTER
!        !
!        call recv_partition(partition,this%ChiDG_COMM)


        !
        ! Read partition data: grid, boundary conditions
        !
        !call this%chidg%read_grid(gridfile, spacedim, partition)
        !call this%chidg%read_boundaryconditions(gridfile, partition)
        call this%chidg%read_grid(gridfile, spacedim)
        call this%chidg%read_boundaryconditions(gridfile)


        !
        ! Initialization
        !
        call this%chidg%initialize_solution_domains(this%nterms_s)
        call this%chidg%init('communication',this%ChiDG_COMM)
        call this%chidg%initialize_solution_solver()


        !
        ! Initialize solution vector
        !
        initial_vals = 1.2_rk
        do ielem = 1,this%chidg%data%mesh(1)%nelem
            call this%chidg%data%sdata%q%dom(1)%vecs(ielem)%setvar(1,initial_vals)
        end do


    end subroutine setUp




    subroutine tearDown(this)
        class(test_comm_D1E4), intent(inout) :: this

        call this%chidg%close('core')

    end subroutine tearDown
    !***********************************************************************************************









    !>  Test the parallel computation of the chidgVector norm. 
    !!  This tests the routine: chidgVector%norm_comm
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !---------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidgvector__norm_comm(self)
        class(test_comm_D1E4), intent(inout) :: self

        integer(ik)     :: nelem
        real(rk)        :: computed_norm, expected_norm

        IRANK = self%getProcessRank()


        !
        ! Compute vector norm across processors. THIS IS BEING TESTED
        !
        computed_norm = self%chidg%data%sdata%q%norm(self%ChiDG_COMM)

        nelem = 4
        expected_norm = (1.2_rk**TWO) * self%nterms_s * nelem
        expected_norm = sqrt(expected_norm)

        
        @assertEqual(expected_norm,computed_norm)

    end subroutine chidgvector__norm_comm
    !******************************************************************************************











    !>  Test the parallel computation of the chidgVector norm. 
    !!  This tests the routine: chidgVector%norm_comm
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !---------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidgvector__dot_comm(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidgVector_t) :: a, b
        integer(ik)         :: nelem
        real(rk)            :: computed_dot, expected_dot

        IRANK = self%getProcessRank()

        ! Create two ChiDG Vectors
        a = self%chidg%data%sdata%q
        b = self%chidg%data%sdata%q


        ! Compute vector dot-product across processors. THIS IS BEING TESTED
        computed_dot = dot(a,b,self%ChiDG_COMM)


        ! Compute expected result
        nelem = 4
        expected_dot = (1.2_rk*1.2_rk) * self%nterms_s * nelem



        @assertEqual(expected_dot,computed_dot,1.e-12_rk)

    end subroutine chidgvector__dot_comm
    !******************************************************************************************














    !>  Test that storage has been allocated in the chidgVector for receiving data from neighbor
    !!  processors. For each processor:
    !!      - check the size of the receiving storate communicator. a%recv%comm
    !!      - check that the parent element indices of the element to be received is correct
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/30/3016
    !!
    !!
    !!
    !-------------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine chidgvector__init_recv(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidgVector_t) :: a

        IRANK = self%getProcessRank()
        NRANK = self%getNumProcessesRequested()

        ! Copy a ChiDG Vector
        a = self%chidg%data%sdata%q


        if (NRANK == 1) then

            @assertEqual(0,size(a%recv%comm))





        else if (NRANK == 2) then

            if (IRANK == 0) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(3,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
                
            else if (IRANK == 1) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            end if







        else if (NRANK == 3) then

            if (IRANK == 0) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(3,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 1) then
                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(2)%dom))
                @assertEqual(1,size(a%recv%comm(2)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertequal(4,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 2) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))

                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            end if






        else if (NRANK == 4) then

            if (IRANK == 0) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 1) then
                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(2)%dom))
                @assertEqual(1,size(a%recv%comm(2)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertequal(3,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 2) then
                @assertEqual(2,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(2,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%dparent_l())
                @assertequal(4,a%recv%comm(2)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(2)%dom(1)%vecs(1)%eparent_l())
            else if (IRANK == 3) then
                @assertEqual(1,size(a%recv%comm))

                @assertEqual(1,size(a%recv%comm(1)%dom))
                @assertEqual(1,size(a%recv%comm(1)%dom(1)%vecs))
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%dparent_l())
                @assertequal(3,a%recv%comm(1)%dom(1)%vecs(1)%eparent_g())
                @assertequal(1,a%recv%comm(1)%dom(1)%vecs(1)%eparent_l())
            end if





        end if

    end subroutine chidgvector__init_recv
    !********************************************************************************************












    !>  Test the parallel computation of the chidg matrix-vector product, chidg_mv.
    !!  This tests the routine: chidg_mv(A,x)
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/1/2016
    !!
    !---------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4])
    subroutine parallel_chidg_mv(self)
        class(test_comm_D1E4), intent(inout) :: self

        type(chidgMatrix_t) :: A
        type(chidgVector_t) :: x, b
        integer(ik)         :: nelem
        real(rk)            :: computed_dot, expected_dot

        IRANK = self%getProcessRank()

        ! Create chidgMatrix and two chidgVectors
        A = self%chidg%data%sdata%lhs
        x = self%chidg%data%sdata%q
        b = self%chidg%data%sdata%q


        ! Initialize with some data
        if (NRANK == 1) then

            ! element 1
            A%dom(1)%lblks(1,DIAG)%mat   = ONE
            A%dom(1)%lblks(1,XI_MAX)%mat = FIVE
            x%dom(1)%vecs(1)%vec         = 11._rk

            ! element 2
            A%dom(1)%lblks(2,XI_MIN)%mat = EIGHT
            A%dom(1)%lblks(2,DIAG)%mat   = TWO
            A%dom(1)%lblks(2,XI_MAX)%mat = SIX
            x%dom(1)%vecs(2)%vec         = 12._rk

            ! element 3
            A%dom(1)%lblks(3,XI_MIN)%mat = NINE
            A%dom(1)%lblks(3,DIAG)%mat   = THREE
            A%dom(1)%lblks(3,XI_MAX)%mat = SEVEN
            x%dom(1)%vecs(3)%vec         = 13._rk
            
            ! element 4
            A%dom(1)%lblks(4,XI_MIN)%mat = TEN
            A%dom(1)%lblks(4,DIAG)%mat   = FOUR
            x%dom(1)%vecs(4)%vec         = 14._rk


        else if (NRANK == 2) then

            if (IRANK == 0) then
                ! element 1
                A%dom(1)%lblks(1,DIAG)%mat   = ONE
                A%dom(1)%lblks(1,XI_MAX)%mat = FIVE
                x%dom(1)%vecs(1)%vec         = 11._rk

                ! element 2
                A%dom(1)%lblks(2,XI_MIN)%mat = EIGHT
                A%dom(1)%lblks(2,DIAG)%mat   = TWO
                A%dom(1)%lblks(2,XI_MAX)%mat = SIX
                x%dom(1)%vecs(2)%vec         = 12._rk



            else if (IRANK == 1) then
                ! element 3
                A%dom(1)%lblks(1,XI_MIN)%mat = NINE
                A%dom(1)%lblks(1,DIAG)%mat   = THREE
                A%dom(1)%lblks(1,XI_MAX)%mat = SEVEN
                x%dom(1)%vecs(1)%vec         = 13._rk
                
                ! element 4
                A%dom(1)%lblks(2,XI_MIN)%mat = TEN
                A%dom(1)%lblks(2,DIAG)%mat   = FOUR
                x%dom(1)%vecs(2)%vec         = 14._rk

            end if


        else if (NRANK == 3) then

            if (IRANK == 0) then
                ! element 4
                A%dom(1)%lblks(1,XI_MIN)%mat = TEN
                A%dom(1)%lblks(1,DIAG)%mat   = FOUR
                x%dom(1)%vecs(1)%vec         = 14._rk

            else if (IRANK == 1) then
                ! element 2
                A%dom(1)%lblks(1,XI_MIN)%mat = EIGHT
                A%dom(1)%lblks(1,DIAG)%mat   = TWO
                A%dom(1)%lblks(1,XI_MAX)%mat = SIX
                x%dom(1)%vecs(1)%vec         = 12._rk

                ! element 3
                A%dom(1)%lblks(2,XI_MIN)%mat = NINE
                A%dom(1)%lblks(2,DIAG)%mat   = THREE
                A%dom(1)%lblks(2,XI_MAX)%mat = SEVEN
                x%dom(1)%vecs(2)%vec         = 13._rk
                
            else if (IRANK == 2) then
                ! element 1
                A%dom(1)%lblks(1,DIAG)%mat   = ONE
                A%dom(1)%lblks(1,XI_MAX)%mat = FIVE
                x%dom(1)%vecs(1)%vec         = 11._rk

            end if


        else if (NRANK == 4) then

            if (IRANK == 0) then
                ! element 1
                A%dom(1)%lblks(1,DIAG)%mat   = ONE
                A%dom(1)%lblks(1,XI_MAX)%mat = FIVE
                x%dom(1)%vecs(1)%vec         = 11._rk

            else if (IRANK == 1) then

                ! element 2
                A%dom(1)%lblks(1,XI_MIN)%mat = EIGHT
                A%dom(1)%lblks(1,DIAG)%mat   = TWO
                A%dom(1)%lblks(1,XI_MAX)%mat = SIX
                x%dom(1)%vecs(1)%vec         = 12._rk



            else if (IRANK == 2) then
                ! element 3
                A%dom(1)%lblks(1,XI_MIN)%mat = NINE
                A%dom(1)%lblks(1,DIAG)%mat   = THREE
                A%dom(1)%lblks(1,XI_MAX)%mat = SEVEN
                x%dom(1)%vecs(1)%vec         = 13._rk

            else if (IRANK == 3) then
                
                ! element 4
                A%dom(1)%lblks(1,XI_MIN)%mat = TEN
                A%dom(1)%lblks(1,DIAG)%mat   = FOUR
                x%dom(1)%vecs(1)%vec         = 14._rk

            end if


        end if





        !
        ! Compute vector dot-product across processors. THIS IS BEING TESTED
        !
        b = chidg_mv(A,x)






        if (NRANK == 1) then

            @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
            @assertEqual(5130._rk,  b%dom(1)%vecs(2)%vec)
            @assertEqual(6615._rk,  b%dom(1)%vecs(3)%vec)
            @assertEqual(5022._rk,  b%dom(1)%vecs(4)%vec)


        else if (NRANK == 2) then

            if (IRANK == 0) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(5130._rk,  b%dom(1)%vecs(2)%vec)

            else if (IRANK == 1) then
                @assertEqual(6615._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(5022._rk,  b%dom(1)%vecs(2)%vec)

            end if


        else if (NRANK == 3) then

            if (IRANK == 0) then
                @assertEqual(5022._rk,  b%dom(1)%vecs(1)%vec)

            else if (IRANK == 1) then
                @assertEqual(5130._rk,  b%dom(1)%vecs(1)%vec)
                @assertEqual(6615._rk,  b%dom(1)%vecs(2)%vec)

            else if (IRANK == 2) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)

            end if


        else if (NRANK == 4) then

            if (IRANK == 0) then
                @assertEqual(1917._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 1) then
                @assertEqual(5130._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 2) then
                @assertEqual(6615._rk,  b%dom(1)%vecs(1)%vec)
            else if (IRANK == 3) then
                @assertEqual(5022._rk,  b%dom(1)%vecs(1)%vec)
            end if

        end if



    end subroutine parallel_chidg_mv
    !******************************************************************************************





























end module test_comm_D1E4_mod
