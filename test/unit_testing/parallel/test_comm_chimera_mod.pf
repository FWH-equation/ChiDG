module test_comm_chimera_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: XI_MIN, XI_MAX, DIAG, BOUNDARY, IO_DESTINATION, &
                                          ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN

    use type_chidg,                 only: chidg_t
    use type_chidgMatrix,           only: chidgMatrix_t
    use type_chidgVector,           only: chidgVector_t
    use type_partition,             only: partition_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_hdfio,                  only: read_connectivity_hdf
    use mod_partitioners,           only: partition_connectivity, send_partitions, recv_partition
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER

    use mpi_f08,                    only: MPI_Barrier, MPI_COMM_WORLD, MPI_COMM
    use pfunit_mod
    implicit none



    !>
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !------------------------------------------------------------------
    @TestCase
    type, extends(MpiTestCase) :: test_comm_chimera

        type(chidg_t)   :: chidg

        integer(ik)     :: nterms_s = 27
        type(mpi_comm)  :: ChiDG_COMM

    contains
        procedure       :: setUp
        procedure       :: tearDown
    end type test_comm_chimera
    !******************************************************************




contains

    !>  This test reads two, 2x2x2 element domains that are overlapping to test the chimear communication
    !!
    !!  Overlapping cubes. Each cube is 2x2x2 elements. Only one element of overlap
    !!
    !!    |--------|-|---------|
    !!    |        | |         |
    !!    |        | |         |
    !!    |        | |         |
    !!    |--------|-|---------|
    !!
    !!
    !!
    !!
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   7/12/2016
    !!
    !-----------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_comm_chimera), intent(inout) :: this

        type(domain_connectivity_t),    allocatable :: connectivities(:)
        type(partition_t),              allocatable :: partitions(:)
        type(partition_t)                           :: partition


        character(len=:),   allocatable :: gridfile
        integer(ik)                     :: iread, spacedim, ierr, ielem
        real(rk)                        :: initial_vals(this%nterms_s)

        
        IRANK                   = this%getProcessRank()
        NRANK                   = this%getNumProcessesRequested()
        this%ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call this%chidg%init('env',this%ChiDG_COMM)


        gridfile       = 'D2_E8_M1_overlapping_matching.h5'
        IO_DESTINATION = 'file'
        spacedim       = 3




        !
        ! Read connectivities, partition, distribute
        !
        if ( IRANK == GLOBAL_MASTER ) then
            call read_connectivity_hdf(gridfile,connectivities)

            call partition_connectivity(connectivities, partitions)

            call send_partitions(partitions,this%ChiDG_COMM)
        end if


        !
        ! Receive partition from GLOBAL_MASTER
        !
        call recv_partition(partition,this%ChiDG_COMM)


        !
        ! Read partition data: grid, boundary conditions
        !
        call this%chidg%read_grid(gridfile, spacedim, partition)
        call this%chidg%read_boundaryconditions(gridfile, partition)


        !
        ! Initialization
        !
        call this%chidg%initialize_solution_domains(this%nterms_s)
        call this%chidg%init('communication',this%ChiDG_COMM)
        call this%chidg%init('chimera',this%ChiDG_COMM)
!        call this%chidg%initialize_solution_solver()


    end subroutine setUp




    subroutine tearDown(this)
        class(test_comm_chimera), intent(inout) :: this

        call this%chidg%close('core')

    end subroutine tearDown
    !***********************************************************************************************







    !>  Test the parallel computation of the chidgVector norm. 
    !!  This tests the routine: chidgVector%norm_comm
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/23/2016
    !!
    !---------------------------------------------------------------------------------------
    @Test(npes=[1,2,3,4,5,6,7])
    subroutine detect_chimera_donors_comm(self)
        class(test_comm_chimera), intent(inout) :: self


        IRANK = self%getProcessRank()

        @assertTrue(.true.)

    end subroutine detect_chimera_donors_comm
    !******************************************************************************************


















end module test_comm_chimera_mod
