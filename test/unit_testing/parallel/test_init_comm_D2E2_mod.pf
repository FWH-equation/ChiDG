module test_init_comm_D2E2_mod
    use mod_kinds,                  only: ik
    use mod_constants,              only: XI_MIN, XI_MAX, BOUNDARY, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use mpi_f08,                    only: MPI_COMM
    use pfunit_mod
    implicit none





contains

    !>  This test reads two 2x1x1 element grids using 1, 2, and 4 processors and tests communication data.
    !!
    !!  Using 1 processor, all communication(face neighbors) should be local. Using 4 processors, all communication
    !!  should occur globally, across processors. Here, we just check all the indices defining the communication
    !!  for the different cases, npes=[1, 2, 4].
    !!
    !!  @author Nathan A. Wukie (AFRL)
    !!  @date   6/22/2016
    !!
    !-----------------------------------------------------------------------------------
    @Test(npes=[1,2,4])
    subroutine test_init_comm_D2E2(this)
        class(MpiTestMethod), intent(inout) :: this

        type(chidg_t)                               :: chidg
        type(mpi_comm)                              :: ChiDG_COMM

        integer(ik)                     :: iread, spacedim, ierr, nterms_s
        character(len=:), allocatable   :: gridfile

        
        IRANK              = this%getProcessRank()
        NRANK              = this%getNumProcessesRequested()
        ChiDG_COMM%mpi_val = this%getMpiCommunicator()


        call chidg%init('env',ChiDG_COMM)


        IO_DESTINATION = 'file'
        gridfile       = 'D2_E2_M1.h5'
        nterms_s       = 27
        spacedim       = 3


        !
        ! Read partition data: grid, boundary conditions
        !
        call chidg%read_grid(gridfile, spacedim)
        call chidg%read_boundaryconditions(gridfile)


        !
        ! Initialization
        !
        call chidg%initialize_solution_domains(nterms_s)
        call chidg%init('communication',ChiDG_COMM)


        !
        ! Check communication data. proc, neighbor indices, etc.
        !
        if ( NRANK == 1 ) then
            ! Domain 1, Element 1
            @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MIN)%ftype )

            @assertEqual(0, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_proc)
            @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_l)
            @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_g)
            @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_l)
            @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_g)

            ! Domain 1, Element 2
            @assertEqual(0, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_proc)
            @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_l)
            @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_g)
            @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_l)
            @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_g)

            @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(2,XI_MAX)%ftype )



            ! Domain 2, Element 1
            @assertEqual(BOUNDARY, chidg%data%mesh(2)%faces(1,XI_MIN)%ftype )

            @assertEqual(0, chidg%data%mesh(2)%faces(1,XI_MAX)%ineighbor_proc)
            @assertEqual(2, chidg%data%mesh(2)%faces(1,XI_MAX)%ineighbor_domain_l)
            @assertEqual(2, chidg%data%mesh(2)%faces(1,XI_MAX)%ineighbor_domain_g)
            @assertEqual(2, chidg%data%mesh(2)%faces(1,XI_MAX)%ineighbor_element_l)
            @assertEqual(2, chidg%data%mesh(2)%faces(1,XI_MAX)%ineighbor_element_g)

            ! Domain 2, Element 2
            @assertEqual(0, chidg%data%mesh(2)%faces(2,XI_MIN)%ineighbor_proc)
            @assertEqual(2, chidg%data%mesh(2)%faces(2,XI_MIN)%ineighbor_domain_l)
            @assertEqual(2, chidg%data%mesh(2)%faces(2,XI_MIN)%ineighbor_domain_g)
            @assertEqual(1, chidg%data%mesh(2)%faces(2,XI_MIN)%ineighbor_element_l)
            @assertEqual(1, chidg%data%mesh(2)%faces(2,XI_MIN)%ineighbor_element_g)

            @assertEqual(BOUNDARY, chidg%data%mesh(2)%faces(2,XI_MAX)%ftype )
        end if


        if ( NRANK == 2 ) then


            if ( IRANK == 0 ) then

                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(0, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 2, Element 2
                @assertEqual(0, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(2,XI_MAX)%ftype )


            else if ( IRANK == 1 ) then

                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_g)

                ! Domain 1, Element 2
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(2,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(2,XI_MAX)%ftype )

            end if

        end if



        if ( NRANK == 4 ) then
            if ( IRANK == 0 ) then
                ! Domain 2, Element 2
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MAX)%ftype )

            else if ( IRANK == 1 ) then
                ! Domain 2, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MIN)%ftype )
                
                @assertEqual(0, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_g)


            else if ( IRANK == 2 ) then
                ! Domain 1, Element 1
                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MIN)%ftype )

                @assertEqual(3, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_l)
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MAX)%ineighbor_element_g)


            else if ( IRANK == 3 ) then
                ! Domain 1, Element 2
                @assertEqual(2, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_proc)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_domain_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_domain_g)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_element_l)
                @assertEqual(1, chidg%data%mesh(1)%faces(1,XI_MIN)%ineighbor_element_g)

                @assertEqual(BOUNDARY, chidg%data%mesh(1)%faces(1,XI_MAX)%ftype )

            end if



        end if




        call chidg%close('core')


    end subroutine test_init_comm_D2E2
    !******************************************************************************************















end module test_init_comm_D2E2_mod
