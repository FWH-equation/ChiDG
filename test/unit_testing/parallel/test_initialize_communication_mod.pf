module test_initialize_communication_mod
    use type_chidg,                 only: chidg_t
    use type_partition,             only: partition_t
    use type_domain_connectivity,   only: domain_connectivity_t

    use mod_kinds,                  only: ik
    use mod_hdfio,                  only: read_connectivity_hdf
    use mod_partitioners,           only: partition_connectivity, send_partitions, recv_partition
    use mod_chidg_mpi,              only: IRANK, NRANK, GLOBAL_MASTER
    use mpi_f08,                    only: MPI_Barrier, MPI_COMM_WORLD
    use pfunit_mod
    implicit none
!    include 'mpif.h'




!    !@testCase(npes=[1,2])
!    @TestCase
!    type, extends(MpiTestCase) :: mpi_test
!
!    end type mpi_test
!






contains

@Test(npes=[1,2])
    subroutine test_initialize_communication_2x1x1(this)
        !class(mpi_test), intent(inout) :: this
        class(MpiTestMethod), intent(inout) :: this

        type(chidg_t)                               :: chidg
        type(domain_connectivity_t),    allocatable :: connectivities(:)
        type(partition_t),              allocatable :: partitions(:)
        type(partition_t)                           :: partition

        integer(ik)                     :: iread, spacedim, ierr, nterms_s
        character(len=:), allocatable   :: gridfile

        
        IRANK = this%getProcessRank()
        NRANK = this%getNumProcessesRequested()


        print*, IRANK, NRANK

        call chidg%init('env')


        gridfile = 'D2_E1_M1.h5'
        nterms_s = 27
        spacedim = 3


        if ( IRANK == GLOBAL_MASTER ) then
            call read_connectivity_hdf(gridfile,connectivities)

            call partition_connectivity(connectivities, partitions)

            call send_partitions(partitions)
        end if




        !
        ! Receive partition from GLOBAL_MASTER
        !
        call recv_partition(partition)





        do iread = 0,NRANK-1
            if ( iread == IRANK ) then
                call chidg%read_grid(gridfile, spacedim, partition)
                call chidg%read_boundaryconditions(gridfile, partition)
            end if

            call MPI_Barrier(MPI_COMM_WORLD,ierr)  ! sync to prevent simultaneous file access
        end do







!        call chidg%initialize_solution_domains(nterms_s)
!        call chidg%init('communication')
!        !call chidg%init('chimera')
!        !call chidg%initialize_solution_solver()
!
!
!
!
!
!        call chidg%close('core')
!

    end subroutine test_initialize_communication_2x1x1















end module test_initialize_communication_mod
