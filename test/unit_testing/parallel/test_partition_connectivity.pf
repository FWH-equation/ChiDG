@Test
subroutine test_partition_connectivity__onedomain_twopartitions()
    use pfunit_mod
    use mod_kinds,                  only: rk
    use mod_partitioners,           only: partition_connectivity
    use type_domain_connectivity,   only: domain_connectivity_t
    use type_partition,             only: partition_t
    use type_chidg,                 only: chidg_t
    use mod_chidg_mpi,              only: NRANK
    implicit none

    type(chidg_t)                               :: chidg
    type(domain_connectivity_t),    allocatable :: connectivities(:)
    real(rk),                       allocatable :: weights(:)
    type(partition_t),              allocatable :: partitions(:)
    integer :: ielem, nelem

    ! Two partitions
    NRANK = 2


    call chidg%start_up('core')



    ! One domain
    allocate(connectivities(1))


    !
    ! Initialize connectivity storage
    !
    call connectivities(1)%init('test domain',3,16)


    
    !
    ! Assemble connectivities
    !
    connectivities(1)%data(1)%data = [1,1,1, 1, 2, 6, 5,  9, 10, 14, 13]
    connectivities(1)%data(2)%data = [1,2,1, 2, 3, 7, 6, 11, 10, 15, 14]
    connectivities(1)%data(3)%data = [1,3,1, 3, 4, 8, 7, 12, 11, 16, 15]


    
    !
    ! Partition connectivities. THIS IS BEING TESTED
    !
    call partition_connectivity(connectivities, weights, partitions)




    ! Check domain index in partition connectivity
    @assertEqual(1, partitions(1)%connectivities(1)%get_domain_index() )


    ! The entire connectivity data should be included in partition 1
    @assertEqual([1,1,1, 1, 2, 6, 5,  9, 10, 14, 13], partitions(1)%connectivities(1)%data(1)%data )

    ! Test element owner partition indices
    @assertEqual(0, partitions(1)%connectivities(1)%get_element_partition(1) )


    ! The entire connectivity data should be included in partition 2
    @assertEqual([1,2,1, 2, 3, 7, 6, 11, 10, 15, 14], partitions(2)%connectivities(1)%data(1)%data )
    @assertEqual([1,3,1, 3, 4, 8, 7, 12, 11, 16, 15], partitions(2)%connectivities(1)%data(2)%data )

    ! Test element owner partition indices
    @assertEqual(1, partitions(2)%connectivities(1)%get_element_partition(1))
    @assertEqual(1, partitions(2)%connectivities(1)%get_element_partition(2))

end subroutine test_partition_connectivity__onedomain_twopartitions













@Test
subroutine test_partition_connectivity__twodomains_twopartitions()
    use pfunit_mod
    use mod_kinds,                  only: rk
    use mod_partitioners,           only: partition_connectivity
    use type_domain_connectivity,   only: domain_connectivity_t
    use type_partition,             only: partition_t
    use mod_chidg_mpi,              only: NRANK
    implicit none

    type(domain_connectivity_t),    allocatable :: connectivities(:)
    real(rk),                       allocatable :: weights(:)
    type(partition_t),              allocatable :: partitions(:)
    integer :: ielem, nelem


    ! Two parititions
    NRANK = 2

    ! Two domains
    allocate(connectivities(2))

    !
    ! Initialize connectivity storage
    !
    call connectivities(1)%init('test domain one',2,12)
    call connectivities(2)%init('test domain two',3,16)


    
    !
    ! Assemble connectivities
    !
    connectivities(1)%data(1)%data = [1,1,1, 1, 2, 5, 4, 7, 8, 11, 10]
    connectivities(1)%data(2)%data = [1,2,1, 2, 3, 6, 5, 8, 9, 12, 11]


    connectivities(2)%data(1)%data = [2,1,1, 1, 2, 6, 5,  9, 10, 14, 13]
    connectivities(2)%data(2)%data = [2,2,1, 2, 3, 7, 6, 11, 10, 15, 14]
    connectivities(2)%data(3)%data = [2,3,1, 3, 4, 8, 7, 12, 11, 16, 15]


    
    !
    ! Partition connectivities. THIS IS BEING TESTED
    !
    call partition_connectivity(connectivities, weights, partitions)





    ! Check that all the elements from domain 1, are on paritition 1
    @assertEqual(1, partitions(1)%connectivities(1)%get_domain_index() )
    @assertEqual([1,1,1, 1, 2, 5, 4, 7, 8, 11, 10], partitions(1)%connectivities(1)%data(1)%data )
    @assertEqual([1,2,1, 2, 3, 6, 5, 8, 9, 12, 11], partitions(1)%connectivities(1)%data(2)%data )

    ! Check that all elements have correct partition rank
    @assertEqual(0, partitions(1)%connectivities(1)%get_element_partition(1) )
    @assertEqual(0, partitions(1)%connectivities(1)%get_element_partition(2) )




    ! Check that all the elements from domain 2, are on paritition 2
    @assertEqual(2, partitions(2)%connectivities(1)%get_domain_index() )
    @assertEqual([2,1,1, 1, 2, 6, 5,  9, 10, 14, 13], partitions(2)%connectivities(1)%data(1)%data )
    @assertEqual([2,2,1, 2, 3, 7, 6, 11, 10, 15, 14], partitions(2)%connectivities(1)%data(2)%data )
    @assertEqual([2,3,1, 3, 4, 8, 7, 12, 11, 16, 15], partitions(2)%connectivities(1)%data(3)%data )

    ! Check that all elements have correct partition rank
    @assertEqual(1, partitions(2)%connectivities(1)%get_element_partition(1) )
    @assertEqual(1, partitions(2)%connectivities(1)%get_element_partition(2) )
    @assertEqual(1, partitions(2)%connectivities(1)%get_element_partition(3) )


end subroutine test_partition_connectivity__twodomains_twopartitions








