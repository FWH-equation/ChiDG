!-------------------------------------------------
!   Test legendre_val - 1D - against analytical solutions
!-------------------------------------------------

@Test
subroutine test_legendre_val_1D_1()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: legendre_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 1
    polyval_known = [1._rk, 1._rk, 1._rk]
    polyval_test(1) = legendre_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = legendre_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = legendre_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_legendre_val_1D_2()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: legendre_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 2
    polyval_known = [x(1), x(2), x(3)]
    polyval_test(1) = legendre_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = legendre_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = legendre_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_legendre_val_1D_3()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: legendre_val
    
    
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 3
    polyval_known = [0.5_rk*(3._rk*x(1)**2._rk - 1._rk), &
                     0.5_rk*(3._rk*x(2)**2._rk - 1._rk), &
                     0.5_rk*(3._rk*x(3)**2._rk - 1._rk)]
                     
    polyval_test(1) = legendre_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = legendre_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = legendre_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

@Test
subroutine test_legendre_val_1D_4()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: legendre_val
    
    implicit none
    real(rk), dimension(3)  :: polyval_known,polyval_test,x
    integer(ik)             :: spacedim, mode
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 4
    polyval_known = [0.5_rk*(5._rk*x(1)**3._rk - 3._rk*x(1)), &
                     0.5_rk*(5._rk*x(2)**3._rk - 3._rk*x(2)), &
                     0.5_rk*(5._rk*x(3)**3._rk - 3._rk*x(3))]
                     
    polyval_test(1) = legendre_val(spacedim,mode,x(1),ZERO,ZERO)
    polyval_test(2) = legendre_val(spacedim,mode,x(2),ZERO,ZERO)
    polyval_test(3) = legendre_val(spacedim,mode,x(3),ZERO,ZERO)
    
    @assertEqual(polyval_known,polyval_test)
    
end subroutine

!------------------------------------------------------------
!   Test Dlegendre_val recursion against analytical solutions
!------------------------------------------------------------
@Test
subroutine test_Dlegendre_val_1D_1()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: dlegendre_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 1
    partial_dir   = 1
    dpolyval_known = [0._rk, 0._rk, 0._rk]
    
    dpolyval_test(1) = dlegendre_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dlegendre_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dlegendre_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dlegendre_val_1D_2()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: dlegendre_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    
    spacedim      = 1
    mode          = 2
    partial_dir   = 1
    dpolyval_known = [1._rk, 1._rk, 1._rk]
    
    dpolyval_test(1) = dlegendre_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dlegendre_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dlegendre_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dlegendre_val_1D_3()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: dlegendre_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 3
    partial_dir   = 1
    dpolyval_known = [3._rk*x(1), 3._rk*x(2), 3._rk*x(3)]
    
    dpolyval_test(1) = dlegendre_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dlegendre_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dlegendre_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine

@Test
subroutine test_Dlegendre_val_1D_4()
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO
    use mod_legendre,   only: dlegendre_val
    
    implicit none
    real(rk), dimension(3)  :: dpolyval_known,dpolyval_test,x
    integer(ik)             :: spacedim, mode, partial_dir
    real(rk)                :: tol
    
    tol = 1.e-17_rk
    
    ! Locations for testing
    x = [-0.5_rk, 0._rk, 0.5_rk]
    
    spacedim      = 1
    mode          = 4
    partial_dir   = 1
    dpolyval_known = [0.5_rk*(15._rk*x(1)**2._rk - 3._rk), &
                      0.5_rk*(15._rk*x(2)**2._rk - 3._rk), &
                      0.5_rk*(15._rk*x(3)**2._rk - 3._rk)]
    
    dpolyval_test(1) = dlegendre_val(spacedim,mode,x(1),ZERO,ZERO,partial_dir)
    dpolyval_test(2) = dlegendre_val(spacedim,mode,x(2),ZERO,ZERO,partial_dir)
    dpolyval_test(3) = dlegendre_val(spacedim,mode,x(3),ZERO,ZERO,partial_dir)
    
    @assertEqual(dpolyval_known,dpolyval_test,tol)

end subroutine
