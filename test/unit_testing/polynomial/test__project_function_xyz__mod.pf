module test__project_function_xyz__mod
    use pfunit_mod
    use mod_kinds,                  only: rk,ik
    use mod_constants,              only: ZERO, FIVE, THREE, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_function,              only: function_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use mod_function,               only: create_function
    use mod_grid,                   only: compute_element_mappings
    use mod_polynomial,             only: PolynomialVal
    
    implicit none

    public  :: test_project_function_xyz



    !>  Test fixture for setting up an environment to test the function projection routine.
    !!  
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !-----------------------------------------------------------------------------------------
    @TestCase
    type, extends(TestCase) ::  test_project_function_xyz

        type(chidg_t)   :: chidg
        integer(ik)     :: nterms_s
        integer(ik)     :: solution_order

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_project_function_xyz
    !*****************************************************************************************


contains


    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    !------------------------------------------------------------------------------------------
    subroutine setUp(this)
        class(test_project_function_xyz),    intent(inout)   :: this
        
        integer(ik), parameter      :: npt = 8
        type(point_t)               :: nodes(8)
        type(domain_connectivity_t) :: connectivity
        integer(ik)                 :: nterms_c, idomain, spacedim, nelements_g

        IO_DESTINATION = 'file'
        
        !> (x = 0-5 :: y = 0-1 :: z = 0-1)
        !!          *-------*
        !!         /       /|
        !!    x=5 /       / |
        !!       /       /  *
        !!      *-------*  /
        !!      |       | /
        !!  z=1 |       |/
        !!      *-------*
        !!         y=1
        !!
        call nodes(1)%set(0._rk, 0._rk, 0._rk)
        call nodes(2)%set(5._rk, 0._rk, 0._rk)
        call nodes(3)%set(0._rk, 1._rk, 0._rk)
        call nodes(4)%set(5._rk, 1._rk, 0._rk)
        call nodes(5)%set(0._rk, 0._rk, 1._rk)
        call nodes(6)%set(5._rk, 0._rk, 1._rk)
        call nodes(7)%set(0._rk, 1._rk, 1._rk)
        call nodes(8)%set(5._rk, 1._rk, 1._rk)

        call connectivity%init('test domain',1,8)
        call connectivity%data(1)%init(1)
        connectivity%data(1)%data = [1,1,1, 1, 2, 3, 4, 5, 6, 7, 8]

        ! Initialize ChiDG environment
        call this%chidg%start_up('core')

        
        ! Initialize domain
        nterms_c            = npt
        this%solution_order = 3
        this%nterms_s       = 27
        spacedim            = 3
        nelements_g         = 1

        call this%chidg%data%add_domain('D_01',nodes,connectivity,nelements_g,spacedim,nterms_c,'Scalar Advection','Cartesian')

        call this%chidg%set('Solution Order', integer_input=this%solution_order)
        call this%chidg%init('domains')

        
    end subroutine setUp
    !***************************************************************************

    
    !---------------------------------------------------------------------------
    subroutine tearDown(this)
        class(test_project_function_xyz),    intent(inout)   :: this



        !
        ! Close ChiDG interface
        !
        call this%chidg%shut_down('core')


    end subroutine tearDown
    !***************************************************************************




    !> Test projection of the function f(t,x,y,z) = x^2
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------
    @Test
    subroutine test_project__x2(this)
        class(test_project_function_xyz),    intent(inout)   :: this
        real(rk)                                             :: fmodes(this%nterms_s)
        class(function_t), allocatable                       :: fcn
        integer(ik), parameter      :: npt = 11
        integer(ik)                 :: ipt, iterm
        type(point_t)               :: pts(npt), rpts(npt)
        
        real(rk)                    :: x(npt), y(npt), z(npt), rvals(npt), fvals(npt)
        real(rk)                    :: pvals(npt,this%nterms_s)
        real(rk)                    :: ref_integral, fintegral, xi, tol, time

        tol = 1.e-12_rk



        call create_function(fcn,'x_squared')
        associate (elem => this%chidg%data%mesh(1)%elems(1))
            
            ! Function evaluation points
            x = [0._rk, 0.5_rk, 1.0_rk, 1.5_rk, 2.0_rk, 2.5_rk, 3.0_rk, 3.5_rk, 4.0_rk, 4.5_rk, 5.0_rk]
            y = ZERO
            z = ZERO
            


            do ipt = 1,npt
                call pts(ipt)%set(x(ipt),y(ipt),z(ipt)) ! Cartesian points
                xi = -1._rk + 2._rk * x(ipt)/(5._rk)
                call rpts(ipt)%set(xi,ZERO,ZERO)        ! Reference element points
            end do
            
            
            !
            ! Compute reference values for function
            !
            time  = 0._rk
            rvals = fcn%compute(time,pts)
    
            
            !
            ! Compute projection of function onto polynonmial basis
            !
            fmodes = elem%project(fcn)
    

            !
            ! Evaluation polynomial modes at evaluation points
            !
            do iterm = 1,size(fmodes)
                do ipt = 1,npt
                    pvals(ipt,iterm) = PolynomialVal(3,size(fmodes),iterm,rpts(ipt))
                end do
            end do
    

            !
            ! Reconstruct projected function at evaluation points
            !
            fvals = matmul(pvals,fmodes)
            
    
            !
            ! Compute integral of function
            !
            fintegral = sum(matmul(elem%gq%vol%val, fmodes)  *  elem%gq%vol%weights  *  elem%jinv)
            
        end associate


        ! Analytically computed integral.  {int_0^1}{int_0^1}{int_0^5} [x^2] dxdydz
        ref_integral = 41.66666666666666666_rk

        ! Test that the integral of the projected function match the expected value
        @assertEqual(ref_integral,fintegral,tol)
        
        ! Test that the discrete values of the projected function match the expected values
        @assertEqual(rvals,fvals,tol)
        
        
    end subroutine test_project__x2
    !*******************************************************************************************




    !> Test projection of the function f(t,x,y,z) = y^2
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------
    @Test
    subroutine test_project__y2(self)
        class(test_project_function_xyz),    intent(inout)   :: self
        real(rk)                                             :: fmodes(self%nterms_s)
        class(function_t), allocatable                       :: fcn
        integer(ik), parameter      :: npt = 11
        integer(ik)                 :: ipt, iterm
        type(point_t)               :: pts(npt), rpts(npt)
        
        real(rk)                    :: x(npt), y(npt), z(npt), rvals(npt), fvals(npt)
        real(rk)                    :: pvals(npt,self%nterms_s)
        real(rk)                    :: ref_integral, fintegral, eta, tol, time

        tol = 1.e-13_rk

        call create_function(fcn,'y_squared')
        
        associate (elem => self%chidg%data%mesh(1)%elems(1))
        
        ! Function evaluation points
        x = ZERO
        y = [0._rk, 0.1_rk, 0.2_rk, 0.3_rk, 0.4_rk, 0.5_rk, 0.6_rk, 0.7_rk, 0.8_rk, 0.9_rk, 1.0_rk]
        z = ZERO
        
        do ipt = 1,npt
            call pts(ipt)%set(x(ipt),y(ipt),z(ipt)) !> Cartesian points
            
            eta = -1._rk + 2._rk * y(ipt)/(1._rk)
            call rpts(ipt)%set(ZERO,eta,ZERO)        !> Reference element points
        end do
        
        
        !
        ! Compute reference values for function
        !
        time  = 0._rk
        rvals = fcn%compute(time,pts)


        !
        ! Compute projection of function onto polynonmial basis
        !
        fmodes = elem%project(fcn)


        !
        ! Evaluation polynomial modes at evaluation points
        !
        do iterm = 1,size(fmodes)
            do ipt = 1,npt
                pvals(ipt,iterm) = PolynomialVal(3,size(fmodes),iterm,rpts(ipt))
            end do
        end do


        !
        ! Reconstruct projected function at evaluation points
        !
        fvals = matmul(pvals,fmodes)
        

        !
        ! Compute integral of function
        !
        fintegral = sum(matmul(elem%gq%vol%val, fmodes)  *  elem%gq%vol%weights  *  elem%jinv)
        
        end associate


        ! Analytically computed integral.  {int_0^1}{int_0^1}{int_0^5} [y^2] dxdydz
        ref_integral = FIVE/THREE

        ! Test that the integral of the projected function match the expected value
        @assertEqual(ref_integral,fintegral,tol)
        
        ! Test that the discrete values of the projected function match the expected values
        @assertEqual(rvals,fvals,tol)
        
        
    end subroutine test_project__y2
    !*****************************************************************************************



    !> Test projection of the function f(t,x,y,z) = z^2
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------
    @Test
    subroutine test_project__z2(self)
        class(test_project_function_xyz),    intent(inout)   :: self
        real(rk)                                             :: fmodes(self%nterms_s)
        class(function_t), allocatable                       :: fcn
        integer(ik), parameter      :: npt = 11
        integer(ik)                 :: ipt, iterm
        type(point_t)               :: pts(npt), rpts(npt)
        
        real(rk)                    :: x(npt), y(npt), z(npt), rvals(npt), fvals(npt)
        real(rk)                    :: pvals(npt,self%nterms_s)
        real(rk)                    :: ref_integral, fintegral, zeta, tol, time

        tol = 1.e-13_rk

        call create_function(fcn,'z_squared')

        associate (elem => self%chidg%data%mesh(1)%elems(1))
        
        ! Function evaluation points
        x = ZERO
        y = ZERO
        z = [0._rk, 0.1_rk, 0.2_rk, 0.3_rk, 0.4_rk, 0.5_rk, 0.6_rk, 0.7_rk, 0.8_rk, 0.9_rk, 1.0_rk]
        
        do ipt = 1,npt
            call pts(ipt)%set(x(ipt),y(ipt),z(ipt))     !> Cartesian points
            
            zeta = -1._rk + 2._rk * z(ipt)/(1._rk)
            call rpts(ipt)%set(ZERO,ZERO,zeta)          !> Reference element points
        end do
        
        
        !
        ! Compute reference values for function
        !
        time  = 0._rk
        rvals = fcn%compute(time,pts)


        !
        ! Compute projection of function onto polynonmial basis
        !
        fmodes = elem%project(fcn)


        !
        ! Evaluation polynomial modes at evaluation points
        !
        do iterm = 1,size(fmodes)
            do ipt = 1,npt
                pvals(ipt,iterm) = PolynomialVal(3,size(fmodes),iterm,rpts(ipt))
            end do
        end do


        !
        ! Reconstruct projected function at evaluation points
        !
        fvals = matmul(pvals,fmodes)
        

        !
        ! Compute integral of function
        !
        fintegral = sum(matmul(elem%gq%vol%val, fmodes)  *  elem%gq%vol%weights  *  elem%jinv)
        
        end associate


        ! Analytically computed integral.  {int_0^1}{int_0^1}{int_0^5} [z^2] dxdydz
        ref_integral = FIVE/THREE

        ! Test that the integral of the projected function match the expected value
        @assertEqual(ref_integral,fintegral,tol)
        
        ! Test that the discrete values of the projected function match the expected values
        @assertEqual(rvals,fvals,tol)
        
        
    end subroutine test_project__z2
    !****************************************************************************************





    !> Test projection of the function f(t,x,y,z) = x * y * z
    !!
    !!  @author Nathan A. Wukie
    !!  @date   2/2/2016
    !!
    !!
    !--------------------------------------------------------------------------------------------
    @Test
    subroutine test_project__xyz(self)
        class(test_project_function_xyz),    intent(inout)   :: self
        integer(ik), parameter                               :: npt = 27
        real(rk)                                             :: fmodes(self%nterms_s)
        class(function_t), allocatable                       :: fcn
        integer(ik)                 :: ipt, iterm
        type(point_t)               :: pts(npt), rpts(npt)
        
        real(rk)                    :: x(npt), y(npt), z(npt), rvals(npt), fvals(npt)
        real(rk)                    :: pvals(npt,self%nterms_s)
        real(rk)                    :: ref_integral, fintegral, xi, eta, zeta, tol, time

        tol = 1.e-13_rk

        call create_function(fcn,'xyz')

        associate (elem => self%chidg%data%mesh(1)%elems(1))
        
        ! Function evaluation points
        x = [0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk, &
             0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk, &
             0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk, 0._rk, 2.5_rk, 5.0_rk]
        y = [0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, &
             0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, &
             0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk]
        z = [0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, &
             0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, &
             0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk, 0._rk, 0.5_rk, 1.0_rk]
        
        do ipt = 1,npt
            call pts(ipt)%set(x(ipt),y(ipt),z(ipt))     ! Cartesian points
            
            xi   = -1._rk + 2._rk * x(ipt)/(5._rk)
            eta  = -1._rk + 2._rk * y(ipt)/(1._rk)
            zeta = -1._rk + 2._rk * z(ipt)/(1._rk)
            call rpts(ipt)%set(xi,eta,zeta)             ! Reference element points
        end do
        
        
        !
        ! Compute reference values for function
        !
        time  = 0._rk
        rvals = fcn%compute(time,pts)


        !
        ! Compute projection of function onto polynonmial basis
        !
        fmodes = elem%project(fcn)


        !
        ! Evaluation polynomial modes at evaluation points
        !
        do iterm = 1,size(fmodes)
            do ipt = 1,npt
                pvals(ipt,iterm) = PolynomialVal(3,size(fmodes),iterm,rpts(ipt))
            end do
        end do


        !
        ! Reconstruct projected function at evaluation points
        !
        fvals = matmul(pvals,fmodes)
        

        !
        ! Compute integral of function
        !
        fintegral = sum(matmul(elem%gq%vol%val, fmodes)  *  elem%gq%vol%weights  *  elem%jinv)
        
        end associate


        ! Analytically computed integral.  {int_0^1}{int_0^1}{int_0^5} (x * y * z) dxdydz
        ref_integral = 25._rk / 8._rk

        ! Test that the integral of the projected function match the expected value
        @assertEqual(ref_integral,fintegral,tol)
        
        ! Test that the discrete values of the projected function match the expected values
        @assertEqual(rvals,fvals,tol)
        
        
    end subroutine test_project__xyz
    !*********************************************************************************************









end module test__project_function_xyz__mod
