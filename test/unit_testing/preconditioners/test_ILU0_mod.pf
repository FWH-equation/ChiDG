module test_ILU0_mod
    use pfunit_mod
    use mod_kinds,                  only: rk, ik
    use mod_constants,              only: DIAG, XI_MIN, XI_MAX, ONE, TWO, THREE, FIVE, TEN, IO_DESTINATION
    use type_chidg,                 only: chidg_t
    use type_point,                 only: point_t
    use type_chidgVector,           only: chidgVector_t
    use type_domain_connectivity,   only: domain_connectivity_t
    use precon_ILU0,                only: precon_ILU0_t

    use mod_testutils,              only: meshgen
    implicit none


    public  :: test_preconditioner_ILU0

    @TestCase
    type, extends(TestCase) :: test_preconditioner_ILU0

        type(chidg_t)       :: chidg
        type(precon_ILU0_t) :: ILU0

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_preconditioner_ILU0








contains

    !
    ! Set Up
    !
    subroutine setUp(this)
        class(test_preconditioner_ILU0),    intent(inout)   :: this

        type(point_t),  allocatable :: nodes(:)
        type(domain_connectivity_t) :: connectivity
        integer(ik)                 :: nterms_c, nterms_s, spacedim

        
        !
        ! Send log to file
        !
        IO_DESTINATION = 'file'


        !
        ! Initialize ChiDG
        !
        call this%chidg%init('env')


        !
        ! Initialize a 3-element geometry
        !
        call meshgen('311',nodes,connectivity)


        !
        ! Add domain
        !
        spacedim = 3
        nterms_c = 8
        nterms_s = 1
        call this%chidg%data%add_domain('D_01',nodes,connectivity,spacedim,nterms_c,'scalar')


        !
        ! Call sdata initialization
        !
        call this%chidg%initialize_solution_domains(nterms_s)
        call this%chidg%init('communication')
        call this%chidg%initialize_solution_solver()



        !
        ! Initialize linearization matrix with some reference values
        !
        this%chidg%data%sdata%lhs%dom(1)%lblks(1,DIAG)%mat   = ONE
        this%chidg%data%sdata%lhs%dom(1)%lblks(1,XI_MAX)%mat = -TWO

        this%chidg%data%sdata%lhs%dom(1)%lblks(2,XI_MIN)%mat = TWO
        this%chidg%data%sdata%lhs%dom(1)%lblks(2,DIAG)%mat   = -FIVE
        this%chidg%data%sdata%lhs%dom(1)%lblks(2,XI_MAX)%mat = 12._rk

        this%chidg%data%sdata%lhs%dom(1)%lblks(3,XI_MIN)%mat = TWO
        this%chidg%data%sdata%lhs%dom(1)%lblks(3,DIAG)%mat   = -TEN


        !
        ! Initialize RHS vector with some reference values
        !
        this%chidg%data%sdata%rhs%dom(1)%lvecs(1)%vec = ONE
        this%chidg%data%sdata%rhs%dom(1)%lvecs(2)%vec = TWO
        this%chidg%data%sdata%rhs%dom(1)%lvecs(3)%vec = THREE


    end subroutine



    !
    ! Tear Down
    !
    subroutine tearDown(this)
        class(test_preconditioner_ILU0),    intent(inout)   :: this


        call this%chidg%close('core')

    end subroutine



















@Test
subroutine test_ILU0_init(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self


    !
    ! Initialize preconditioner. THIS IS BEING TESTED
    !
    call self%ILU0%init(self%chidg%data)



    !
    ! Test that only lower-triangular and diagonal components are allocated
    !
    @assertTrue(allocated(self%ILU0%LD(1)%lblks(1,DIAG)%mat))

    @assertTrue(allocated(self%ILU0%LD(1)%lblks(2,XI_MIN)%mat))
    @assertTrue(allocated(self%ILU0%LD(1)%lblks(2,DIAG)%mat))

    @assertTrue(allocated(self%ILU0%LD(1)%lblks(3,XI_MIN)%mat))
    @assertTrue(allocated(self%ILU0%LD(1)%lblks(3,DIAG)%mat))


end subroutine










!> Test the matrix factorization values
!!
!!
!!
!!          [ 1   -2   0 ]
!!      A = [ 2   -5  12 ] = LU
!!          [ 0    2 -10 ]
!!
!!  Expecting
!!
!!          [ 1          ]                                      [ 1/1              ]
!!      L = [ 2   -1     ]    inverted diagonal =>          L = [ 2    1/-1        ]
!!          [ 0   -2  14 ]                                      [ 0     -2    1/14 ]
!!
!!  The diagonal values in L should actually be apart of the diagonal of U, but we just store 
!!  them in L for convenience. We also store them inverted.
!!
!!  The U factorization is identical to the upper-triangular components of matrix A, so they 
!!  are not computed or stored
!!
!-------------------------------------------------------------------------------------------
@Test
subroutine test_ILU0_update(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self

    !
    ! Initialize preconditioner
    !
    call self%ILU0%init(self%chidg%data)


    !
    ! Call ILU0 update procedure. THIS IS BEING TESTED
    !
    associate ( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs )
    
        call self%ILU0%update(A,b)

    end associate






    !
    ! Test ILU0 preconditioner matrix factorization values
    !
    @assertEqual(ONE,self%ILU0%LD(1)%lblks(1,DIAG)%mat(1,1))


    @assertEqual(TWO,self%ILU0%LD(1)%lblks(2,XI_MIN)%mat(1,1))
    @assertEqual(-ONE,self%ILU0%LD(1)%lblks(2,DIAG)%mat(1,1))


    @assertEqual(-TWO,self%ILU0%LD(1)%lblks(3,XI_MIN)%mat(1,1))
    @assertEqual((ONE/14._rk),self%ILU0%LD(1)%lblks(3,DIAG)%mat(1,1))


end subroutine











@Test
subroutine test_ILU0_apply(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self

    type(chidgVector_t) :: z
    real(rk)            :: tol

    tol = 1.e-5_rk

    !
    ! Initialize preconditioner
    !
    call self%ILU0%init(self%chidg%data)


    !
    ! Call ILU0 update procedure
    !
    associate ( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs )
        call self%ILU0%update(A,b)
    end associate


    !
    ! Apply preconditioner. THIS IS BEING TESTED
    !  
    associate ( A => self%chidg%data%sdata%lhs, b => self%chidg%data%sdata%rhs )
        z = self%ILU0%apply(A,b)
    end associate





    @assertEqual(6.142857143_rk ,z%dom(1)%lvecs(1)%vec(1),tol)
    @assertEqual(2.57142857_rk  ,z%dom(1)%lvecs(2)%vec(1),tol)
    @assertEqual(0.2142857143_rk,z%dom(1)%lvecs(3)%vec(1),tol)


end subroutine










end module test_ILU0_mod
