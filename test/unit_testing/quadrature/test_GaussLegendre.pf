!---------------------------------------------------------------
!
!               Test Gauss-Legendre Nodes
!
!---------------------------------------------------------------
@Test
subroutine test_gauss_legendre_Nodes_1()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_nodes
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: nodes, nodesKnown
    integer(kind=ik)                            :: nnodes
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk
        
    nnodes = 1
    allocate(nodes(nnodes),nodesKnown(nnodes))
    nodesKnown = [0._rk]
    
    call gl_nodes(nnodes,nodes)
    @assertEqual(nodesKnown,nodes,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Nodes_2()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_nodes
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: nodes, nodesKnown
    integer(kind=ik)                            :: nnodes
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk
    
    nnodes = 2
    allocate(nodes(nnodes),nodesKnown(nnodes))
    nodesKnown = [-sqrt(1._rk/3._rk), sqrt(1._rk/3._rk)]
    
    call gl_nodes(nnodes,nodes)
    @assertEqual(nodesKnown,nodes,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Nodes_3()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_nodes
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: nodes, nodesKnown
    integer(kind=ik)                            :: nnodes
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nnodes = 3
    allocate(nodes(nnodes),nodesKnown(nnodes))
    nodesKnown = [-sqrt(3._rk/5._rk), 0._rk, sqrt(3._rk/5._rk)]
    
    call gl_nodes(nnodes,nodes)
    @assertEqual(nodesKnown,nodes,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Nodes_4()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_nodes
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: nodes, nodesKnown
    integer(kind=ik)                            :: nnodes
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nnodes = 4
    allocate(nodes(nnodes),nodesKnown(nnodes))
    nodesKnown = [-sqrt((3._rk/7._rk) + (2._rk/7._rk)*sqrt(6._rk/5._rk)), &
                  -sqrt((3._rk/7._rk) - (2._rk/7._rk)*sqrt(6._rk/5._rk)), &
                   sqrt((3._rk/7._rk) - (2._rk/7._rk)*sqrt(6._rk/5._rk)), &
                   sqrt((3._rk/7._rk) + (2._rk/7._rk)*sqrt(6._rk/5._rk))  ]
    
    call gl_nodes(nnodes,nodes)
    @assertEqual(nodesKnown,nodes,tol)
    
end subroutine

!------------------------------------------------------------
!
!               Test Gauss-Legendre Weights
!
!------------------------------------------------------------
@Test
subroutine test_gauss_legendre_Weights_1()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_weights
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: weights, weightsKnown
    integer(kind=ik)                            :: nweights
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nweights = 1
    allocate(weights(nweights),weightsKnown(nweights))
    weightsKnown = [2._rk]
    
    call gl_weights(nweights,weights)
    @assertEqual(weightsKnown,weights,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Weights_2()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_weights
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: weights, weightsKnown
    integer(kind=ik)                            :: nweights
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nweights = 2
    allocate(weights(nweights),weightsKnown(nweights))
    weightsKnown = [1._rk, 1._rk]
    
    call gl_weights(nweights,weights)
    @assertEqual(weightsKnown,weights,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Weights_3()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_weights
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: weights, weightsKnown
    integer(kind=ik)                            :: nweights
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nweights = 3
    allocate(weights(nweights),weightsKnown(nweights))
    weightsKnown = [5._rk/9._rk, 8._rk/9._rk, 5._rk/9._rk]
    
    call gl_weights(nweights,weights)
    @assertEqual(weightsKnown,weights,tol)
    
end subroutine

@Test
subroutine test_gauss_legendre_Weights_4()
    use pfunit_mod
    use mod_gauss_legendre, only: gl_weights
    use mod_kinds, only: rk,ik
    
    implicit none
    real(kind=rk), dimension(:), allocatable    :: weights, weightsKnown
    integer(kind=ik)                            :: nweights
    real(kind=rk)                               :: tol
    
    tol = 1.e-15_rk

    nweights = 4
    allocate(weights(nweights),weightsKnown(nweights))
    weightsKnown = [(18._rk-sqrt(30._rk))/(36._rk), &
                    (18._rk+sqrt(30._rk))/(36._rk), &
                    (18._rk+sqrt(30._rk))/(36._rk), &
                    (18._rk-sqrt(30._rk))/(36._rk)  ]
    
    call gl_weights(nweights,weights)
    @assertEqual(weightsKnown,weights,tol)
    
end subroutine


!-----------------------------------------------------------------------
!
!          Test integrating analytical function for exactness
!
!-----------------------------------------------------------------------
!> Test integrating a first-order polynomial
@Test
subroutine test_gauss_legendre_Integrate_P1()
    use pfunit_mod
    use mod_gauss_legendre,  only: gl_weights, gl_nodes
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ONE, TWO
    
    implicit none
    integer(ik), parameter   :: nnodes = 1
    real(rk)                 :: weights(nnodes), nodes(nnodes), f(nnodes)
    real(rk)                 :: integral, integralKnown
    real(rk)                 :: tol
    
    tol           = 1.e-15_rk
    integralKnown = TWO

    call gl_weights(nnodes,weights)
    call gl_nodes(nnodes,nodes)

    f = nodes + ONE               ! f = x + 1
    integral = sum(f*weights)

    @assertEqual(integralKnown,integral,tol)
    
end subroutine



!> Test integrating a second-order polynomial
@Test
subroutine test_gauss_legendre_Integrate_P2()
    use pfunit_mod
    use mod_gauss_legendre,  only: gl_weights, gl_nodes
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: TWO, SEVEN, TWO_THR
    
    implicit none
    integer(ik), parameter   :: nnodes = 2
    real(rk)                 :: weights(nnodes), nodes(nnodes), f(nnodes)
    real(rk)                 :: integral, integralKnown
    real(rk)                 :: tol
    
    tol           = 1.e-15_rk
    integralKnown = 14._rk + TWO_THR           ! 14.666666666

    call gl_weights(nnodes,weights)
    call gl_nodes(nnodes,nodes)

    f = nodes*nodes + TWO*nodes + SEVEN        ! f = x**2  +  2x  +  7
    integral = sum(f*weights)

    @assertEqual(integralKnown,integral,tol)
    
end subroutine



!> Test integrating a third order polynomial
@Test
subroutine test_gauss_legendre_Integrate_P3()
    use pfunit_mod
    use mod_gauss_legendre,  only: gl_weights, gl_nodes
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: TWO, THREE, FIVE
    
    implicit none
    integer(ik), parameter   :: nnodes = 2
    real(rk)                 :: weights(nnodes), nodes(nnodes), f(nnodes)
    real(rk)                 :: integral, integralKnown
    real(rk)                 :: tol
    
    tol           = 1.e-15_rk
    integralKnown = 12.0_rk                                      ! 12.0

    call gl_weights(nnodes,weights)
    call gl_nodes(nnodes,nodes)

    f = nodes*nodes*nodes/THREE + THREE*nodes*nodes + FIVE        ! f = (x**3)/3  +  3*(x**2)  +  5
    integral = sum(f*weights)

    @assertEqual(integralKnown,integral,tol)
    
end subroutine



!> Test integrating a tenth order polynomial
@Test
subroutine test_gauss_legendre_Integrate_P10()
    use pfunit_mod
    use mod_gauss_legendre,  only: gl_weights, gl_nodes
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: TWO, SEVEN, TEN
    
    implicit none
    integer(ik), parameter   :: nnodes = 6
    real(rk)                 :: weights(nnodes), nodes(nnodes), f(nnodes)
    real(rk)                 :: integral, integralKnown
    real(rk)                 :: tol
    
    tol           = 2.e-15_rk
    integralKnown = (2._rk/11._rk) + (4._rk/3._rk)                                     

    call gl_weights(nnodes,weights)
    call gl_nodes(nnodes,nodes)

    f = (nodes**TEN) + (nodes**SEVEN) + TWO*(nodes**TWO)
    integral = sum(f*weights)

    @assertEqual(integralKnown,integral,tol)
    
end subroutine
















