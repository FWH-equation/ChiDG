@Test
subroutine test_update_space_euler()
#include <messenger.h>
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  IO_DESTINATION, ZERO

    use type_chidg,         only: chidg_t
    use type_function,      only: function_t

    use mod_grid_operators, only: initialize_variable
    use mod_test_utilities, only: create_mesh_file
    use mod_file_utilities, only: delete_file
    use mod_function,       only: create_function
    use mod_spatial,        only: update_space

    use operator_chidg_mv,  only: chidg_mv
    implicit none


    type(chidg_t)                   :: chidgA, chidgB
    character(:),       allocatable :: chidgA_file, chidgB_file
    class(function_t),  allocatable :: constant
    integer(ik)                     :: nterms_s, spacedim
    real(rk)                        :: tol


    tol             = 1.e-6_rk
    spacedim        = 3
    nterms_s        = 8
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG
    !
    call chidgA%init('env')


    !
    ! Create mesh files
    !
    chidgA_file = "smoothbump_onedomain.h5"
    chidgB_file = "smoothbump_twodomain.h5"
    call create_mesh_file("Smooth Bump : One Domain",chidgA_file)
    call create_mesh_file("Smooth Bump : Two Domain",chidgB_file)


    !
    ! Read grid
    !
    call chidgA%read_grid(chidgA_file,spacedim)
    call chidgB%read_grid(chidgB_file,spacedim)

    call chidgA%read_boundaryconditions(chidgA_file)
    call chidgB%read_boundaryconditions(chidgB_file)


    !
    ! Initialize solution data storage
    !
    call chidgA%initialize_solution_domains(nterms_s)
    call chidgB%initialize_solution_domains(nterms_s)

    call chidgA%init('communication')
    call chidgA%init('chimera')
    call chidgA%data%initialize_solution_solver()

    call chidgB%init('communication')
    call chidgB%init('chimera')
    call chidgB%data%initialize_solution_solver()


    !
    ! Initialize solution
    !
    call create_function(constant,'constant')

    call constant%set_option('val',1.13_rk)
    call initialize_variable(chidgA%data,1,constant)
    call initialize_variable(chidgB%data,1,constant)

    call constant%set_option('val',190._rk)
    call initialize_variable(chidgA%data,2,constant)
    call initialize_variable(chidgB%data,2,constant)

    call constant%set_option('val',ZERO)
    call initialize_variable(chidgA%data,3,constant)
    call initialize_variable(chidgB%data,3,constant)

    call constant%set_option('val',ZERO)
    call initialize_variable(chidgA%data,4,constant)
    call initialize_variable(chidgB%data,4,constant)

    call constant%set_option('val',248000.0_rk)
    call initialize_variable(chidgA%data,5,constant)
    call initialize_variable(chidgB%data,5,constant)




    !
    ! Call update_space
    !
    call write_line("ChiDG - A: Updating Space")
    call update_space(chidgA%data)
    
    call write_line("ChiDG - B: Updating Space")
    call update_space(chidgB%data)




    !
    ! Compare residual vector entries
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(6)%vec,  tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(1)%vec,  tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(18)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(12)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(19)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(7)%vec,  tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(30)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(18)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(31)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(13)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(42)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(24)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(43)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(19)%vec, tol )


    !
    ! Compare jacobian matrix entries
    !
    ! Comparing the Single-Domain 16 element block jacobians to the Two-Domain, 8-element block Chimera jacobians

    !
    ! Domain 1 Chimera Blocks
    !
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chi_blks(6,1)%mat,  tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(1,1)%mat,  tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(18,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chi_blks(12,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(19,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chi_blks(7,1)%mat,  tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(30,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chi_blks(18,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(31,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chi_blks(13,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(42,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chi_blks(24,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(43,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chi_blks(19,1)%mat, tol)



    !
    ! Compare matrix vector product
    !
    chidgA%data%sdata%rhs = chidg_mv(chidgA%data%sdata%lhs , chidgA%data%sdata%q)
    chidgB%data%sdata%rhs = chidg_mv(chidgB%data%sdata%lhs , chidgB%data%sdata%q)

    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%vecs(6)%vec, tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%vecs(1)%vec, tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(18)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(12)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(19)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(7)%vec, tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(30)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(18)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(31)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(13)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(42)%vec, chidgB%data%sdata%rhs%dom(1)%vecs(24)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%vecs(43)%vec, chidgB%data%sdata%rhs%dom(2)%vecs(19)%vec,tol)




    !
    ! Close ChiDG interface
    !
    call chidgA%close('core')
    call chidgB%close('core')


    call delete_file(chidgA_file)
    call delete_file(chidgB_file)

end subroutine test_update_space_euler
