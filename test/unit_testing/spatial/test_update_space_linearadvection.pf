@Test
subroutine test_update_space_linearadvection()
#include <messenger.h>
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  IO_DESTINATION

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use type_function,      only: function_t
    use type_bc,            only: bc_t
    use mod_bc,             only: create_bc


    use mod_grid_operators, only: initialize_variable
    use mod_function,       only: create_function
    use mod_hdfio,          only: read_grid_hdf
    use mod_spatial,        only: update_space

    use operator_chidg_mv
    implicit none


    type(chidg_t)                   :: chidgA, chidgB
    class(bc_t),        allocatable :: bc
    type(meshdata_t),   allocatable :: meshdataA(:), meshdataB(:)
    class(function_t),  allocatable :: constant, gaussian
    integer(ik)     :: idom, nterms_s, ChiID, spacedim
    real(rk)        :: tol




    tol             = 1.e-15_rk
    spacedim        = 3
    nterms_s        = 8
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG
    !
    call chidgA%init('env')



    !
    ! Read grid. These grids are the same geometry. The first has only one block. The second has two blocks.
    ! Here, we wish to initialize both and then compare the initialized data between the two. They should be the same.
    !
    call chidgA%read_grid('D1_E16_M1.h5',spacedim)
    call chidgB%read_grid('D2_E8_M1_abutting.h5',spacedim)

    call chidgA%read_boundaryconditions('D1_E16_M1.h5')
    call chidgB%read_boundaryconditions('D2_E8_M1_abutting.h5')
    


    call chidgA%initialize_solution_domains(nterms_s)
    call chidgB%initialize_solution_domains(nterms_s)



    !
    ! Initialize solution data storage
    !
    call chidgA%init('communication')
    call chidgA%init('chimera')
    call chidgA%initialize_solution_solver()

    call chidgB%init('communication')
    call chidgB%init('chimera')
    call chidgB%initialize_solution_solver()




    !
    ! Initialize solution
    !
    call create_function(gaussian,'gaussian')

    call initialize_variable(chidgA%data,1,gaussian)
    call initialize_variable(chidgB%data,1,gaussian)




    !
    ! Compare initial solution
    !
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(1)%vec, chidgB%data%sdata%q%dom(1)%lvecs(1)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(2)%vec, chidgB%data%sdata%q%dom(1)%lvecs(2)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(3)%vec, chidgB%data%sdata%q%dom(2)%lvecs(1)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(4)%vec, chidgB%data%sdata%q%dom(2)%lvecs(2)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(5)%vec, chidgB%data%sdata%q%dom(1)%lvecs(3)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(6)%vec, chidgB%data%sdata%q%dom(1)%lvecs(4)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(7)%vec, chidgB%data%sdata%q%dom(2)%lvecs(3)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(8)%vec, chidgB%data%sdata%q%dom(2)%lvecs(4)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(9)%vec, chidgB%data%sdata%q%dom(1)%lvecs(5)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(10)%vec, chidgB%data%sdata%q%dom(1)%lvecs(6)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(11)%vec, chidgB%data%sdata%q%dom(2)%lvecs(5)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(12)%vec, chidgB%data%sdata%q%dom(2)%lvecs(6)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(13)%vec, chidgB%data%sdata%q%dom(1)%lvecs(7)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(14)%vec, chidgB%data%sdata%q%dom(1)%lvecs(8)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(15)%vec, chidgB%data%sdata%q%dom(2)%lvecs(7)%vec )
    @assertEqual(chidgA%data%sdata%q%dom(1)%lvecs(16)%vec, chidgB%data%sdata%q%dom(2)%lvecs(8)%vec )






    !
    ! Compare interpolation matrices between standard interior and the chimera faces
    !
    ChiID = chidgB%data%mesh(2)%faces(1,XI_MIN)%ChiID
    @assertEqual(chidgA%data%mesh(1)%faces(2,XI_MAX)%gq%face%val(:,:,XI_MAX), chidgB%data%mesh(2)%chimera%recv%data(ChiID)%donor_interpolator%at(1))

    ChiID = chidgB%data%mesh(2)%faces(3,XI_MIN)%ChiID
    @assertEqual(chidgA%data%mesh(1)%faces(6,XI_MAX)%gq%face%val(:,:,XI_MAX), chidgB%data%mesh(2)%chimera%recv%data(ChiID)%donor_interpolator%at(1))

    ChiID = chidgB%data%mesh(1)%faces(2,XI_MAX)%ChiID
    @assertEqual(chidgA%data%mesh(1)%faces(3,XI_MIN)%gq%face%val(:,:,XI_MIN), chidgB%data%mesh(1)%chimera%recv%data(ChiID)%donor_interpolator%at(1))

    ChiID = chidgB%data%mesh(1)%faces(4,XI_MAX)%ChiID
    @assertEqual(chidgA%data%mesh(1)%faces(7,XI_MIN)%gq%face%val(:,:,XI_MIN), chidgB%data%mesh(1)%chimera%recv%data(ChiID)%donor_interpolator%at(1))


    !
    ! Call update_space
    !
    call write_line("ChiDG - A: Updating Space")
    call update_space(chidgA%data)

    call write_line("ChiDG - B: Updating Space")
    call update_space(chidgB%data)





    !
    ! Compare geometry
    !
    @assertEqual(chidgA%data%mesh(1)%elems(1)%coords%vec, chidgB%data%mesh(1)%elems(1)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(2)%coords%vec, chidgB%data%mesh(1)%elems(2)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(3)%coords%vec, chidgB%data%mesh(2)%elems(1)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(4)%coords%vec, chidgB%data%mesh(2)%elems(2)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(5)%coords%vec, chidgB%data%mesh(1)%elems(3)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(6)%coords%vec, chidgB%data%mesh(1)%elems(4)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(7)%coords%vec, chidgB%data%mesh(2)%elems(3)%coords%vec )
    @assertEqual(chidgA%data%mesh(1)%elems(8)%coords%vec, chidgB%data%mesh(2)%elems(4)%coords%vec )







    !
    ! Compare residual vector entries
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(1)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(1)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(2)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(2)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(3)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(1)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(4)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(2)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(5)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(3)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(6)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(4)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(7)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(3)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(8)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(4)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(9)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(5)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(10)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(6)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(11)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(5)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(12)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(6)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(13)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(7)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(14)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(8)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(15)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(7)%vec, tol )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(16)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(8)%vec, tol )



    !
    ! Compare jacobian matrix entries
    !
    ! Comparing the Single-Domain 16 element block jacobians to the Two-Domain, 8-element block Chimera jacobians

    !
    ! Domain 1 Chimera Blocks
    !
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(2,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(1)%lblks(2,XI_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(2,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chi_blks(2,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(2,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%lblks(2,ETA_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(2,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(1)%lblks(2,ZETA_MAX)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(1)%lblks(4,XI_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chi_blks(4,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(1)%lblks(4,ETA_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(1)%lblks(4,ZETA_MAX)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(10,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(1)%lblks(6,XI_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(10,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chi_blks(6,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(10,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%lblks(6,ETA_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(10,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(1)%lblks(6,ZETA_MIN)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(14,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(1)%lblks(8,XI_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(14,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chi_blks(8,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(14,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(1)%lblks(8,ETA_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(14,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(1)%lblks(8,ZETA_MIN)%mat)


    !
    ! Domain 2 Chimera Blocks
    !
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(1,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(1,XI_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(1,ETA_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(3,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(1,ZETA_MAX)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(3,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(3,XI_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(3,ETA_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,ZETA_MAX)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(3,ZETA_MAX)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(5,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(5,XI_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,ETA_MAX)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(5,ETA_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(11,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(5,ZETA_MIN)%mat)


    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chi_blks(7,1)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(2)%lblks(7,XI_MAX)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,ETA_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%lblks(7,ETA_MIN)%mat)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(15,ZETA_MIN)%mat, chidgB%data%sdata%lhs%dom(2)%lblks(7,ZETA_MIN)%mat)








    !
    ! Compare matrix vector product
    !
    chidgA%data%sdata%rhs = chidgA%data%sdata%lhs * chidgA%data%sdata%q
    chidgB%data%sdata%rhs = chidgB%data%sdata%lhs * chidgB%data%sdata%q




    !
    ! Test
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(1)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(1)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(2)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(2)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(3)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(1)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(4)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(2)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(5)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(3)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(6)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(4)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(7)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(3)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(8)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(4)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(9)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(5)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(10)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(6)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(11)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(5)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(12)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(6)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(13)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(7)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(14)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(8)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(15)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(7)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(16)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(8)%vec,tol)






    !
    ! Close ChiDG interface
    !
    call chidgA%close('core')
    call chidgB%close('core')







end subroutine test_update_space_linearadvection
