!  Test subroutines for generating inverse Fourier transform matrix, its time derivative,
!  the Fourier transform matrix and the pseudo spectral operator 


!>  Test for 1 HB frequency (3 HB time levels)
!!
!!  @author Mayank Sharma
!!
!---------------------------------------------------------------------------------------------------
@Test
subroutine test_HB_matrices_3x3()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO,ONE,PI
    use mod_HB_matrices     

    implicit none

    !
    ! K - no. of HB frequencies, N - no. of HB time levels
    !
    integer(ik),parameter       :: K = 1, N = 3
    real(rk),dimension(K)       :: omega
    real(rk),dimension(N)       :: t
    real(rk),dimension(N,N)     :: inv_E, diff_inv_E, D                  ! Matrices computed using
                                                                         ! subroutines
    real(rk),dimension(N,N)     :: test_invE, test_dinvE, test_E, test_D ! Matrices to be compared
                                                                         ! against
    real(rk)                    :: dt, check_elem
    real(rk),parameter          :: pie = 4.0*atan(1.0)
    integer(ik)                 :: i,j,j1,j2                             ! Counters

    !
    ! Define HB frequencies and time levels
    !
    omega = (/PI/)
    dt    = 1.0_rk/3.0_rk
    t     = 2.0_rk*(/dt, 2.0_rk*dt, 3.0_rk*dt/)

    !
    ! Generate test inverse Fourier transfrom matrix and its time derivative
    ! The matrices generated by subroutines calc_inv_E and calc_diff_inv_E 
    ! will be compared against these
    !
    do i = 1,N
        do j = 1,N

            if (j == 1) then
                test_invE(i,j)  = 1.0_rk
                test_dinvE(i,j) = 0.0_rk
            else if (j >= 2 .and. j <= K + 1) then
                j1 = j - 1
                test_invE(i,j)  = sin(omega(j1)*t(i)) 
                test_dinvE(i,j) = omega(j1)*cos(omega(j1)*t(i))
            else
                j2 = j - (K + 1)
                test_invE(i,j)  = cos(omega(j2)*t(i))
                test_dinvE(i,j) = -omega(j2)*sin(omega(j2)*t(i))
            end if

        end do
    end do

    print *, size(test_invE)

    !
    ! Calculate the test Fourier transform matrix
    ! Not explicitly tested, used to generate test pseudo spectral operator
    !
    test_E = inv(test_invE)

    !
    ! Calculate test pseudo spectral operator
    !
    test_D = matmul(test_dinvE,test_E)

    !
    ! Call subroutines from mod_HB_matrices and compute actual matrices
    !
    call calc_inv_E(K,N,omega,t,inv_E)
    call calc_diff_inv_E(K,N,omega,t,diff_inv_E)
    call calc_pseudo_spectral_operator(K,N,omega,t,D)

    !
    ! Test if the two sets of matrices are equal or not
    !
    @assertEqual(diff_inv_E,test_dinvE)
    @assertEqual(diff_inv_E,test_dinvE)
    @assertEqual(D,test_D)

    !
    ! Check if the diagonal elements of D are close to 0 (< 10E-8)
    ! TODO: Add more tests of this sort
    !
    check_elem = 0.00000001

    do i = 1,N
        do j = 1,N

            if (i == j) then

                @assertTrue(D(i,j) .lt. check_elem)

            end if

        end do
    end do

end subroutine test_HB_matrices_3x3
!***************************************************************************************************



!>  Test for 2 HB frequencies (5 HB time levels)
!!
!!  @author Mayank Sharma
!!
!---------------------------------------------------------------------------------------------------
@Test
subroutine test_HB_matrices_5x5()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO,ONE,PI
    use mod_HB_matrices     

    implicit none

    !
    ! K - no. of HB frequencies, N - no. of HB time levels
    !
    integer(ik),parameter       :: K = 2, N = 5
    real(rk),dimension(K)       :: omega
    real(rk),dimension(N)       :: t
    real(rk),dimension(N,N)     :: inv_E, diff_inv_E, D                  ! Matrices computed using
                                                                         ! subroutines
    real(rk),dimension(N,N)     :: test_invE, test_dinvE, test_E, test_D ! Matrices to be compared
                                                                         ! against
    real(rk)                    :: min_omega, dt, check_elem
    integer(ik)                 :: i,j,j1,j2                             ! Counters

    !
    ! Define HB frequencies and time levels
    !
    omega = (/0.2_rk, 0.4_rk/)
    min_omega = minval(omega)
    dt    = 1.0_rk/5.0_rk
    t     = (2.0_rk*PI/min_omega)*(/dt, 2.0_rk*dt, 3.0_rk*dt, 4.0_rk*dt, 5.0_rk*dt/)

    !
    ! Generate test inverse Fourier transfrom matrix and its time derivative
    ! The matrices generated by subroutines calc_inv_E and calc_diff_inv_E 
    ! will be compared against these
    !
    do i = 1,N
        do j = 1,N

            if (j == 1) then
                test_invE(i,j)  = 1.0_rk
                test_dinvE(i,j) = 0.0_rk
            else if (j >= 2 .and. j <= K + 1) then
                j1 = j - 1
                test_invE(i,j)  = sin(omega(j1)*t(i)) 
                test_dinvE(i,j) = omega(j1)*cos(omega(j1)*t(i))
            else
                j2 = j - (K + 1)
                test_invE(i,j)  = cos(omega(j2)*t(i))
                test_dinvE(i,j) = -omega(j2)*sin(omega(j2)*t(i))
            end if

        end do
    end do

    !
    ! Calculate the test Fourier transform matrix
    ! Not explicitly tested, used to generate test pseudo spectral operator
    !
    test_E = inv(test_invE)

    !
    ! Calculate test pseudo spectral operator
    !
    test_D = matmul(test_dinvE,test_E)

    !
    ! Call subroutines from mod_HB_matrices and compute actual matrices
    !
    call calc_inv_E(K,N,omega,t,inv_E)
    call calc_diff_inv_E(K,N,omega,t,diff_inv_E)
    call calc_pseudo_spectral_operator(K,N,omega,t,D)

    !
    ! Test if the two sets of matrices are equal or not
    !
    @assertEqual(diff_inv_E,test_dinvE)
    @assertEqual(diff_inv_E,test_dinvE)
    @assertEqual(D,test_D)

    !
    ! Check if the diagonal elements of D are close to 0 (< 10E-8)
    ! TODO: Add more tests of this sort
    !
    check_elem = 0.00000001

    do i = 1,N
        do j = 1,N

            if (i == j) then

                @assertTrue(D(i,j) .lt. check_elem)

            end if

        end do
    end do

end subroutine test_HB_matrices_5x5
!***************************************************************************************************




















